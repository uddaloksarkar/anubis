{"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # create list to hold paren string\n    paren_list = []\n    # check if a string starts with a left paren\n    if paren_string[0] == '(':\n        # if it does, add left paren to list\n        paren_list.append(paren_string[0])\n        # check if the rest of the string is valid and that the next character is a right paren\n        if pare": 2.164010396392594e-36, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(paren_string):\n        open_paren = paren_string[i]\n        if open_paren == '(':\n            j = paren_string.find(')', i)\n            result.append(paren_string[i:j+1])\n            i = j+1\n        else:\n            i += 1\n    return result": 3.9499049886445066e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You can put your code here\n    pass": 5.5575159962843376e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    stack = []\n    open_parens = 0\n    for char in paren_string:\n        if char == '(':\n            open_parens += 1\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                continue\n            if open_parens == 1:\n                result.append('()')\n            else:\n                stack.pop()\n                open": 5.166170097838327e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_list = []\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Find all open braces and store them in a stack\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(paren)\n        elif paren == \")\" and paren_stack:\n            paren_stack": 9.621505108471494e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass": 0.09491349548496819, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren = []\n    split_string = []\n    for i in paren_string:\n        if i == '(':\n            open_paren.append(i)\n        elif i == ')':\n            open_paren.pop()\n        elif i == ' ':\n            continue\n        else:\n            split_string.append(i)\n    return split_string": 1.1979649337385623e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_groups = []\n    paren_group = []\n    paren_group_started = False\n    for paren in paren_string:\n        if paren == '(':\n            if paren_group_started:\n                paren_groups.append(\"\".join(paren_group))\n                paren_group = []\n            paren_group_started = True\n        elif paren ==": 3.817279277231811e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_indices = [i for i, char in enumerate(paren_string) if char == '(']\n    closed_paren_indices = [i for i, char in enumerate(paren_string) if char == ')']\n    paren_list = []\n    for i, o_paren in enumerate(open_paren_indices):\n        c_paren = closed_p": 7.452195624008628e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    # TODO: your code here\n    return res": 1.1056927323745248e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_list = []\n    current_string = ''\n    for char in paren_string:\n        if char == '(':\n            parens_list.append(current_string)\n            current_string = ''\n        elif char == ')':\n            if current_string:\n                parens_list.append(current_string)\n            else:\n                parens_list.pop()\n        elif char != '": 2.4576209926814294e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # delete pass when you're ready to start coding": 5.997362976935808e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    temp_list = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_stack.append(i)\n        elif i == \")\":\n            if len(paren_stack) == 0:\n                temp_list.append(\"()\")\n            elif paren_stack[-1] == \"(\":\n                paren_stack.pop()\n                if len": 1.1942267704674244e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_str = ''\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_str += i\n        elif i == ')' and paren_str[-1] == '(':\n            paren_str = paren_str[:-1]\n        elif i == ')' and paren_str[-1] != '(':\n            paren_": 8.233132766858918e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement this function.\n    pass": 4.062469428333456e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    paren_groups = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                continue\n            else:\n                stack.pop()\n        elif i == ' ':\n            continue\n        else:\n            if len(stack) == 0:\n                paren_groups.": 4.1822270197830696e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # start out with an empty list to hold the final string\n    result = []\n    # loop over the string to find balanced parentheses groups\n    i = 0\n    while i < len(paren_string):\n        # find the first open parenthesis\n        while paren_string[i] != '(':\n            i += 1\n            if i >= len(paren_string):\n                break\n\n        # find the matching": 1.264309933811135e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if stack == []:\n                stack.append(char)\n\n    stack.reverse()\n    return stack": 4.800872811897853e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    opening_paren = \"(\"\n    for char in paren_string:\n        if char == opening_paren:\n            paren_stack.append(opening_paren)\n        elif char == \")\":\n            if len(paren_stack) > 0:\n                paren_groups.append(\"\".join(paren_stack))\n                paren": 1.174326547350318e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    paren_stack = []\n    current_string = \"\"\n    group_started = False\n    groups = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            if group_started:\n                current_string += paren_string[i]\n            else:\n                group_started = True\n                current_string +=": 5.103062656651495e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # 1. Write code here.\n    def add_up_braces(string: str) -> int:\n        brace = 0\n        for i in range(len(string)):\n            if string[i] == '(':\n                brace += 1\n            elif string[i] == ')':\n                brace -= 1\n            if brace == 0:\n                return i\n        raise ValueError(\"Not a valid string\")": 7.228955485109452e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement separate_paren_groups function\n    pass": 2.0617989831392896e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    bracket_stack = []\n    paren_stack = []\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(paren)\n        elif paren == \")\":\n            if paren_stack:\n                bracket_stack.append(paren_stack.pop())\n    result = []\n    print(bracket_stack)\n    print(paren_": 1.6954596180524827e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return [paren_string]": 1.1108036424431328e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    str_list = paren_string.split()\n\n    for i in str_list:\n        parens.append(i.strip('()'))\n\n    return parens": 3.470575815079705e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren = ''\n\n    for char in paren_string:\n        if char == '(':\n            if paren != '':\n                parens.append(paren)\n            paren = ''\n        elif char == ')':\n            if paren != '':\n                parens.append(paren)\n            paren = ''\n        elif char == ' ':\n            if paren": 3.722204279177447e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    results = []\n    open_count = 0\n    open_count_list = []\n    for i in paren_string:\n        if i == \"(\":\n            open_count += 1\n            open_count_list.append(open_count)\n        elif i == \")\":\n            open_count -= 1\n            if len(open_count_list) > 1:\n                end_idx = open_count_list[-": 2.987467001778842e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    res = []\n    parens = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    paren_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(' or paren_string[i] == '[' or paren_string[i] == '{':\n            paren": 2.284355113678476e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n    new_string = paren_string.replace('()', '()()')\n    print(new_string)\n    return separate_paren_groups(new_string)": 8.996029969465545e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here.\n    pass": 0.00013277405002526626, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE HERE\n    pass": 0.0004393129859943687, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = list(paren_string)\n    while len(paren_string) > 0:\n        if paren_string[0] == \"(\" and len(paren_stack) > 0 and paren_stack[-1] == \")\":\n            paren_string.pop(0)\n            paren_stack.pop()\n        elif paren_string[0] == \"": 9.382343361206819e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    #TODO\n    pass": 2.406245585009663e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    braces = [('(', ')'), ('[', ']'), ('{', '}')]\n    # Create an empty stack\n    stack = []\n    # Create an empty list to store the output\n    output = []\n\n    for paren in paren_string:\n        # If the paren is a left brace, append it to the stack\n        if paren in ['(', '[', '{']:\n            stack": 4.131193132403322e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '( ')\n    paren_string = paren_string.replace(')', ' )')\n    paren_list = paren_string.split(')')\n\n    for i in range(0, len(paren_list)):\n        if '(' not in paren_list": 4.720535462740798e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    answer = []\n    stack = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                answer.append(stack.pop())\n    return answer": 3.598534969507727e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement this function.": 0.00014465938181678115, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack: List[str] = []\n    string_list = []\n    # print(type(paren_string))\n    # print(paren_string)\n    # print(len(paren_string))\n    for char in paren_string:\n        # print(char)\n        if char == '(':\n            stack.append('(')\n        if char == ')':\n            # print(stack)": 2.599621381167506e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # your code here": 0.0032528291406281515, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    raise NotImplementedError()": 0.0004609810694820894, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: finish this function\n    pass": 1.431377675511624e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    paren_list = []\n    if len(paren_string) == 0:\n        return paren_group\n    for i in paren_string:\n        if i == '(':\n            paren_group.append('(')\n            paren_list.append('(')\n        elif i == ')':\n            if len(paren_group) == 0:\n                paren": 3.911579385626413e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # List of separator strings and index for popping them from\n    separator_strings = ['()', '(', ')']\n    index_list = [0, 1, 2]\n    # Stack of parentheses to process. The stack of parens is made up of the input parens\n    stack = []\n    for char in paren_string:\n        if char in separator_strings:\n            # If char is": 1.1970961567766118e-50, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    paren_group = ''\n    for char in paren_string:\n        if char in '()':\n            if len(paren_group) == 0:\n                paren_group += char\n            elif paren_group[len(paren_group) - 1] == '(' and char == ')':\n                paren_group = paren_group[:len(paren": 2.8641812814623607e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create a list of open brackets\n    open_brackets = []\n    # Create a list of open brackets\n    paren_stack = []\n    paren_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            open_brackets.append(char)\n        elif char == ')':\n            if len(open_brackets) > 0:\n                open_brackets.": 1.7610782479378082e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    p1 = []\n    p2 = []\n    for paren in paren_string:\n        if paren == '(':\n            p1.append(paren)\n        if paren == ')':\n            p2.append(paren)\n    return [''.join(p1),''.join(p2)]": 5.456457272692465e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    open_paren_count = 0\n    paren_stack = []\n\n    for paren_char in paren_string:\n        if paren_char == '(':\n            open_paren_count += 1\n            paren_stack.append(paren_char)\n        elif paren_char == '": 1.7031457889537686e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    result = \"\"\n    for x in paren_string:\n        if x == '(':\n            if result != \"\":\n                paren_list.append(result)\n                result = \"\"\n            paren_list.append(x)\n        elif x == ')':\n            if result != \"\":\n                paren_list.append(result)\n                result = \"\"\n            pare": 2.8709677509613934e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_groups = []\n    paren_stack = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            paren_stack.pop()\n        if not paren_stack:\n            if current_group:\n                paren_groups.append(current_group)\n            current": 1.3216633422222731e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    paren_group_list = []\n    paren_group = ''\n    paren_counter = 0\n    for char in paren_string:\n        if char == '(':\n            paren_counter += 1\n        elif char == ')':\n            paren_counter -= 1\n        if paren_counter == 0:\n            paren_group += char": 1.769399620218057e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack:\n                groups.append(stack.pop())\n    return groups": 6.25463821640854e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_stack = []\n    result = []\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_group_stack.append(paren)\n        elif paren == ')':\n            if paren_group_stack:\n                result.append(''.join(paren_group_stack))\n                paren_group_stack = []\n            else:": 1.2956596803664568e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if paren_string == '()':\n        return [paren_string]\n\n    elif paren_string.count('()') > 0:\n        split_list = []\n        while paren_string.count('()') > 0:\n            start = paren_string.find('(')\n            split_list.append(paren_string[:start])\n            paren_string = paren_string[start:]": 9.330351243920341e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    stack = []\n    paren_dict = {')': '(', ']': '[', '}': '{'}\n    for i in paren_string:\n        if i not in paren_dict and i != ' ':\n            output.append(i)\n        elif i in paren_dict:\n            if not stack or stack[-1] != paren_dict[i]:\n                stack": 1.702860157073607e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = [paren_string]\n    while '(' in parens[0]:\n        first_opening_index = parens[0].find('(')\n        second_opening_index = parens[0].find('(', first_opening_index + 1)\n        parens.insert(0, parens[0][:first_opening_index] + parens[0][second_opening_index": 1.1794594149266227e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    paren_stack = []\n    paren_string = paren_string.strip()\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        if paren_string[i] == ')':\n            if paren_stack:\n                first = paren_stack.pop()": 1.3361004600174054e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack: List[int] = [0]\n\n    for i in range(1, len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            print(i)\n            paren_stack.pop()\n\n\nseparate_paren_groups('( ) ((": 6.784503961481807e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: use lists to track open and closed braces, and then place the strings into a list\n    open_braces = []\n    closed_braces = []\n    output = []\n    for char in paren_string:\n        if char == \"(\":\n            open_braces.append(char)\n        elif char == \")\":\n            closed_braces.append(char)\n            if len(open_braces)": 1.9324603346410166e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # replace any spaces in the string with a single space\n    paren_string = paren_string.replace(\" \", \"\")\n\n    paren_list = list(paren_string)\n\n    # Loop through each index of the list\n    for i in range(len(paren_list)):\n        # Check if the current index is a closing parenthesis\n        if paren_list[i] == \")\":": 2.6147623744729654e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    new = []\n    for i in paren_string:\n        if i == \"(\":\n            new.append(i)\n        elif i == \")\":\n            if len(new) > 0:\n                if new[-1] == \"(\":\n                    new.pop()\n                else:\n                    new.append(i)\n            else:\n                new.append(i)\n        elif i != \"": 5.609512908516509e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack: List[str] = []\n    paren_groups: List[str] = []\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and paren_stack:\n            paren_stack.pop()\n            if not paren_stack:\n                paren_groups.append(''.": 9.339752318863773e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n    group_stack = []\n    substring_list = []\n    inner_paren = False\n\n    # Iterate over the string, character by character\n    for char in paren_string:\n\n        # If we hit the end of the string, create a new list and add it to the main list\n        if char == ')':\n            if len(substring_list) > 0:": 1.4362727353342726e-36, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = ''\n    left_par_count = 0\n    for char in paren_string:\n        if char == '(':\n            left_par_count += 1\n        elif char == ')' and left_par_count > 0:\n            left_par_count -= 1\n        elif char == ')':\n            result.append(current_string)\n            current_string = ''": 4.675066741716793e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    curr = ''\n    curr_open = 0\n    for p in paren_string:\n        if p == '(':\n            curr_open += 1\n        elif p == ')':\n            curr_open -= 1\n        if curr_open == 0:\n            groups.append(curr)\n            curr = ''\n        else:\n            curr += p\n    if cur": 1.7035383348901978e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string]": 0.0025109873231676134, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    def helper(paren_string):\n        if len(paren_string) == 0:\n            return [\"\"]\n        count_left = 0\n        count_right = 0\n        start_index = 0\n        for index in range(len(paren_string)):\n            if paren_string[index] == '(':\n                count_left += 1\n            if paren_": 1.0987991460155136e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    p_count = 0\n    p_end = 0\n    seq_list = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            p_count += 1\n        elif char == ')':\n            p_count -= 1\n        if p_count == 0:\n            seq_list.append(paren_string[p_end:i + 1])": 1.1585961462181521e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Use a stack to keep track of unbalanced brackets.\n    # Every time we see an open parenthesis, we push it onto the stack.\n    # Whenever we see a closing parenthesis, we pop the last item off the stack and compare it to the opening\n    # parenthesis we'd pushed. If they match, we don't need to do anything because it's okay to have an extra pair\n    # of parentheses.": 2.443578421483235e-40, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_group = ''\n\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_group += paren\n        elif paren == ')':\n            if paren_group:\n                paren_group += paren\n                paren_groups.append(paren_group)\n                paren_group = ''": 1.7246149517439941e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    group = []\n    for c in paren_string:\n        if c == '(':\n            stack.append('(')\n        elif c == ')' and stack and stack[-1] == '(':\n            group.append(c)\n            stack.pop()\n        else:\n            group.append(c)\n    return stack, group": 6.353995097282641e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    start_index = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_list.append(paren": 1.0600576257033815e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    sub_paren_groups = []\n    is_opening = True\n    for char in paren_string:\n        if char == '(':\n            is_opening = True\n        elif char == ')':\n            is_opening = False\n        elif is_opening:\n            sub_paren_groups.append(char)\n        else:\n            if not sub_paren": 3.997819689422301e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return list(paren_string)": 0.00046362546525661346, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n    paren_stack = []\n    paren_length = 0\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_length += 1\n            paren_stack.append(paren_length)\n        elif paren == ')':\n            paren_length -= 1\n            if paren_length == 0:\n                paren_": 1.830341055890918e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # WRITE YOUR SOLUTION HERE\n    return [\"\" for i in range(len(paren_string))]": 2.5671827421434787e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.startswith('(') and paren_string.endswith(')'):\n        return [paren_string[1:-1]]\n    else:\n        return [paren_string]": 1.8016563700941973e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def check_if_balanced(seq: str):\n        \"\"\" This function checks if a string is balanced. It returns 'balanced' if the string is balanced, 'not\n        balanced' if it isn't.\n        \"\"\"\n\n        opened_braces = 0\n        for character in seq:\n            if character == '(':\n                opened_braces += 1\n            elif character == ')':\n                opened_braces": 3.6922428332051026e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    open_paren_index = 0\n    result = []\n    while open_paren_index < len(paren_string):\n        paren_char = paren_string[open_paren_index]\n        if paren_char == '(':\n            paren_stack.append(open_paren_index)\n        else:\n            if not paren_stack:": 2.9431050864717727e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Use a stack to keep track of which bracket we are at\n    current_bracket_index = 0\n    brackets = [\n        ['(', 1],\n        [')', -1]\n    ]\n    paren_group = []\n    open_groups = 0\n    group_stack = []\n    for i in range(len(paren_string)):\n        current_bracket = paren_string[i": 5.342948654734263e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create an empty list to store the separated groups\n    separated_groups = []\n\n    # use a variable to track where we are in the input string\n    i = 0\n\n    # use a variable to track where we are in the list of separated groups\n    j = 0\n\n    # use a variable to keep track of where we are in the list of separated groups\n    k = 0\n\n    # use a variable to keep track of where we": 1.2413506230090113e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You can use list comprehension to do this\n    pass": 1.548171464327239e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_str = ''\n    for char in paren_string:\n        if char == '(':\n            paren_str += '('\n            continue\n        if char == ')':\n            paren_str += ')'\n            paren_list.append(paren_str)\n            paren_str = ''\n            continue\n        paren_str += char\n    if paren": 6.131847440884795e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    temp_paren_string = paren_string\n    while temp_paren_string.count('(') > 0:\n        paren_list.append(temp_paren_string.find('('))\n        temp_paren_string = temp_paren_string.replace('(', '', 1)\n    paren_list.append(temp_paren_string.find('('": 1.335849497007717e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    parens = []\n    for char in paren_string:\n        if char == '(':\n            parens.append(char)\n        elif char == ')' and len(parens) > 0:\n            output.append(\"\".join(parens))\n            parens = []\n        elif char == ')':\n            output.append(\"\".join(parens))\n            parens = []\n    return": 1.89341117889912e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return []": 0.01771226621391839, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Initialize a list to store the resulting strings\n    result = []\n\n    # Initialize a variable to track whether the parentheses are balanced\n    is_balanced = True\n\n    # Initialize a variable to track the position of the current open brace\n    open_brace_pos = 0\n\n    # Loop through the characters in the input string\n    for i, char in enumerate(paren_string):\n        # If the": 5.710918490612114e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    curr_group = []\n    for c in paren_string:\n        if c == \"(\":\n            paren_stack.append(c)\n        elif c == \")\":\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                curr_group.append(c)\n        else:\n            continue\n        if paren_stack and not cur": 1.7601388963669898e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    paren_string_list = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                paren_string_list.append(\"\")\n        elif len(stack) == 0 and char == ' ':\n            paren_": 2.772946421078752e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    parentheses = []\n    opening_count = 0\n    for char in paren_string:\n        if char == \"(\":\n            opening_count += 1\n        elif char == \")\":\n            opening_count -= 1\n        if opening_count == 0:\n            parentheses.append(char)\n            if parentheses:\n                result.append(\"\".join(parentheses))\n                parent": 8.25843958066836e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_strings = []\n    paren_stack = []\n    group = \"\"\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            paren_stack.append(i)\n        elif char == \")\":\n            paren_stack.pop()\n            if len(paren_stack) == 0:\n                paren_strings.append(paren_string[paren_": 1.4308755318585698e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_string = paren_string.strip()\n    paren_groups_string = ''\n    paren_count = 0\n    paren_list = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_count += 1\n            paren_groups_string += '('\n        elif pare": 1.949367837201521e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    temp = \"\"\n    for i in paren_string:\n        if i == \"(\" or i == \")\":\n            temp += i\n        elif i == \" \" and temp != \"\":\n            parentheses.append(temp)\n            temp = \"\"\n        elif i == \"(\" and temp == \"(\":\n            parentheses.append(temp)\n            temp = \"\"\n            parentheses.": 1.6574812114132334e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.count('(') != paren_string.count(')'):\n        raise ValueError\n\n    paren_stack = []\n    curr_paren = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')": 1.3553428999485922e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = \"\"\n    paren_groups = []\n\n    for char in paren_string:\n        if char == \"(\":\n            paren_group += char\n        elif char == \")\":\n            paren_groups.append(paren_group)\n            paren_group = \"\"\n        elif char == \" \":\n            if paren_group:\n                paren_groups.append(paren_group": 9.142864908939196e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parens = []\n\n    open_paren_count = 0\n\n    paren_group = ''\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_count += 1\n        if char == ')':\n            open_paren_count -= 1\n        if char == '(' and open_paren_count == 0:\n            parens": 9.867426224395812e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_list = []\n    i = 0\n    while i < len(paren_string):\n        # find first open parenthesis\n        if paren_string[i] == \"(\":\n            # find index of last closed parenthesis\n            k = paren_string.rfind(\")\")\n            # add a slice to the string and return it\n            new_list.append(paren_string[i:k+1])": 1.161913633413154e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Use a list of tuples to hold a list of opening braces\n    opening_braces = [(i, paren_string[i]) for i in range(len(paren_string)) if paren_string[i] == '(']\n    # Use a list of tuples to hold a list of closing braces\n    closing_braces = [(i, paren_string[i]) for i in range(": 4.433462745434905e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # A dictionary to keep track of all the indices of each group that we've seen\n    group_dict = {}\n    # A list to hold all the groups we've seen\n    groups = []\n    # A list to hold the current group\n    current_group = []\n    for i in range(len(paren_string)):\n        # If the current character is an open parenthesis, we want to add its index to the dictionary": 3.473961084807958e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_list = []\n    separator_list = []\n    for i, paren_char in enumerate(paren_string):\n        if paren_char == \"(\":\n            if open_paren_list[-1] == \"(\":\n                continue\n            else:\n                open_paren_list.append(paren_char)\n        elif paren_char == \")\":\n            open_p": 1.837689278299554e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here": 0.0030541567933988004, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n    # keep track of the current index\n    i = 0\n    paren_list = []\n    # loop through the paren string\n    while i < len(paren_string):\n        # initialize the current paren to be an empty string\n        curr_paren = ''\n        # check if it is a '(' or ')'\n        if": 1.8285315171642393e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ...": 0.005094148525449788, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    # Hint 1: how do you add each result to the list?\n    # Hint 2: you should have a few if statements\n    # Hint 3: you should have a few for loops\n    # Hint 4: you may have to start by breaking the string into groups of parens\n\n    return result": 2.5968026422239766e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    my_list = []\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            my_list.append('')\n            index += 1\n        if paren_string[index] == ')':\n            my_list.pop()\n            index += 1\n        if paren": 4.5193647592840146e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n\n    paren_string_list = paren_string.split(' ')\n    paren_string_list_rev = []\n    for item in paren_string_list:\n        paren_string_list_rev.append(item[::-1])\n\n    groups = []\n    paren_stack = []\n    for item in": 1.7339830604696883e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    sublist = []\n\n    for paren in paren_string:\n        if paren == \"(\":\n            sublist.append(paren)\n        elif paren == \")\" and len(sublist) > 0:\n            sublist.pop()\n        elif len(sublist) > 0:\n            sublist.append(paren)\n        elif len(sublist) == 0 and paren": 5.366890681602043e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group = []\n    final_list = []\n    for index, letter in enumerate(paren_string):\n        if letter == \"(\":\n            group.append(letter)\n        elif letter == \")\":\n            if len(group) > 0:\n                final_list.append(group.pop())\n        elif letter == \" \":\n            pass\n        else:\n            final_list.append(letter)\n\n    if": 1.626968655336092e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(\" \", \"\")\n    is_open_parenthesis = False\n    paren_substr = \"\"\n    for char in paren_string:\n        if is_open_parenthesis and char == \")\":\n            paren_list.append(paren_substr)\n            is_open_parenthesis = False\n            paren_substr =": 8.898941260232309e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Python implementation of counting the number of parentheses in a given string\n    open_count = paren_string.count('(')\n    close_count = paren_string.count(')')\n    assert open_count == close_count\n    paren_stack = []\n    current_group = ''\n\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren": 7.854596194460578e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement this function\n\n    return []": 1.0609117058696306e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return": 0.05794801417612394, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    if paren_string == '()':\n        return paren_string\n\n    else:\n        for char in paren_string:\n            if char == '(':\n                paren_list.append(char)\n\n            elif char == ')':\n                if len(paren_list) > 0:\n                    paren_list.pop()\n\n        if len(paren_": 2.0961261597233487e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Add code to return a list of strings separated by their parentheses\n    ### START CODE ###\n    parentheses_list = []\n    paren_stack = []\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n        if c == ')' and paren_stack:\n            paren_stack.pop()\n            if not pare": 1.6580966306785044e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    prev = -1\n    curr = 0\n    while curr < len(paren_string):\n        if paren_string[curr] == \"(\":\n            if paren_string[prev] == \"(\":\n                result.append(paren_string[prev:curr+1])\n            prev = curr\n        elif paren_string[curr] == \")\":\n            if pare": 1.975814500198199e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    string = ''\n\n    for i in paren_string:\n        if i == '(':\n            string += i\n        elif i == ')':\n            result.append(string)\n            string = ''\n        elif i == ' ':\n            continue\n        else:\n            string += i\n\n    return result": 2.983124553979737e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Build list of parentheses in strings\n    parentheses = [paren_string[0]]\n    for i in range(1, len(paren_string)):\n        if paren_string[i] == '(':\n            parentheses.append(paren_string[i])\n        elif paren_string[i] == ')':\n            parentheses.append(paren_string[i])": 1.9159005781057968e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert isinstance(paren_string, str)\n    # Result list\n    result = []\n    # Open paren index\n    open_paren_index = 0\n    # Iterate over the paren string\n    for i, paren in enumerate(paren_string):\n        if paren == \"(\":\n            open_paren_index = i\n        elif paren == \")\":\n            result.append(paren": 2.2699064972401946e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    curr_group = []\n    for p in paren_string:\n        if p == '(':\n            curr_group.append(p)\n        elif p == ')':\n            if len(curr_group) == 0:\n                paren_groups.append(''.join(curr_group))\n                curr_group = []\n            else:\n                curr_group": 4.892632925917764e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    current_group = ''\n\n    for paren in paren_string:\n        if paren == '(':\n            current_group += paren\n\n        elif paren == ')':\n            if current_group:\n                paren_group.append(current_group)\n                current_group = ''\n            else:\n                continue\n\n        elif paren == ' ':\n            if current": 2.026272385575222e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: write code to separate the groups.\n    # Use a stack data structure.\n    # When you find a group, pop until you find an opening brace.\n    # Then you can push the contents of that group into a stack.\n    # When you find a closing brace, pop until you find an opening brace.\n    # When you pop all the way to the empty string, you have a valid group.\n    # Return that list.": 1.1506519888538933e-46, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) < 2:\n        return [paren_string]\n\n    paren_groups: List[str] = [paren_string]\n    open_bracket_counter: int = 0\n\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            open_bracket_counter += 1\n        elif char == ')':\n            if open_br": 3.189534288080876e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    parenthesis = ''\n    for i in paren_string:\n        if i == '(':\n            if parenthesis == '':\n                paren_list.append('(')\n            parenthesis += i\n        elif i == ')':\n            if parenthesis == '':\n                paren_list.append(')')\n            else:\n                paren_list.append(parenthesis + '": 1.223599921387172e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    braces = []\n    for c in paren_string:\n        if c == '(':\n            braces.append('(')\n        elif c == ')':\n            braces.append(')')\n    result = []\n    current_result = ''\n    for b in braces:\n        if b == ')':\n            result.append(current_result)\n            current_result = ''\n        else:": 3.6294763481848203e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    paren_stack = []\n    paren_groups = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_stack.pop()\n            if paren_stack:\n                if not paren_stack[-1].isspace():\n                    if not paren_groups:": 7.409539246336153e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    paren_stack.append('')\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('')\n        elif char == ')':\n            paren_groups.append(paren_stack.pop())\n\n    return paren_groups": 6.098452282393062e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here.\n    pass\n\n\nseparate_paren_groups('()()()')": 1.2586932821084027e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def _separate_paren_groups(str_start_index: int, str_end_index: int) -> List[str]:\n        list_res = []\n        if str_start_index == str_end_index:\n            return ['()']\n        str_start_index += 1\n        str_end_index -= 1\n        if paren_string[str_start_index] == '(':": 1.5927518124619794e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Finish this function\n\n    # For example, if the input is '( ) (  )', then we should return ['()', '()']\n    pass": 8.122085179486097e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            if paren_string[i-1] == \"(\":\n                end_index = i-1\n            else:\n                end_index = i\n            paren_groups.append(paren_": 1.035499913980342e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement your function here\n    result = []\n    # 1. split the string\n    string_list = paren_string.split(' ')\n\n    # 2. loop through the string list to find nested parentheses\n    for parens in string_list:\n        # 3. append the strings that don't have nested parentheses\n        if '(' not in parens:\n            result.append(": 1.318348864589169e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write code to separate groups in paren_string\n    paren_list = []\n    open_count = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_count += 1\n        elif paren_string[i] == ')':\n            open_count -= 1\n        if open_count == 0:": 1.7690675390732812e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    group_stack = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                group_stack.append(current_group)\n                current_group = ''": 4.861750281692124e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    open_paren = 0\n    closed_paren = 0\n\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            open_paren += 1\n            paren_stack.append(idx)\n        elif char == ')':\n            closed_paren += 1\n            paren_stack.pop()": 1.9832219722116247e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n        elif char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                paren_groups.append(')')\n        elif char == ' ':\n            if len": 1.5095938981874913e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the string by each whitespace\n    paren_groups = paren_string.split()\n    # create a list for the results\n    results = []\n\n    # Loop over each group, checking for balance\n    for group in paren_groups:\n        # create a list for the results\n        group_results = []\n        # create a tracker\n        bal_tracker = 0\n        # Loop over each item in": 1.852062442004709e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    open_braces_list = []\n    parenthesis_list = []\n\n    for char in paren_string:\n        if char == '(':\n            open_braces_list.append(char)\n        elif char == ')':\n            if len(open_braces_list) != 0:\n                open_braces_list.pop()\n                if len(open_braces_list) == 0:": 4.437802930836053e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string_list = []\n    paren_string_list = [paren_string[0:i] for i in range(len(paren_string) + 1)]\n    paren_string_list.remove('')\n    open_par_list = []\n    for i in range(len(paren_string_list)):": 1.0455909604898697e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) <= 1:\n        return [paren_string]\n\n    paren_chars = list(paren_string)\n    paren_str = \"\"\n    paren_index = 0\n    while paren_index < len(paren_chars):\n        if paren_chars[paren_index] == \"(\":\n            paren_index += 1\n            while paren": 8.510751989989862e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Fill this out\n    pass": 3.4492368301127934e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces in the string\n    if paren_string.count(\"(\") != paren_string.count(\")\"):\n        return None\n\n    paren_stack = []\n    output = []\n\n    for c in paren_string:\n        if c == \"(\":\n            paren_stack.append(c)\n        elif c == \")": 4.213701336993193e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string = paren_string.replace(\" \", \"\")\n    num_open = paren_string.count(\"(\")\n    num_close = paren_string.count(\")\")\n\n    while num_open > 0 and num_close > 0:\n        num_open -= 1\n        num_close -= 1\n\n    if num_open > 0 or num_close > 0:\n        raise ValueError": 6.408516600170576e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def check_parenthese(paren_string, i):\n        count = 0\n        for j in range(len(paren_string)):\n            if paren_string[j] == '(':\n                count += 1\n            elif paren_string[j] == ')':\n                count -= 1\n                if count < 0:\n                    return False\n        if count == 0:\n            return True\n        else:": 2.1703731434337407e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    paren_list = [paren_string[i:i + 2] for i in range(0, len(paren_string), 2)]\n    paren_list = [i for i in paren_list if i != '']\n    return paren_list": 9.032107934542393e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n    stack = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        if paren == ')':\n            stack.pop()\n    return [paren_string[0:i+1] for i, paren in enumerate(paren_string) if paren == '(']": 3.9229122895694214e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_str = ''\n    separators = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for c in paren_string:\n        if c in separators.keys():\n            if current_str:\n                paren_stack.append(current_str)\n                current_str = ''\n            paren_stack.": 1.960878770772294e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        if char == ')':\n            if len(stack) != 0:\n                result.append(temp)\n                temp = \"\"\n                stack.pop()\n            else:\n                result.append(\"()\")\n        if char == ' ':\n            if": 9.19730359996498e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    temp_paren_string = ''\n    open_paren_counter = 0\n    close_paren_counter = 0\n\n    for char in paren_string:\n        # if there is an open parenthesis, and its not a closing parenthesis, add it to the string to be evaluated\n        if char == '(' and open_paren_counter == 0:\n            open_paren_counter": 4.8958535375868784e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = [1 if char == '(' else -1 for char in paren_string]\n    paren_stack = []\n    paren_string_list = []\n    for i in range(len(parens)):\n        if parens[i] == 1:\n            paren_stack.append(i)\n        elif parens[i] == -1:\n            if paren_stack:\n                paren_": 1.3166979955759823e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    return []": 0.003198313908446871, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            paren_stack.pop()\n            if len(paren_stack) == 0:\n                paren_groups.append": 8.215962977355066e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # write your code here": 0.0007915574670067931, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_list.append(''.join(paren_stack))\n            paren_stack.pop()\n    return paren_list": 5.914068888309818e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces = 0\n    result = []\n    for i in paren_string:\n        if i == \"(\":\n            open_braces += 1\n        elif i == \")\":\n            open_braces -= 1\n        if i == \"(\" and open_braces > 0:\n            continue\n        elif i == \")\" and open_braces > 0:\n            result.append(\"\")\n        else:": 7.846745600695627e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # list of strings to be returned\n    output = []\n    # nested index of opening and closing parenthesis\n    open_paren_index, close_paren_index = 0, 0\n\n    # keep looping while there are still open parenthesis to process\n    while open_paren_index < len(paren_string):\n\n        # if open parenthesis is found, store its index and increment the open_paren_": 4.3233739704910297e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    my_list = []\n    paren_string = ''.join(paren_string.split())\n    for i in paren_string:\n        if i == '(':\n            my_list.append(i)\n            res.append(''.join(my_list))\n            my_list.clear()\n        if i == ')':\n            my_list.append(i)\n            res.": 4.631488520750628e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current = ''\n    parens = ''\n    for c in paren_string:\n        if c == '(':\n            current += c\n            parens += c\n        elif c == ')':\n            current += c\n            parens += c\n            if len(parens) > 1:\n                result.append(parens)\n                parens = ''\n    return result": 7.271131596885076e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Use a stack to keep track of what we need to go back to once we find a pair.\n    stack = []\n    # The current group of parentheses we are working with.\n    current_group = ''\n    # The index of the current parentheses we are working on.\n    cur_index = 0\n    # Keep track of the number of open parentheses we have encountered.\n    num_open = 0\n    # Lo": 8.211725547984209e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    #return list of parentheses\n\n    #traversing through string and appending group to list\n    #parentheses = ''\n    #open_par = []\n    #for c in paren_string:\n    #    if c == '(':\n    #        open_par.append(c)\n    #    if c == ')':\n    #        if len(open_par) ==": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create an empty list called paren_group\n    paren_group = []\n    # Create a list called paren_stack\n    paren_stack = []\n    # Create a boolean called in_group\n    in_group = False\n    # Create a list called paren_group\n    paren_stack = []\n    # Loop through each character in the input string\n    for char in paren_string:\n        # If": 3.7878616072147647e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = ''\n    paren_chunks = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if paren_group != '':\n                paren_group += paren_string[i]\n            else:\n                paren_stack.append('')\n        elif paren_string": 3.57731768942527e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You can use str.split to separate the string into tokens. Then you can use\n    # the built in set function to eliminate any duplicates.\n\n    # TODO: Write your code here\n    return []": 7.551048885601229e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # your code here\n\n    return": 7.709624909608906e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    opened = []\n    for i in paren_string:\n        if i == '(':\n            opened.append(i)\n        elif i == ')':\n            if opened:\n                res.append(opened.pop())\n    return res": 6.102809585276188e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    curr_sep = []\n    paren_stack = []\n    for ch in paren_string:\n        if ch == '(':\n            stack.append('(')\n            paren_stack.append(ch)\n        elif ch == ')':\n            if len(stack) == 0:\n                curr_sep.append(')')\n            else:\n                stack.pop()\n                paren": 1.5868420012939067e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def build_list(string, list):\n        if len(string) == 0:\n            return list\n\n        if string[0] == '(':\n            if len(list) == 0:\n                return build_list(string[1:], [])\n\n            if list[-1] == ')':\n                return build_list(string[1:], list)\n\n            return build_list(string[1:],": 8.625631299175947e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # for each group of nested parentheses, keep a stack of the starting point of that group\n    # if the stack is empty, we have a new group.\n    # for every open bracket, we push the position of the new start of the group to the stack.\n    # for every closing bracket, we pop the top of the stack (the start of the previous group) and\n    #   then check if the new current position is the last character": 1.0863187082504495e-56, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    open_count = 0\n    for i in paren_string:\n        if i == '(':\n            open_count += 1\n        elif i == ')':\n            open_count -= 1\n        elif i == '(' and open_count == 1:\n            return_list.append(i + '')\n        elif i == ')' and open_count == 0:\n            return_list.": 2.1191902436650355e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_groups = []\n    opened_braces = 0\n    index = 0\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            opened_braces += 1\n        if char == ')':\n            opened_braces -= 1\n            if opened_braces == 0:\n                list_of_groups.append(paren_string[index-1:index+": 1.8778384756738853e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n    paren_stack = []\n    open_paren = '('\n    close_paren = ')'\n    paren_stack.append(open_paren)\n    paren_stack.append(close_paren)\n    for char in paren_string:\n        if char in paren_stack:\n            if char == close_paren:\n                paren_stack.pop()": 1.0419016285962957e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code goes here\n    pass": 0.0003026897705788052, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: create function that separates groups of parentheses from nested parentheses.\n    # TODO: put function inside a try/except block to handle errors\n    # TODO: make sure the function works by passing a string into it, and returning a list of strings\n\n    return [\n        paren_string\n    ]": 1.0908552990727843e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # get all the groups\n    groups = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            groups.append([])\n        elif c == ')':\n            if groups:\n                groups[-1].append(')')\n\n    # build list of groups\n    group_list = []\n    for group in groups:\n        # recursively build the group\n        group_list": 2.390563563778311e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # put your solution here\n    pass": 4.444258756345822e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = paren_string.split()\n\n    return paren_list": 3.392064956730413e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    raise NotImplementedError(\"Implement this function\")": 2.667662969196418e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    opened = []\n    start_index = 0\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            opened.append(i)\n        elif paren_string[i] == ')' and opened:\n            start_index = opened.pop()\n            paren_list.append(paren_string[start_index": 1.946809526312478e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    new_paren_string = ''\n    for character in paren_string:\n        if character in ['(', ')']:\n            if character == '(':\n                new_paren_string += ' ' + character\n            elif character == ')' and new_paren_string[-1] == ' ':\n                new_paren_string = new_paren_string[:-1]": 2.9753012991174397e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            paren_groups.append(current_group)\n            current_group = \"\"\n        elif char == ')' and len(current_group) > 0:\n            paren_groups.append(current_group)\n            current_group = \"\"\n        else:\n            current_group += char": 2.662549366252493e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    group_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            group_stack.append(char)\n        elif char == ')':\n            if paren_stack and paren_stack[-1] == '(':\n                paren_stack.pop()\n                group_stack.pop()\n                if": 1.8229429649731385e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    current_string = ''\n\n    for i, char in enumerate(paren_string):\n\n        if char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                result.append(current_string)\n                current_string =": 6.421711497512109e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group = []\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            paren_list.append(group)\n            group = []\n    return paren_list": 4.378103522469083e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    index = 0\n    while index < len(paren_string):\n        paren = paren_string[index]\n        if paren == \"(\":\n            paren_stack.append(paren)\n        elif paren == \")\":\n            if len(paren_stack) == 0:\n                return [paren_string[0:index+1]]": 4.490375647275245e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def helper(i, j, acc):\n        open_paren = paren_string[i]\n        if open_paren == \"(\":\n            # if left side of paren has an open paren, then need to keep going\n            if paren_string[j-1] == \"(\":\n                return helper(i+1, j-1, acc)\n            # if left side has closed paren, then need to": 3.868430327060645e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO\n    return []": 5.013046732547476e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        ''.join(map(str.strip, paren_string.split('(')))\n        .split(')')\n        .removeprefix('(')\n        .removeprefix(')')\n        .split('(')\n        .removeprefix(')')\n        .split(')')\n    ]": 1.1497362034481234e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    lst = []\n    s = \"\"\n    for i in paren_string:\n        if i == \"(\":\n            lst.append(s)\n            s = \"\"\n        elif i == \")\":\n            lst.append(s)\n            s = \"\"\n        else:\n            s += i\n    return lst": 9.470615617416303e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    result = []\n    group = \"\"\n\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(paren)\n        elif paren == \")\":\n            if len(paren_stack) == 0:\n                result.append(group)\n                group = \"\"\n            else:\n                paren_stack.pop()": 4.618241483779793e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_list = []\n    current_paren_string = ''\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append((i, char))\n        elif char == ')':\n            if len(paren_stack) > 0:\n                index_to_remove, _ = paren_stack.pop()": 8.408692407328498e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        if paren == ')':\n            paren_stack.pop()\n            if not paren_stack:\n                parens.append(''.join(paren_stack))\n                paren_stack = []\n    return parens": 6.754535119667436e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # This is a solution for the first test case.\n    #\n    # TODO: Complete this function.\n    return []": 2.8962663351049935e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    count = 0\n    for i in paren_string:\n        if i == '(':\n            count += 1\n            parens.append('')\n        elif i == ')':\n            count -= 1\n            parens[-1] += ')'\n        if count == 0:\n            parens.append('')\n    return parens": 2.4309769113268165e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n                current_group.append(char)\n    return current_group": 1.1808834372394226e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    res = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(i)\n        elif paren == ')':\n            res.append(paren_string[paren_stack.pop()+1:i])\n    return res": 3.90944544262571e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\"(\", \"\")\n    paren_string = paren_string.replace(\")\", \"\")\n    paren_string = paren_string.replace(\" \", \"\")\n    split_string = paren_string.split(\")(\")\n    return split_string": 1.734469658504168e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_indices = []\n    paren_group = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_indices.append(i)\n        elif char == ')':\n            # The group can only end once we've closed ALL open brackets that were in the original string\n            if len(open_paren_indices) ==": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    return_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            count = 1\n            for j in range(i+1, len(paren_string)):\n                if paren_string[j] == \")\":\n                    count -= 1\n                if paren_string[j] == \"(\":": 9.539363366519856e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n        elif c == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                result.append('()')\n    while paren_stack:\n        result.append('(' + paren_stack.pop": 5.001756723578821e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # the purpose of this function is to keep track of the number of open braces and keep a count of them.\n    # When the count reaches 0, it means that all open braces have been closed.\n    # This is the first step in checking whether the string is properly nested.\n    open_braces = 0\n    # This is a flag to keep track of whether there are any open parentheses in the string.\n    # This flag": 5.684526361384062e-49, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    separators = [',']\n    groups = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            groups.append(''.join(current_group))\n            current_group = []\n    if current_group:\n        groups.append(''.join(current_group))\n\n    return groups": 3.629862711035681e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_str = paren_string.replace(' ', '')\n    paren_list = []\n\n    for i in range(len(paren_str)):\n        if paren_str[i] == '(' and paren_str[i + 1] == ')':\n            paren_list.append('()')\n            paren_str = paren_str[:i] + paren_str[i+": 9.397706438260271e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    string_buffer = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            string_buffer += char\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n                string_buffer += char\n            else:\n                raise ValueError('No open parentheses to close')": 2.1126431133404346e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    # I'm using a boolean variable to determine if the next character is a closing paren or not\n    closed = False\n    current_paren_group = []\n    last_paren_group = None\n    for char in paren_string:\n        if char == '(':\n            # If the last paren group is None, then that means we are entering a new group\n            if last_paren_": 4.966259643968354e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 1:\n        return paren_string\n\n    if paren_string[0] == ')':\n        return [paren_string]\n\n    paren_string = paren_string[1:]\n    last_pos = -1\n    new_paren_string = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string": 4.9366891435605096e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Write your separate_paren_groups function here.\n    # You may find the following function useful:\n    #  - iter(string).__next__()\n    #  - next(iterator)\n    #  - iterator.__next__()\n\n    # This function will call the split function on each item in the passed string and\n    # print them out.\n\n    # The split function will return a list of strings": 3.3078875121661456e-48, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Get a list of all parens, separated into their own strings\n    all_parens = []\n    paren_list = paren_string.split('(')\n    for paren in paren_list:\n        if paren != '':\n            all_parens.append(paren)\n\n    # Remove extra parens\n    all_parens = all_parens[:len(all_parens)-1": 8.42553641772889e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    output = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                stack.append(i)\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                output.append(''.join(stack))\n                stack = []": 4.187930221589615e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(' ', '')\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(i)\n        if paren == ')':\n            paren_stack.pop()\n    end = len(paren_string)\n    paren_stack.append(end)": 3.7785204496336447e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    string_so_far = \"\"\n    for i in paren_string:\n        if i == '(':\n            string_so_far += i\n        elif i == ')':\n            result.append(string_so_far)\n            string_so_far = \"\"\n        else:\n            string_so_far += i\n    return result": 7.288113958885363e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Return list of the strings that make up the parentheses\n    # The returned list is in the same order as the input list.\n    # The returned list should be empty if the input is empty.\n    # The returned list should have one element if the input is one-element.\n    # The returned list should have two elements if the input is two-element.\n    # Each element of the returned list should have the same number of nested parentheses": 7.898485659692105e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = []\n    group_counter = 0\n    for i in paren_string:\n        if i == '(':\n            current_group.append(i)\n        elif i == ')':\n            groups.append(current_group)\n            group_counter += 1\n            if group_counter > 1:\n                break\n            current_group = []\n    return groups": 5.0729266958022455e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren = \"(\"\n    close_paren = \")\"\n    stack = []\n    sep_list = []\n\n    for paren in paren_string:\n        if paren == open_paren:\n            stack.append(paren)\n        elif paren == close_paren:\n            stack.pop()\n        if not stack:\n            sep_list.append(paren)\n\n    return sep": 4.1795120651636005e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_brackets = []\n    groups = []\n    group = []\n\n    for char in paren_string:\n        if char == '(':\n            open_brackets.append(char)\n        elif char == ')':\n            open_brackets.pop()\n        elif char == ' ':\n            if len(open_brackets) == 0:\n                groups.append(\"\".join(group))\n                group = []": 2.5422457273507817e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    return [\"\".join(x) for x in map(list, zip(paren_string, paren_string[1:], paren_string[2:]))]": 1.844215584046074e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # TODO": 0.001877036131451469, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the input string into a list of groups\n    group_list = paren_string.split(')(')\n\n    # iterate through the list of groups and append each group to a list\n    group_list = [group.replace(' ', '') for group in group_list]\n\n    return group_list": 2.2843328910965598e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    parenthesis = ''\n    open_paren = ''\n    for char in paren_string:\n        if char == '(':\n            open_paren += char\n        elif char == ')':\n            if len(open_paren) == 0:\n                parenthesis += ')'\n            else:\n                open_paren = open_paren[:-1]\n        elif char": 2.0917866405860142e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    sep_groups = []\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n        if char == ')':\n            open_paren_count -= 1\n        if open_paren_count == 0:\n            sep_groups.append(paren_string[1:paren_string.index(char)])": 1.1767090330200152e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # write your code here\n    bracket_pairs = []\n    word = []\n    result = []\n    for ch in paren_string:\n        if ch == '(':\n            bracket_pairs.append(word)\n            word = []\n        elif ch == ')':\n            bracket_pairs.append(''.join(word))\n            word = []\n        elif ch != ' ':\n            word.": 3.375079358142932e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    temp_list = []\n    flag = False\n    for i in paren_string:\n        if i == '(':\n            flag = True\n            temp_list.append(i)\n        elif i == ')':\n            flag = False\n            temp_list.append(i)\n        if flag:\n            if i == ' ':\n                if len(temp_list) > 0:": 1.6088183866989229e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    paren_string = paren_string.replace(' ', '')\n    # paren_string = paren_string.replace(' ', '')\n    opened_paren_list = []\n    for paren_char in paren_string:\n        if paren_char == '(':\n            opened_paren_list.append(paren_char)\n        elif paren_char == '": 8.986102012546891e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO implement this function\n    pass": 2.518302534560854e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    paren_list = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_list.append(i)\n        if i == \")\":\n            paren_list.pop()\n        if len(paren_list) == 0:\n            res.append(paren_string[0:i+1])\n            paren_string = paren_string[i": 1.9385810661492133e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    open_braces = 0\n    for char in paren_string:\n        if char == \"(\":\n            open_braces += 1\n        if char == \")\":\n            open_braces -= 1\n        if open_braces == 0:\n            yield paren_string[:open_braces + len(char)] + paren_string[open_braces + len(char) + 1:]": 1.5679588370516246e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    final_list = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        elif paren == ')':\n            final_list.append(stack)\n            stack.pop()\n    return final_list": 1.0685782357031983e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [''] * 10": 3.5224950800326863e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    i = 0\n    out = []\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            parens_stack.append(i)\n        elif paren_string[i] == ')':\n            out.append(paren_string[parens_stack[-1]:i + 1])\n            parens_stack.pop()": 7.616739707941051e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_stack.append('')\n    while len(paren_stack) > 0:\n        if paren_string[0] == '(':\n            paren_stack.append('')\n            continue\n        elif paren_string[0] == ')':\n            if paren_stack[-1] == '':\n                paren_stack.pop()\n                continue\n            else:": 1.1624504535634313e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Implement this function\n    return []": 1.266801990065525e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    return ['()' for _ in range(len(paren_string))]": 3.4493049492030264e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    curr_string = \"\"\n    i = 0\n\n    while i < len(paren_string):\n        curr_char = paren_string[i]\n        if curr_char == \"(\":\n            paren_groups.append(curr_string)\n            curr_string = \"\"\n        elif curr_char == \")\":\n            paren_groups.append(cur": 4.63222823194071e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count, close_count = 0, 0\n    start = 0\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n            if close_count > open_count:\n                result.append(paren_string[start:i + 1])\n                start =": 2.1022395410761904e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def get_matching_braces(paren_string: str, open_count: int):\n        if open_count < 0:\n            return paren_string\n        opening_braces = 0\n        closing_braces = 0\n        for bracket in paren_string:\n            if bracket == \"(\":\n                opening_braces += 1\n            elif bracket == \")\":\n                closing_braces += 1": 9.876757810098016e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here.": 0.0006629902083885706, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return []\n    paren_string = paren_string.replace(' ', '')\n    start_idx = paren_string.find('(')\n    end_idx = paren_string.find(')')\n    if start_idx == 0:\n        return [paren_string]\n    if start_idx == -1:\n        return [paren_string[": 9.243046899996726e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_stack = []\n    open_paren = ['(', '[']\n    return_string = []\n    for char in paren_string:\n        if char in open_paren:\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0 and paren_stack": 4.762131699755222e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    return []": 0.00013241131002487345, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups: List[str] = []\n    i = 0\n    while i < len(paren_string):\n        current_group = ''\n        while paren_string[i] != ')' and i < len(paren_string):\n            current_group += paren_string[i]\n            i += 1\n        if current_group == '':\n            i += 1\n            continue\n        paren_": 2.2494285902548722e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = []\n    paren_stack.append(paren_string)\n    while len(paren_stack) > 0:\n        paren_str = paren_stack.pop()\n        if paren_str.find('(') < 0:\n            paren_group.append(paren_str)\n        elif len(paren_str) > 1:": 1.3844621506766242e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces = [i for i, x in enumerate(paren_string) if x == \"(\"]\n    close_braces = [i for i, x in enumerate(paren_string) if x == \")\"]\n\n    group_list = []\n    in_group = False\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":": 2.4826747925582938e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    # TODO: Implement this function\n\n    return result": 1.4373789895616694e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_paren_strings: List[str] = []\n    paren_level = 0\n    index = 0\n    for i in paren_string:\n        if i == '(':\n            paren_level += 1\n            if paren_level == 1:\n                list_paren_strings.append(paren_string[index:])\n        if i == ')':\n            paren_level -= 1": 1.0999652444105635e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [group for group in paren_string.split('()') if group != '']": 8.852646435905635e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = list(paren_string)\n    p_found = False\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            p_found = True\n        if paren_string[i] == ')' and p_found:\n            paren_stack.append(paren_string[i-1:": 2.593565934042415e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return []\n    if paren_string.find('()') != -1:\n        if len(paren_string) == 2:\n            return ['()']\n        else:\n            return ['()'] + separate_paren_groups(paren_string[1:-1])\n    elif paren_string.find(')(') != -1:\n        if len": 1.7358255089559117e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_groups.append(paren_stack.pop())\n    return paren_groups": 5.592669522577058e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # This will be a list of separate strings. Each string is one group\n    # of nested parentheses. We'll use a list of strings to hold the results\n    result = []\n    # This will be our current string\n    current_string = ''\n    # This is the number of open parentheses we've found so far\n    open_count = 0\n    # This is the number of close parentheses we've found so": 3.4023953374541865e-39, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    left_paren = 0\n    right_paren = 0\n    output_list = []\n\n    for char in paren_string:\n        if char == '(':\n            left_paren += 1\n        elif char == ')':\n            right_paren += 1\n        if left_paren == right_paren:\n            output_list.append(paren_string[0:left_paren + right_": 2.1592282930649501e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = '(' + paren_string + ')'\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            paren_stack.pop()\n        if len(paren_": 1.9400638300716437e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"()\"]": 9.262544064027832e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert len(paren_string) > 1\n    assert paren_string[0] == '(' and paren_string[-1] == ')'\n\n    open_count = 0\n    close_count = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            open_count += 1\n        elif paren == ')':\n            close_count += 1": 2.6152797022278513e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n\n    # Write your code here. Don't edit this line.\n    pass\n\n    # Don't edit below this line.\n    return group_list": 5.310255422070555e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # create list of parentheses\n    parentheses = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(' or paren_string[i] == ')':\n            parentheses.append(paren_string[i])\n    # print(parentheses)\n\n    # Create list of open braces that have corresponding closes\n    open_br": 3.2625043515189014e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_chunks = []\n    current_chunk = ''\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append('(')\n        elif c == ')':\n            if len(paren_stack) > 0:\n                current_chunk += ')'\n                paren_stack.pop()\n            else:\n                raise Value": 3.8704492404538324e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    pass": 0.000988255158164859, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You write the logic here to separate the nested groups in the string\n    # into a list of separate strings. \n    # Do NOT add any code outside of the function.\n    # You can write a single function that does both the input string parsing and the output string\n    # generation.\n    # You can write code to handle comments.\n    # You can write code to handle spaces.\n    # You can write code to handle other types of input": 2.07561171973777e-59, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here": 0.00547860990924299, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Python's fstring formatter\n    # format(sep=\"\", repl=\"\", maxsplit=-1, escape=\"\\\\\")\n    # sep is the separator string, repl is the replacement string (the \"substitute\"),\n    # maxsplit is the maximum number of replacements to do, and escape is the escape character.\n    return paren_string.split(maxsplit=-1)": 1.1691613052214925e-44, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_count = 0\n    close_paren_count = 0\n    new_str = []\n    paren_str = ''\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n        elif char == ')':\n            close_paren_count += 1\n        if open_paren_count == close_paren_count:\n            new": 1.223006933574956e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_groups = []\n\n    list_of_groups = [l for l in paren_string.split('()') if l != \"\"]\n\n    return list_of_groups": 2.4425135948262553e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n\n    for paren in paren_string:\n        if paren != '(':\n            paren_list.append(paren)\n\n    return paren_list": 6.917608142909344e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Complete the function to return a list of the separate strings\n    # (you may use list comprehension or a for loop)\n    pass": 1.2133545507412263e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def count_paren(paren_str: str) -> int:\n        return paren_str.count('(') - paren_str.count(')')\n\n    groups = []\n    open_paren = 0\n    start = 0\n\n    for end in range(len(paren_string)):\n        paren_char = paren_string[end]\n        if paren_char == '('": 1.742435904896669e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [''.join(paren_group) for paren_group in paren_string.split('()')]": 1.1381388399467553e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Write your function here. You can assume that the input\n    # string will always be a valid expression.\n\n    return ['']": 2.5710923339521594e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_group: List[str] = []\n    groups: List[str] = []\n    for i in paren_string:\n        if i == '(':\n            if current_group:\n                groups.append(f'({\"\".join(current_group)})')\n                current_group.clear()\n        elif i == ')':\n            if current_group:\n                groups.append(f'({\"\".join(": 5.777579887749792e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # list to store separated strings\n    str_list = []\n    # index to keep track of open and closed parentheses\n    i, j = 0, 0\n    # iterate through the input string\n    while i < len(paren_string):\n        # if i is an open parenthesis\n        if paren_string[i] == '(':\n            # count the number of open parentheses\n            j += 1": 2.132567031022165e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string = paren_string.replace(\" \", \"\")  # remove all spaces\n    # base case: when paren_string is empty, return it as it is\n    if not paren_string:\n        return paren_string\n\n    # if paren_string starts with (, then the paren_string is invalid and we have to split it into two halves\n    if paren_string[0] == '('": 2.3079693888761838e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[open_brace_index:close_brace_index + 1] for open_brace_index in range(\n        len(paren_string)) if paren_string[open_brace_index] == '(' and paren_string[open_brace_index + 1] == ')']": 5.03063717587366e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    raise NotImplementedError(\"Separate Parentheses is not yet implemented\")": 3.393466299629531e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    cur_paren = ''\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            cur_paren += char\n        elif char == ')':\n            open_paren_count -= 1\n            cur_paren += char\n            if open_paren_count == 0:": 9.720778077580619e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    cur_index = 0\n    while cur_index < len(paren_string):\n        if paren_string[cur_index] == '(':\n            paren_list.append('(')\n        elif paren_string[cur_index] == ')':\n            if len(paren_list) > 0": 2.004243035013935e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    return []": 0.0002653167831091777, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    sep_str = []\n\n    for char in paren_string:\n        if char == \"(\":\n            sep_str.append(\"(\")\n        elif char == \")\":\n            if len(sep_str) != 0:\n                sep_str.pop()\n    return sep_str": 1.6620043441011558e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    # Think about the base case and how you should handle the empty string\n    #  i.e. if paren_string is empty\n    #  if paren_string is '()'\n    #  if paren_string is '()()'\n    #  if paren_string is '((())'\n    #  if paren_string is '()(())'\n\n    pass": 1.1905762467742667e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')  # remove any spaces from the input string\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':  # opening parenthesis\n            if current_group:  # if there are any groups in the current list\n                result.append(''.join(current_group))  # concatenate the list of characters into": 4.3679297169859765e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # return a list containing the group of parentheses\n    return [paren_string]": 1.7881058001450736e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    output_list = []\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(idx)\n        elif char == ')':\n            start_idx = stack.pop()\n            output_list.append(paren_string[start_idx:idx+1])\n    return output_list": 1.6671453124768227e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def _is_balanced_group(paren_string: str) -> bool:\n        stack = []\n        for char in paren_string:\n            if char == '(':\n                stack.append(char)\n            else:\n                if len(stack) > 0 and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0": 3.148444102974717e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append('(')\n        elif paren_string[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                result.append('()')\n        if len(stack) == 0 and": 8.814636757717739e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # ...\n    result = []\n    s = ''\n    for char in paren_string:\n        if char == '(':\n            if len(result) == 0:\n                s += char\n            elif s[-1] != '(':\n                s += char\n        elif char == ')':\n            if len(result) == 0:\n                s += char\n            elif s[-1] != '(':": 1.4307589264120685e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    else:\n        new_string = paren_string[0]\n        for i in range(1, len(paren_string)):\n            if paren_string[i] == '(':\n                new_string": 4.4544256347573736e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def get_groups(paren_string: str) -> List[str]:\n        \"\"\"\n        Input is a string of parentheses, and your goal is to separate those groups and return the list.\n        Separate groups are balanced (each open brace is properly closed) and not nested within each other\n        Ignore any spaces in the input string.\n        >>> get_groups('( ) (( )) (( )( ))')": 3.29025022089003e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    parent_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            parent_stack.append(paren)\n        if paren == ')':\n            paren_list.append(f'({\"\".join(parent_stack)})')\n            parent_stack.pop()\n    return paren_list": 3.0982416176527e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [x for x in paren_string.split(\")(\")]": 1.0043526396516628e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # implement me\n    pass": 2.1765636752923117e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your solution here.\n    # pass\n    pass": 2.716407883018088e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_string = []\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        paren_group_string.append(paren_string)\n    else:\n        paren_group_string = ['()']\n\n    return paren_group_string": 1.0417702915083256e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # place your code here\n    pass": 4.865178352662517e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.find('()') >= 0:\n        return [paren_string]\n    else:\n        return []": 2.1578320614521674e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_groups = []\n    paren_level = 0\n    last_pos = 0\n    pos = 0\n    while pos < len(paren_string):\n        if paren_string[pos] == '(':\n            paren_level += 1\n        elif paren_string[pos] == ')':\n            paren_level -= 1\n        elif paren_string[pos] == ' ' and paren": 2.31957807804924e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_list = []\n    paren_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            paren_stack.pop()\n            if len(paren_stack) == 0:\n                parens_list.append('')\n        else:\n            parens_list.append": 7.118571340731377e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create an empty list to store the final output\n    output = []\n    # Create an empty list to store the current output\n    current_output = []\n    # Create a variable to keep track of the current index\n    current_index = 0\n    # Create a variable to keep track of the current level of nesting\n    current_level = 0\n    # Loop over the string\n    for char in paren_string:\n        # If": 1.500945105289717e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create a stack to keep track of the position of the open brackets\n    # by using a stack. Each time we find an open bracket, we push its index\n    # on the stack, and each time we find a closing bracket, we pop it off\n    # the stack and get its corresponding open bracket. The open bracket at\n    # the top of the stack will be our first character.\n\n    # A stack is a datastructure": 1.6294915504722888e-47, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    group_start_idx = 0\n    group_end_idx = 0\n    group_list = []\n    open_paren_count = 0\n\n    for idx, char in enumerate(paren_string):\n\n        if char == '(':\n            open_paren_count += 1\n        if char == ')':\n            open_paren_count -= 1\n\n        if open_paren_count ==": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Part 1: Write a function to separate the groups, and return the results in a list\n    # Part 2: Write a function to return the new list with the parenthesis seperated\n    # Part 3: Write a test that validates the solution.\n    # Part 4: Write the solution in a function and test it.\n\n    # YOUR CODE HERE\n    pass": 2.1819770026565375e-46, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    for paren_char in paren_string:\n        if paren_char == '(':\n            paren_stack.append(paren_char)\n        elif paren_char == ')':\n            if len(paren_stack) == 0:\n                continue\n            elif paren_stack[-1] == '(':\n                paren_stack.pop()": 4.640995395045673e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You can write the logic for this function by yourself, but do not change this function\n    # you can use the following variables\n    paren_stack = []\n    paren_list = []\n    paren_string_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n            i +=": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Replace this stub code with your solution.\n    return []": 1.1929903879746537e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    temp = []\n    current_string = ''\n    for char in paren_string:\n        if char == '(' or char == ')':\n            if current_string:\n                paren_list.append(current_string)\n                current_string = ''\n            temp.append(char)\n        else:\n            current_string += char\n\n    return paren_list": 2.371447558004052e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # This function will be called by your grader. DO NOT EDIT.\n    paren_groups = []\n    start_idx = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_groups.append(paren_string[start_idx:i])\n            start_idx = i + 1\n    paren_groups.append(p": 3.110723292708472e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = \"\"\n    paren_groups = []\n    for i in paren_string:\n        if i == '(':\n            if paren_group == \"\":\n                paren_group += i\n            else:\n                paren_groups.append(paren_group)\n                paren_group = i\n        elif i == ')':\n            paren_groups.append(paren_group)": 9.76749050217903e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Your code goes here\n    pass": 2.684836390607865e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # your code here\n    pass": 0.00011900420712029356, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement this function\n    raise NotImplementedError(\"TODO: Implement separate_paren_groups\")": 2.9094351631130623e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string_list = []\n    group_start = -1\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            group_start = i\n        if paren_string[i] == ')':\n            paren_string_list.append(paren_string[group_start:i+1])\n            group_start = -1": 4.785761947744181e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count = 0\n    start = 0\n    end = 0\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        if char == ')':\n            open_count -= 1\n        if open_count == 0 and char == ')':\n            end = i + 1\n            result.append(paren_string[start": 2.858931247116808e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Exercise 1\n    pass": 7.606401552897804e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    temp = ''\n    for paren in paren_string:\n        if paren == '(':\n            if temp == '':\n                paren_list.append('')\n            else:\n                paren_list.append(temp)\n                temp = ''\n        elif paren == ')':\n            if temp == '':\n                paren_list.append(temp)\n                temp =": 7.422790862557009e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_list.append('')\n            i += 1\n        elif paren_string[i] == ')':\n            paren_list.pop()\n            i += 1\n        elif paren_string[i] == ' ':\n            i += 1": 1.927259723487075e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    open_paren = 0\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            open_paren += 1\n        if char == ')' and open_paren > 0:\n            paren_list.append(paren_string[:index])\n            paren_string = paren_string[index + 1:]\n            open_paren -": 3.6670423314844224e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_str = ''\n\n    for char in paren_string:\n        if char == '(':\n            paren_str += '('\n        elif char == ')':\n            paren_str += ')'\n        else:\n            if paren_str:\n                paren_list.append(paren_str)\n                paren_str = ''\n            paren_list": 8.115328649496475e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # NOTE: This solution doesn't handle nested parentheses.\n    #       You might need to modify it to handle them.\n    return_list = []\n    opening_parenthesis_counter = 0\n    for char in paren_string:\n        if char == \"(\":\n            opening_parenthesis_counter += 1\n        elif char == \")\":\n            opening_parenthesis_counter -= 1\n            if opening_parent": 1.0465883253643116e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: complete this function\n    pass": 4.485742792849292e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                result.append(''.join(stack))\n                stack.pop()\n    return result": 3.302021318527199e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Read through each char and remember the indexes for open and closing parentheses\n    #   if open, append index to open_parens\n    #   if close, find the corresponding open, remove it from the list and create a new group at that index\n    #   if open, append index to open_parens\n    open_parens = []\n    paren_groups = []\n    paren_stack = []\n\n    for i,": 3.245915569098183e-51, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ### START CODE HERE\n    #############################################################################\n    #\n    # Your code here\n    #\n    #############################################################################\n    ### END CODE HERE\n\n    return return_paren_groups": 2.5453263606373194e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    string_index = 0\n    paren_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            string_index += 1\n            paren_group = \"\"\n        elif char == \")\":\n            string_index += 1\n            parens.append(paren_group)\n            paren_group = \"\"\n        else:\n            paren_group += char": 4.435134440334074e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def get_nest_level(level, string):\n        if len(string) == 0:\n            return level\n        if string[0] == \"(\":\n            return get_nest_level(level + 1, string[1:])\n        if string[0] == \")\":\n            return get_nest_level(level - 1, string[1:])\n        return get_nest_level(level, string[1:": 7.722963828583158e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n    return [stack.pop() for _ in range(len(stack))]": 3.768839049431941e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Place your code here\n    pass": 5.9575343410379785e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[i:j]\n        for i, j in enumerate(range(1, len(paren_string)))\n        if paren_string[i] == '(' and paren_string[j] == ')'\n    ]": 2.0391054327901616e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_stack = []\n    current_group = ''\n    # for each character in the string\n    for char in paren_string:\n        # if the character is an open paren\n        if char == '(':\n            # append the current group to the stack\n            group_stack.append(current_group)\n            # reset the current group\n            current_group = ''\n        # if the character is a close paren": 2.5582312808045982e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def recursive_separate_groups(paren_string):\n        parentheses = []\n        if paren_string:\n            for i, char in enumerate(paren_string):\n                if char == '(':\n                    parentheses.append(paren_string[:i])\n                    parentheses.append(paren_string[i+1:])\n                    return recursive_separate_groups(parentheses": 1.2617795531330984e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_str_list = []\n    paren_open_list = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_open_list.append(char)\n        elif char == \")\":\n            if len(paren_open_list) == 0:\n                paren_open_list.append(char)\n            else:\n                paren_str_list.append(": 9.480057802249553e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    pass": 0.007408907588804537, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    res = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                res.append(''.join(stack))\n                stack.pop()\n            else:\n                res.append('')\n    return res": 9.054133738598055e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement this function\n    return None": 8.087488660278971e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    paren_stack = []\n    paren_stack.append(0)\n\n    for i in range(1, len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n\n        if paren_string[i] == ')':\n            if len(paren_stack) > 1:\n                if paren": 2.890217403235796e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # create an empty list to append the new strings to\n    separated_paren_strings = []\n\n    # initialize the current string to empty and the index of the character to be checked\n    curr_string = \"\"\n    i = 0\n\n    # loop through the entire string\n    while i < len(paren_string):\n        # check if the character at the index is open parenthesis\n        if paren_string[i]": 8.501742926911897e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    split_list = []\n    left_paren = '('\n    right_paren = ')'\n    for paren in paren_string:\n        if paren == left_paren:\n            paren_stack.append(paren)\n        if paren == right_paren:\n            paren_stack.pop()\n            if paren_": 4.7644857224642376e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_stack = []\n    current_paren = \"\"\n    paren_list = []\n    for char in paren_string:\n        if char in [\"(\", \")\"]:\n            if char == \"(\":\n                current_paren = char\n                paren_stack.append(char)\n            elif char == \")\":\n                if current": 2.7889096329400917e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    string_list = []\n    for paren in paren_string:\n        string_list.append(paren)\n    return string_list": 6.619918920569799e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = []\n    opened = 0\n    for char in paren_string:\n        if char == \"(\":\n            opened += 1\n            if opened == 1:\n                group = []\n        elif char == \")\":\n            opened -= 1\n            if opened == 0:\n                groups.append(''.join(group))\n        else:\n            group.append(char)\n    return groups": 3.4568879893056316e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code here...": 7.766286100244896e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement this function\n    return []": 4.0446928858168724e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # implement this function\n    pass": 1.8324587229620632e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement your solution here\n    paren_list = []\n    paren_string_list = []\n    if paren_string != '()':\n        # print(paren_string)\n        paren_string_list = paren_string.split()\n        # print(paren_string_list)\n\n        for i in paren_string_list:\n            # print(i)\n            pare": 7.026341892803247e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # 1. Declare an empty list called paren_group\n    # 2. Set up a while loop that will run until the string is empty\n    # 3. Inside the loop, check if the first character of the string is an open parenthesis\n    # 4. If it is, add it to the paren_group list\n    # 5. If it isn't, add it to the paren_group list and remove the": 2.0430247198491262e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_stack.append(paren_string[0])\n    for char in paren_string[1:]:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack[-1] == '(':\n                paren_stack.pop()\n            else:\n                paren_stack.append(char": 1.0492873850868217e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_start = 0\n    paren_end = -1\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_start = i\n        elif paren_string[i] == ')':\n            paren_end = i\n            if paren_end > paren_start:\n                pare": 1.4705011956794143e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(' ', '')\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        else:\n            if len(paren_stack) == 0:\n                paren_stack.append(')')\n                return_list = []\n            elif paren == ')':": 6.596344604643531e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    count = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n        if count == 0:\n            result.append(paren_string[i-2:i+1])\n            i += 1\n        else:": 3.085295453489841e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    #\n    # 1. Create an empty list to store the resulting strings\n    # 2. Iterate through the input string\n    # 3. If we find an open parenthesis, add it to the stack\n    # 4. If we find a closing parenthesis, check if the parenthesis is the end of the current group.\n    # If it is, add the current group to the list\n    # 5. If the parenthesis is": 7.728039515497725e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_count = 0\n    closing_count = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_count += 1\n        if paren_string[i] == ')':\n            closing_count += 1\n        if open_count == closing_count:\n            result.append(paren_string[i": 1.1916085884863116e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write code here\n    # TODO: Your code here\n\n    return list()": 1.047872439135637e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string_list = []\n    # TODO: Write a loop that runs as long as the paren_string is not empty.\n    #       At each iteration, split the paren_string using the split function\n    #       and add that new list to the list of paren_string_list\n    return paren_string_list": 6.624048230089197e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    group = ''\n    for char in paren_string:\n        if char == '(':\n            group += char\n        elif char == ')':\n            paren_groups.append(group)\n            group = ''\n    return paren_groups": 1.7477426135057314e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return paren_string.split(\")\")": 1.4737516190330373e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    open_parens = []\n\n    for char in paren_string:\n        if char == '(':\n            open_parens.append(char)\n        elif char == ')':\n            if open_parens:\n                parens.append(''.join(open_parens))\n                open_parens = []\n    if open_parens:\n        parens.append(''.join(": 1.4067843361553965e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    result = []\n    count = 0\n    for i in paren_string:\n        if i == '(':\n            count += 1\n        if i == ')':\n            count -= 1\n        if count == 0:\n            paren_groups.append(paren_string[count:])\n            paren_string = paren_string[:count]\n    for parens in paren": 1.2768846195246043e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You can either do this in a while loop, or recursively.\n    # this is recursive, but it's slower than the loop version\n    # def separate_paren_groups(paren_string: str) -> List[str]:\n    #     return paren_string.split(')(')\n\n    #     if paren_string.count('(') != paren_string.count(')'):": 4.558736288991077e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # separates parantheses and returns a list of the individual groups\n    # example input: '(((()))'\n    # example output: ['(', '()', '(', '()', ')', ')']\n    my_list = []\n\n    def par_func(paren_string):\n        while len(paren_string) > 0:\n            if paren_string[0] == '(':": 3.4724652928616998e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            start += 1\n        elif paren_string[i] == ')':\n            if start == 1:\n                result.append(paren_string[start:i + 1])\n                start -= 1\n            elif start > 1:\n                result.append(": 6.03267077334289e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n\n    return_list = []\n\n    open_braces = []\n    closed_braces = []\n    last_opened = None\n    last_closed = None\n\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            open_braces.append(idx)\n            last_opened = idx\n        if char ==": 4.3005749460077155e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    current_parentheses = []\n    for char in paren_string:\n        if char == \"(\":\n            if current_parentheses:\n                parentheses.append(''.join(current_parentheses))\n                current_parentheses = []\n            current_parentheses.append(char)\n        elif char == \")\":\n            parentheses.append(''.join(current_": 6.089320638528257e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Initializing the stack\n    parens_stack = []\n    # Initializing an array\n    final_list = []\n    # Initializing the opening braces\n    opening_braces = ['(', '[', '{']\n    # Initializing the closing braces\n    closing_braces = [')', ']', '}']\n    # Looping through the parentheses string\n    for paren in paren_string:": 2.0558187669388493e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # your code here": 0.0008310530914344404, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_str = ''\n    for letter in paren_string:\n        if letter == '(':\n            paren_list.append(paren_str)\n            paren_str = ''\n        elif letter == ')':\n            if paren_str:\n                paren_list.append(paren_str)\n                paren_str = ''\n            else:\n                return": 2.752796412543142e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    return [paren_string[1:i] + paren_string[i + 2:j] + paren_string[j + 2:] for i, j in [(i, j) for i, j in enumerate(paren_string) if i in (0, len(paren_string) - 1) or paren_string[i - 1] != \"(\" or paren_string[j + 1": 1.4297632890080069e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: return a list of strings, containing each nested paren group\n    paren_string = paren_string.replace(' ', '')\n    i = 0\n    paren_list = []\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            start_index = i\n            i += 1\n            while paren_string[i] != ')':": 3.1058593293868275e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups: List[str] = []\n    current_group: str = ''\n    for c in paren_string:\n        if c == '(':\n            current_group += c\n            if len(current_group) == 2:\n                groups.append(current_group)\n                current_group = ''\n        elif c == ')':\n            if current_group:\n                groups.append(current_group)\n                current": 6.384274181251732e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[start:end]\n        for start, end in zip(\n            range(0, len(paren_string)),\n            range(1, len(paren_string) + 1),\n        )\n    ]": 5.1736019568282744e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # complete this function": 2.7086176873082727e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    opened_groups = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(' and paren_string[i+1] != ')':\n            opened_groups += 1\n        elif paren_string[i] == ')':\n            opened_groups -= 1\n            if opened_groups < 0:\n                break\n        elif paren": 2.8535815735994156e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # separate_paren_groups('(  )  ')\n    # ['()', '( )', '( )', '( )', '( )', '( )', '( )', '( )', '( )']\n    parens_stack = []\n    parens_queue = []\n    parens_stack.append('(')\n    parens_stack.append(')')\n    index = 0\n    while": 4.16776268136776e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count = 0\n    closed_count = 0\n    current_paren_string = []\n    paren_strings = []\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            if open_count > closed_count:\n                current_paren_string.append(char)\n        elif char == ')':\n            closed_": 7.48887214836895e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = list(paren_string)\n    group = []\n    # this is a list of each of the open parens that still need to be closed\n    open_parens_to_close = []\n    for i in open_parens:\n        if i == '(':\n            open_parens_to_close.append(i)\n        elif i == ')':\n            if open_parens_to": 4.619666878169598e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert type(paren_string) == str\n    # assert len(paren_string) > 0\n    paren_string = paren_string.replace(\" \", \"\")\n    open_paren_locs = []\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            open_paren_locs.append(i)\n        elif char == \")\":\n            if len": 1.7587146247624316e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = '(' + paren_string + ')'\n    sep_string = ')'\n    while sep_string in paren_string:\n        sep_string_idx = paren_string.find(sep_string)\n        paren_string = paren_string[:sep_string_idx] + sep_string + paren_string[sep_string_idx + 2:]\n    return paren_string.split": 2.03742015007126e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # n is the length of the paren_string, m is the number of parentheses in paren_string\n    n, m = len(paren_string), 0\n    parentheses = []\n\n    # iterate over the string, where m is the number of parentheses currently in paren_string\n    for i, paren in enumerate(paren_string):\n        if paren == '(':": 1.3009138342202605e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group_start = -1\n    paren_group_end = -1\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == \"(\":\n            if paren_stack and paren_stack[-1] == \"(\":\n                paren_stack.append(paren_string[i])\n            else:": 1.39117056297162e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_dict = {}\n    paren_list = []\n\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            paren_dict[idx] = []\n            paren_list.append(paren_dict[idx])\n        elif char == ')':\n            for key, value in paren_dict.items():\n                if value != []:\n                    paren": 3.8198083887693844e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    string_list = []\n    paren_stack = []\n    last_closed_paren_index = -1\n    open_paren_index = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_index = i\n        elif char == ')' and last_closed_paren_index == -1:\n            last_closed_paren_index": 6.657987455467073e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_strings = []\n    paren_string_list = []\n    open_paren = 0\n    start_idx = 0\n\n    # If the string contains no parentheses, return a blank list\n    if paren_string == \"()\":\n        return [\"\"]\n\n    for i, char in enumerate(paren_string):\n        # When we find a nested parenthesis\n        if char == \"(\"": 6.208079246934714e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = \"\"\n    group_count = 0\n    for char in paren_string:\n        if char == '(':\n            group += char\n            group_count += 1\n        if char == ')':\n            group += char\n            group_count -= 1\n            if group_count == 0:\n                groups.append(group)\n                group = \"\"\n                group_count = 0\n    return groups": 1.1028813565807088e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Add your code here\n    pass": 3.750637983894122e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return paren_string\n    elif paren_string[0] == \"(\":\n        return [paren_string[0]] + separate_paren_groups(paren_string[1:])\n    elif paren_string[-1] == \")\":\n        return separate_paren_groups(paren_string[:-1]) + [paren_string[-1]]\n    else": 6.721938134749732e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n\n    start = 0\n    end = paren_string.find(')')\n    while end != -1:\n        paren_groups.append(paren_string[start:end + 1])\n        start = end + 1\n        end = paren_string.find(')', start)\n\n    return paren_groups": 1.4060940415434845e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Write your code here": 9.186997834764899e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    # keep track of how many nested groups we've opened\n    open_paren_count = 0\n    paren_group = ''\n    for c in paren_string:\n        if c == '(':\n            open_paren_count += 1\n        elif c == ')':\n            open_paren_count -= 1\n            if open_paren_count > 0:": 1.6566573214704542e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n\n    paren_stack = [0]\n\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(idx + 1)\n        elif char == ')':\n            paren_stack.pop()\n\n            if not paren_stack:\n                paren_stack.append(idx + 1)": 3.633829005903932e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # handle special case\n    if paren_string == '':\n        return []\n\n    # break up string into single character sections\n    paren_groups = [paren_string[0]]\n    for paren in paren_string[1:]:\n        if paren == '(':\n            paren_groups.append(paren)\n        elif paren == ')':\n            paren_groups.append(paren": 2.0597456112738682e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren = \"\"\n    group = \"\"\n    for char in paren_string:\n        if char == '(':\n            group += char\n        elif char == ')':\n            if group == \"\":\n                pass\n            else:\n                parens.append(group)\n                group = \"\"\n        elif char != \" \":\n            group += char\n\n    parens.append(group)": 4.95521552754772e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = ''\n    for char in paren_string:\n        if char == '(':\n            if group:\n                groups.append(group)\n                group = ''\n        elif char == ')' and group:\n            groups.append(group)\n            group = ''\n        elif group:\n            group = group + char\n    groups.append(group)\n    return groups": 2.756115509489939e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n            i += 1\n        elif paren_string[i] == ')':\n            stack.pop()\n            i += 1\n        else:\n            i += 1\n    return [paren_string[start:end + 1] for start,": 9.44558488803231e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for i in paren_string:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            result.append(stack.pop())\n    return result": 5.569577900637844e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = {\n        \"(\": 0,\n        \"{\": 0,\n        \"[\": 0,\n        \"<\": 0,\n    }\n    paren_list = []\n    paren_stack = []\n    for char in paren_string:\n        if char in open_parens:\n            open_parens[char] += 1\n            paren_stack.append(char)": 5.776452539705724e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    if paren_string == \"\":\n        return output\n\n    # find the index of the first open parenthesis\n    open_index = paren_string.find(\"(\")\n    # find the index of the first closing parenthesis\n    close_index = paren_string.find(\")\", open_index)\n\n    # find the last open parenthesis index\n    last_open_index = len(paren_": 1.8614587638443508e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: write this function\n    pass": 1.765384468837741e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # TODO: implement me": 1.7337464013913624e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string_list = []\n    paren_group = ''\n\n    for i in paren_string:\n        if i == '(':\n            paren_group += i\n        elif i == ')':\n            if not paren_group:\n                continue\n            paren_string_list.append(paren_group)\n            pare": 3.162471743649054e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = list(paren_string)\n    # print(paren_list)\n    paren_stack = []\n    paren_list_out = []\n    paren_counter = 0\n    # paren_list_out.append(paren_list[0])\n\n    for element in paren_list:\n        paren_counter += 1\n        if element == '(':\n            paren_": 8.26682993028513e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_groups = []\n    group = ''\n    for c in paren_string:\n        if c == '(':\n            if group:\n                list_of_groups.append(group)\n                group = ''\n        if group:\n            group += c\n        if c == ')':\n            list_of_groups.append(group)\n            group = ''\n    if group:\n        list_of_groups": 4.1785746899914384e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here.\n    return []": 3.3561946244279234e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    paren_list = []\n    group_counter = 0\n    for char in paren_string:\n        if char == '(':\n            group_counter += 1\n        elif char == ')':\n            group_counter -= 1\n        if group_counter == 0:\n            paren_list.append(char)\n    return paren_list": 3.599018677866119e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_stack.append(i)\n    for i in paren_stack:\n        paren_": 6.342384276103212e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parenthesis = []\n    paren = ''\n    for char in paren_string:\n        if char == '(':\n            paren += char\n        elif char == ')':\n            parenthesis.append(paren)\n            paren = ''\n        else:\n            continue\n    return parenthesis": 4.4767981835306207e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    pass": 0.0004885718471465463, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # define output\n    output = []\n\n    # iterate through string, determining groups\n    counter = 0\n    open_paren_index = 0\n    close_paren_index = 0\n\n    for i, paren in enumerate(paren_string):\n\n        if paren == \"(\":\n            counter += 1\n            if counter == 1:\n                open_paren_index = i\n            if counter >": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_count = 0\n    open_paren_indices = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            open_paren_count += 1\n            open_paren_indices.append(i)\n        elif paren_string[i] == \")\":\n            open_paren_count -= 1\n            if": 6.4034790552846816e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # For each opening parenthesis, add it to a stack\n    # And for each closing parenthesis, pop the stack. If the popped item is not an opening parenthesis,\n    # the parenthesis are not balanced and we return an empty list.\n    # If the popped item is an opening parenthesis, we check if the stack is empty. If it is, then the\n    # parenthesis are balanced and we add the popped item to the list": 2.236648751584206e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    open_par = 0\n    while open_par != -1:\n        open_par = paren_string.find(\"(\")\n        close_par = paren_string.find(\")\")\n        if open_par != -1 and close_par != -1:\n            if open_par == close_par:\n                paren_string = paren_string[open_par+": 3.496539766591953e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    list_of_paren_groups = []\n    paren_stack = []\n    current_group = ''\n\n    for paren in paren_string:\n        if paren == '(':\n            if current_group:\n                list_of_paren_groups.append(current_group)\n                current_group = ''\n            paren_stack.append(paren)\n\n        if paren == ')": 1.6957073361913297e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = ''\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            if not paren_stack:\n                pass\n            else:\n                paren_group = paren_group + i\n                paren_stack.pop()\n        else:\n            paren_group": 9.650126364892496e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_group = ''\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            groups.append(current_group)\n            current_group = ''\n        elif char == ' ':\n            pass\n        else:\n            current_group += char\n    groups.append(current_group)\n    return groups": 1.303712344771617e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create a list for the results\n    results = []\n    paren_stack = []\n    paren_start = 0\n\n    # Iterate over the string\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and paren_stack:\n            results.append(paren_string[": 2.847933659966993e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # noinspection PyUnusedLocal\n    def bracket_separator(left_par, right_par, level):\n        return left_par, right_par, level\n\n    def traverse_func(left, right, level):\n        if left_par == '(' and right_par == ')':\n            if level > max_level:\n                max_level = level\n                final_result.append(right)": 2.245503401784283e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code goes here\n    stack = []\n    final_result = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            stack.pop()\n        else:\n            pass\n\n    for j in paren_string:\n        if j == '(' and paren_string.index(j) == 0:\n            final_": 9.346189702141603e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_set = set()\n    open_paren = 0\n    for i in paren_string:\n        if i in ['(', '[']:\n            paren_stack.append(i)\n            paren_set.add(i)\n            open_paren += 1\n        elif i in [')', ']']:\n            paren_stack.pop()\n            paren": 6.0808529847456946e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and paren_stack:\n            paren_stack.pop()\n            if not paren_stack:\n                paren_list.append(paren_string[0:": 3.2822032851459486e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # To find a first occurrence of the outermost set of parentheses, use a stack.\n    # For each parenthesis we encounter in the string, we also push it onto the stack.\n    # This allows us to traverse the string in reverse order (reversed() applies to reversed strings)\n    stack = []\n    for parenthesis in reversed(paren_string):\n        if parenthesis == '(':\n            stack.append": 6.2663736656524976e-49, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    cur_paren_group = []\n    for char in paren_string:\n        if char == \"(\":\n            if cur_paren_group:\n                paren_groups.append(\"\".join(cur_paren_group))\n                cur_paren_group = []\n        elif char == \")\":\n            if cur_paren_group:\n                paren_groups.append(\"": 2.8461178690519594e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n\n    # The main idea is that if we have an open brace, we should add it to the list.\n    # When we get a closing brace, we should remove the last item in the list.\n    # We do this recursively until the list is empty.\n    #\n    # We will have a list of strings that represent the paren groups.\n    paren_group_strings = []\n\n    # The open br": 1.3211105680755238e-49, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack: List[str] = []\n    paren_list: List[str] = []\n    paren_count: int = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n            paren_count += 1\n        elif paren == ')':\n            paren_stack.pop()": 6.130794673546245e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_list.append(paren_string)\n    n = 0\n    while n <= len(paren_list[0]):\n        if paren_list[0][n] == '(' and paren_list[0][n + 1] == '(':\n            if paren_list[0][n + 2] == '(':\n                substring = paren_list[": 2.2156003151054337e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    op_list = []\n    for item in paren_string:\n        if item == '(' or item == ')':\n            if len(op_list) == 0 and item == ')':\n                paren_list.append(')')\n                op_list.append('(')\n            elif op_list[-1] == '(' and item == ')':\n                op_list.pop": 4.5523344042805853e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Put your code here.": 7.274597040625558e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    paren_string_list = list(paren_string)\n    for char in paren_string_list:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')' and len(paren_stack) > 0:\n            paren_groups.append(''.join(paren_stack))\n            pare": 4.0952358366712083e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_list_2 = []\n    paren_string = paren_string.replace(' ', '')\n    for i in paren_string:\n        if i == '(':\n            paren_list.append(i)\n        elif i == ')':\n            paren_list.append(i)\n            paren_list_2.append(''.join(paren_list": 6.606727584915372e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Hint: Use recursion\n    if len(paren_string) == 0:\n        return []\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string] + separate_paren_groups(paren_string[1:-1])\n    elif paren_string[0] == '(':\n        return [paren_string[:1": 1.8905713147330545e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert isinstance(paren_string, str), 'Input must be a string containing multiple groups of nested parentheses'\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        elif char == ' ':\n            if len(stack) == 0:\n                current_": 1.2936510339078877e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    if len(paren_string) == 0:\n        return paren_list\n    elif len(paren_string) == 1:\n        if paren_string == '()':\n            return paren_list\n        else:\n            paren_list.append(paren_string)\n            return paren_list\n    else:\n        for index in range(len(paren_": 1.039981593683495e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                return []\n            else:\n                paren_stack.pop()\n                if len(paren_stack) == 0:\n                    paren": 1.028164071640059e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # separate_paren_groups('( ) (( )) (( )( ))')\n    pass": 1.2467561203631505e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    temp_list = []\n    temp = ''\n    for i in paren_string:\n        if i == '(' or i == ')':\n            temp += i\n        else:\n            temp += ' '\n        if i == ')' or i == '(':\n            if len(temp) > 2:\n                temp_list.append(temp)\n                temp = ''\n            else:\n                temp": 2.808346034108564e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    answer = []\n    stack = []\n    for paren in paren_string:\n        if paren == \"(\":\n            stack.append(paren)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n    for paren in paren_string:\n        if paren == \"(\":\n            continue\n        if len(stack) > 0:\n            stack.pop()\n        else": 7.227486360069656e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    start_index = 0\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            if paren_string[idx+1] == ')':\n                paren_groups.append(paren_string[start_index:idx])\n                start_index = idx + 1\n    paren_groups.append(paren_string[start_index:": 3.167079026813747e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            if not group:\n                continue\n            else:\n                group.pop()\n                if not group:\n                    groups.append(''.join(group))\n                    group = []\n        elif char == ' ':\n            continue\n        else:": 3.3382881900786995e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        result.append(paren_string)\n    else:\n        if paren_string[0] != '(':\n            paren_string = '(' + paren_string\n        if paren_string[-1] != ')':\n            paren_string = paren_string +": 1.0137545392122828e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    string = paren_string\n    while string != \"\":\n        paren_list.append(string)\n        string = string.replace('()', '')\n    return paren_list": 9.294212587200326e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: fill out this function\n\n    return []": 8.912929873946817e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string.strip().replace(\" \", \"\")[1:-1] for paren_string in paren_string.strip().split(\")(\")]": 4.323645833646228e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    string_list = [paren_string]\n    string_list = [s for s in string_list if s != '()']\n    new_string_list = []\n    for s in string_list:\n        new_s = []\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n            if count": 4.418231290215588e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    current_group = []\n    groups = []\n\n    for char in paren_string:\n        if char == \"(\":\n            current_group.append(char)\n\n        if char == \")\":\n            groups.append(\"\".join(current_group))\n            current_group = []\n\n    return groups": 2.5790368582458174e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Finish this function\n    return []": 2.980728481386108e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    paren_stack.append(paren_string)\n\n    while len(paren_stack) != 0:\n        p = paren_stack.pop()\n        p_left = p.find('(')\n        p_right = p.find(')')\n\n        if p_left == -1 and p_right == -1:\n            pare": 2.3170575262877423e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # use a list to store the final result\n    result = []\n\n    # iterate through the string\n    for i in range(len(paren_string)):\n\n        # if we encounter an open parenthesis, append it to a new string\n        if paren_string[i] == '(':\n            result.append('')\n\n        # if we encounter a closed parenthesis, iterate to the previous open parenthesis and": 1.8413045578060337e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # fill in with your code\n    # to solve this problem, you must use recursion\n    # but you may not use any loops\n    # you may not use any additional list data structure\n    # but you may use any additional list helper function\n    # you may use any additional tuple helper function\n    # you may not use any additional string helper function\n    # you may use any additional string helper function\n    # but you may not use any additional tuple helper": 2.5099090930200362e-46, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    num_open_paren = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            num_open_paren += 1\n        if char == ')':\n            num_open_paren -= 1\n            if num_open_paren == 0:\n                paren_list.append(paren_string[:i+1])": 3.033727344328671e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # make a list of the groups\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    while paren_string != '':\n        paren_list.append(paren_string.find('(') + 1)\n        paren_string = paren_string.replace('(', '', 1)\n        paren_list.append(paren_string.find": 1.5624203841631386e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # how many open parentheses we have so far\n    open_parens = 0\n\n    # define a list to hold the output\n    paren_groups = []\n\n    # define an index counter for the input\n    idx = 0\n\n    # loop through the string\n    while idx < len(paren_string):\n        # if we hit a space and open_parens is 0, we have a complete group\n        #": 8.7611918064863e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n\n    for paren_bracket in paren_string:\n        if paren_bracket == '(':\n            if paren_stack:\n                paren_groups.append(''.join(paren_stack))\n                paren_stack.clear()\n            paren_stack.append('')\n        elif paren_bracket == ')':": 5.414370194618974e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = paren_string.replace(\" \", \"\")\n    new_list = [paren_list]\n    if paren_list.count(\"(\") != paren_list.count(\")\"):\n        return \"Error: Paren groups are not balanced\"\n    while \"()\" in new_list:\n        for i in range(len(new_list)):\n            if new_list[i].count(\"(\"": 2.790946949892664e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code goes here\n    # Example\n    # Split string on every \"(\" or \")\" (if there is one)\n    # Check if the string is a single parenthesis\n    # If so, return it (if not, get the substring)\n    parens = paren_string.split(\")(\")\n    list_of_paren_strings = []\n    for paren in parens:\n        if paren ==": 2.2466673936184893e-48, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def check_paren_group(paren_group: str):\n        if paren_group.count('(') != paren_group.count(')'):\n            return False\n\n        open_count = 0\n        for char in paren_group:\n            if char == '(':\n                open_count += 1\n            elif char == ')':\n                open_count -= 1\n\n            if open_count": 2.226175260537671e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    while len(paren_string) > 0:\n        if paren_string[0] == '(':\n            # the first character is an open parenthesis\n            paren_index = paren_string.find(')')\n            paren_list.append(paren_string[:p": 6.30945025948044e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here\n    paren_string = paren_string.replace(\" \", \"\")\n    num = 0\n    while num < len(paren_string):\n        paren_string = paren_string.replace(\"(\", \"(\" + str(num))\n        num += 1\n    for num in range(len(paren_string)):\n        if paren_string[num] == \"(\":": 2.415584646396477e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    new_string = ''\n    counter = 0\n\n    while counter < len(paren_string):\n        if paren_string[counter] == '(':\n            new_string += '('\n            paren_list.append(new_string)\n            new_string = ''\n        elif paren_string[counter] == ')':\n            new_string += ')'\n            paren": 4.407209376668856e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(paren)\n        elif paren == \")\":\n            if paren_stack:\n                result.append(paren_stack.pop())\n            else:\n                result.append(paren)\n\n    return result": 3.6800080165747736e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    groups = []\n    open_count = 0\n    for i in paren_string:\n        if i == '(':\n            open_count += 1\n            if open_count == 1:\n                groups.append('(')\n        elif i == ')':\n            if open_count == 1:\n                result.append(''.join(groups))\n                groups = []\n                open_count = 0": 2.1145659050731462e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    index = 0\n    open_count = 0\n    end_index = 0\n    parens = {\n        '(': 0,\n        ')': 0\n    }\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            open_count += 1\n        else:\n            open_count -= 1\n        if open_": 4.2755390410756713e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n        elif char == ')':\n            paren_groups.append(''.join(paren_stack))\n            paren_stack.pop()\n    return paren_groups": 6.189003343428509e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    i = 0\n    while i < len(paren_string):\n        count = 1\n        while count > 0:\n            if paren_string[i] == '(':\n                count += 1\n            elif paren_string[i] == ')':\n                count -= 1\n            i += 1\n        groups.append(paren_string[1:i-1])\n    return groups": 3.5768522752511706e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    if paren_string == \"\":\n        return result\n    paren_stack = []\n    curr_string = \"\"\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n            if curr_string == \"\":\n                curr_string = paren_string[i]": 5.747470361736643e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # convert string to list\n    paren_list = list(paren_string)\n\n    # list to hold list of parentheses\n    paren_groups = []\n\n    # variable to hold group of parentheses\n    group = []\n\n    # loop through each character in the list\n    for char in paren_list:\n        # if char is open parenthesis, add to group\n        if char == \"(\":": 6.010826810394014e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    return [\n        p.strip('()')\n        for p in paren_string.strip(' ()').split(')(')\n        if p != ''\n    ]": 1.4757876773084747e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_stack = []\n    paren_string_list = []\n    open_paren_stack_max = []\n    for paren in paren_string:\n        if paren == '(':\n            open_paren_stack.append(paren)\n            open_paren_stack_max.append(len(open_paren_stack))\n        elif paren == ')':\n            if open": 4.049257136947622e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    # loop through paren_string\n    for i in range(len(paren_string)):\n        # if the current paren is ( append to stack\n        if paren_string[i] == \"(\":\n            stack.append(paren_string[i])\n        # if the current paren is ), check to see if the stack is empty.\n        # if the stack is empty": 2.4511730672783107e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_count = 0\n    paren_string = list(paren_string)\n    current_group = []\n    groups = []\n\n    for i in range(len(paren_string)):\n\n        if paren_string[i] == '(':\n            paren_count += 1\n            current_group.append(paren_string[i])\n\n        if paren_string[i] == '": 2.6722878251665563e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    group = ''\n    groups = []\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            paren_stack.pop()\n            if len(paren_stack) == 0:\n                groups.append(group)\n                group = ''\n            else:": 1.7005666754041033e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    remaining_parens = paren_string.strip('()')\n    while remaining_parens:\n        pair = remaining_parens.find('()')\n        if pair == -1:\n            parens.append(remaining_parens)\n            break\n        parens.append(remaining_parens[:pair])\n        remaining_parens = remaining_parens[pair+2:]\n    return": 4.886272935864417e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_string = paren_string.replace(' ', '')\n    open_braces = 0\n    close_braces = 0\n    paren_group = ''\n    for paren in paren_string:\n        if paren == '(':\n            open_braces += 1\n        elif paren == ')':\n            close_braces += 1\n        if open_braces": 3.6243804129941267e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return [paren_string]\n    open_paren_count = 0\n    closed_paren_count = 0\n    new_paren_str = ''\n    paren_str_list = []\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n        elif char == ')':\n            closed_paren_": 7.269626713597989e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        if i == ')':\n            if paren_stack:\n                paren_groups.append(''.join(paren_stack))\n                paren_stack = []\n\n    return paren_groups": 6.718138741171354e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    elif len(paren_string) == 1:\n        return [paren_string]\n\n    # First, find the index of the first '('\n    paren_index = paren_string.index('(')\n    # Find the index of the last ')'\n    paren_index_end = paren_index\n    for i in range(paren_index": 8.893397981709075e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # start with two empty lists\n    parsed_list = []\n    temp_string = ''\n\n    # for every character in the parentheses string\n    for char in paren_string:\n        # if the character is not a space, it is not a closing bracket\n        if char != ' ':\n            # add it to the temporary string\n            temp_string += char\n\n        # if the character is a closing bracket,": 5.715842480542656e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    final_output = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                final_output.": 3.676610602209987e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result_list = []\n    str_count = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            str_count += 1\n        elif char == \")\":\n            str_count -= 1\n\n        if str_count == 0:\n            result_list.append(char)\n\n    return result_list": 7.652220615468582e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    #print(paren_string)\n    index = 0\n    while index < len(paren_string):\n        open_count = 0\n        if paren_string[index] == '(':\n            open_count += 1\n        if paren_string[index] == ')':\n            open_count -= 1\n        if open_count == 0:\n            if len(paren_string)": 1.7807595084724433e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    # TODO: Write your code here\n\n    return paren_groups": 8.485971652385305e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    left_paren = 0\n    right_paren = 0\n    string_list = []\n\n    # separate all strings\n    for i in paren_string:\n        if i == \"(\":\n            left_paren += 1\n        elif i == \")\":\n            right_paren += 1\n        # group string if the left and right parentheses are balanced\n        if left_paren == right_paren:": 2.2402367076380425e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Replace all instances of '()' with '' in the string\n    paren_string = paren_string.replace('()', '')\n    # Replace all instances of '(( ' with '((' in the string\n    paren_string = paren_string.replace('(( ', '(')\n    # Replace all instances of '))' with '))' in the string\n    paren_string = paren_string.": 9.459019850088306e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    current_word = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_stack.pop()\n        if len(paren_stack) == 0 and char != ' ':\n            current_word += char\n        elif char == '(' or char == ')' or char": 8.325247451245611e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    open_groups = []\n    for char in paren_string:\n        if char == '(':\n            open_groups.append('(')\n        elif char == ')':\n            if len(open_groups) == 0:\n                continue\n            open_groups.pop()\n            if len(open_groups) == 0:\n                groups.append('()')\n\n    return groups": 9.072439069064145e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n            result.append(char)\n        else:\n            result.append(char)\n    return result": 1.8661087888476275e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    if paren_string[0] == '(':\n        open_parentheses = 1\n    else:\n        open_parentheses = 0\n\n    for paren in paren_string:\n        if paren == '(':\n            open_parentheses += 1\n        elif paren == ')':\n            open_parentheses -= 1\n        elif open_parentheses == 0": 8.076337756076888e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_group_list = []\n    left_parens = 0\n    right_parens = 0\n    paren_string_without_spaces = paren_string.replace(\" \", \"\")\n    index = 0\n    for char in paren_string_without_spaces:\n        if char == \"(\":\n            left_parens += 1\n        elif char == \")\":\n            right_parens += 1": 9.469581266231202e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # https://stackoverflow.com/questions/16287467/detecting-balance-parentheses-in-a-string\n\n    current_set = []\n    parenthesis_stack = []\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            parenthesis_stack.append(i)\n        elif char == \")\":\n            if parenthesis_stack": 5.355162069065044e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # your code here\n    return []": 0.0002195893333073688, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    paren_stack = []\n    paren_opened = False\n    for paren in paren_string:\n        if paren == \"(\":\n            if paren_opened:\n                paren_stack.append(paren)\n            else:\n                paren_opened = True\n        elif paren == \")\":\n            if len(paren_stack) > 0": 5.5837682328408575e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = ''\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            if open_paren_count > 1:\n                current_group += char\n            else:\n                groups.append(current_group)\n                current_group = ''\n        elif char == ')':\n            if": 3.00489537337444e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    group = []\n    for char in paren_string:\n        if char == '(':\n            if group:\n                result.append(''.join(group))\n                group = []\n            group.append(char)\n        elif char == ')':\n            if group:\n                result.append(''.join(group))\n                group = []\n            group.append(char)\n        else:\n            group": 1.981244442169608e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Initialize variables\n    # ---------------------\n    # List that will hold the result\n    paren_list = []\n    # Number of open parentheses\n    num_opened_paren = 0\n    # Current character\n    current_char = ''\n\n    # Algorithm\n    # --------\n    # Loop through string\n    for char in paren_string:\n        # If the current character is not a parenthesis": 6.609203983057326e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n    if paren_string[0] != '(' or paren_string[-1] != ')':\n        return [paren_string]\n    return ['('] + separate_paren_groups(paren_string[1:-1]) + [')']": 1.1027988508113178e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = 0\n    paren_strings = []\n    for char in paren_string:\n        if char == '(':\n            open_parens += 1\n        elif char == ')':\n            open_parens -= 1\n        if open_parens == 0:\n            paren_strings.append('')\n        else:\n            paren_strings[-1] += char\n    return paren_strings": 1.5585225297995702e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = \"\"\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n        elif char == ')':\n            open_paren_count -= 1\n        if open_paren_count == 0:\n            groups.append(group)\n            group = \"\"\n        else:\n            group += char": 1.0443989672205563e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Implement your function here\n\n    return ['()', '(())', '(()())']": 3.793372513966931e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_stack = []\n    paren_list = []\n    open_count = 0\n    for char in paren_string:\n        if char == \"(\":\n            if open_count == 0:\n                paren_stack.append(char)\n                open_count += 1\n            else:\n                paren_stack.append(char)": 4.659551315027292e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '( ')\n    paren_string = paren_string.replace(')', ' )')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('( ', '(')\n    paren_string = paren": 7.960194960600882e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(i)\n    return stack": 1.939645737776067e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren = 0\n    open_parens = []\n    group_string = []\n    open_parens_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_parens_count += 1\n            open_paren += 1\n            open_parens.append(char)\n        if char == ')':\n            open_parens_count -= 1": 4.992246119861981e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    left_parentheses = set(['(', '[', '{'])\n    right_parentheses = set([')', ']', '}'])\n    parens = []\n    for i, paren in enumerate(paren_string):\n        if paren in left_parentheses:\n            stack.append(i)\n            parens.append(paren)\n        elif paren in right_": 8.150744952214347e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def build_brackets(paren_str, p_level, b_level, prefix='', p_stack=[]):\n        if paren_str[p_level] == '(':\n            if p_level == 0:\n                p_stack.append(prefix)\n            return build_brackets(paren_str, p_level+1, b_level+1, prefix + paren_str[p_level],": 2.6008812578511072e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Type your code below\n    paren_stack = []\n    result = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(i)\n        elif paren == ')':\n            start = paren_stack.pop()\n            result.append(paren_string[start: i + 1])\n    return result": 1.7443738338414508e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    group = \"\"\n    result = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_stack.append(group)\n            group = \"\"\n        elif i == \")\":\n            result.append(paren_stack.pop())\n        else:\n            group += i\n    result.append(group)\n    return result": 7.427920574728873e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    # I used two stacks. One stack that will keep track of the open paren indices, and another one that will keep\n    # track of the length of the current open paren group. The open paren group is the indices between the open\n    # paren index and the close paren index.\n    # To do this, I created a helper function that will check if the current index is the index of an open paren.": 1.051777573275255e-52, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = list(paren_string)\n    paren_list = []\n    group = []\n    for c in paren_string:\n        if c == '(':\n            group.append(c)\n        elif c == ')':\n            if len(group) > 0:\n                paren_list.append(''.join(group))\n                group = []\n            else:\n                group = []": 3.30263370029912e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_stack = []\n    paren_string += ' '\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n        elif char == ')':\n            if paren_stack:\n                result.append(''.join(paren_stack))\n                paren_stack.pop()\n            else:\n                # No open parenthes": 1.228340373258494e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses_list = []\n    for i in paren_string.split():\n        if i in ['(', ')']:\n            parentheses_list.append(i)\n    return parentheses_list": 4.684653359541651e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    curr_group = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            stack.append(curr_group)\n            curr_group = []\n        elif paren_string[i] == \")\":\n            if stack:\n                curr_group = stack.pop() + curr_group\n            else:": 2.1469044994236624e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # we use a stack to track what we've seen so far\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        elif not stack and char.isspace():\n            # don't add empty strings to the list if the string ends in a space\n            continue\n        else:\n            stack": 2.4754002619277483e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    left_count = 0\n    right_count = 0\n    for i in paren_string:\n        if i == '(':\n            left_count += 1\n        elif i == ')':\n            right_count += 1\n        if left_count == right_count:\n            return_list.append(paren_string[:(left_count + right_count)])\n            paren_string": 2.3067903835881663e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    res = []\n    curr = \"\"\n    for c in paren_string:\n        if c == '(':\n            if len(curr) > 0:\n                res.append(curr)\n            curr = \"\"\n        elif c == ')':\n            if len(curr) > 0:\n                res.append(curr)\n                curr = \"\"\n            else:": 1.5253390577113552e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_group = []\n    open_braces = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_braces.append(i)\n        elif char == ')':\n            start = open_braces.pop()\n            paren_group = paren_string[start:i + 1]\n            paren_list": 3.148924155595859e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Input validation.\n    assert isinstance(paren_string, str), \"Input must be a string.\"\n    assert len(paren_string) > 0, \"Input must not be empty.\"\n    assert len(paren_string) <= len(paren_string.replace(\"(\", \"\")), \"Input must be valid.\"\n\n    output = []\n    paren_count = 0\n\n    for i in range(len": 1.3266677561620654e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    parens_string = ''\n    result = []\n    for i in range(len(paren_string)):\n        parens_stack.append(paren_string[i])\n        if parens_stack[-1] == '(' and parens_stack[-2] == ')':\n            parens_stack.pop()\n            parens_stack.pop()\n            parens_string": 4.392027375145876e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_group = ''\n    result = []\n    for c in paren_string:\n        if c == '(':\n            current_group += c\n        elif c == ')':\n            if current_group:\n                result.append(current_group)\n                current_group = ''\n        elif current_group:\n            current_group += c\n    return result": 9.634333537405441e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_group = ''\n    for paren in paren_string:\n        if paren == '(':\n            paren_group += paren\n        elif paren == ')':\n            if paren_group:\n                result.append(paren_group)\n                paren_group = ''\n        else:\n            continue\n    return result": 1.0836547763364185e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"\"]": 0.0009597203879240628, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    for i in range(paren_string.count(\"(\")):\n        paren_group_list.append(paren_string.split(\"(\")[i])\n        paren_string = paren_string.split(\"(\")[i+1]\n\n    return paren_group_list": 1.0117793561230918e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # creating a list of our groups\n    paren_list = []\n    paren_string = paren_string.split(\" \")\n    for item in paren_string:\n        if item != '':\n            paren_list.append(item)\n    paren_list.pop()\n    print(paren_list)\n    # creating list of our groups\n    group_list = []\n    # creating a counter": 4.8550560659719385e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                paren_stack.append(paren)\n            else:\n                paren_groups.append(''.join(paren_": 6.687918970136715e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def recurse(paren_str: str, index: int, result: List[str], bracket_list: List[str]):\n        if index == len(paren_str):\n            return result\n        else:\n            if paren_str[index] == '(':\n                bracket_list.append(paren_str[index])\n            elif paren_str[index] == ')':\n                if": 6.127787576026449e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    answer = []\n    p_count = 0\n    start = 0\n\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            p_count += 1\n        elif c == ')':\n            p_count -= 1\n        if p_count == 0:\n            answer.append(paren_string[start:i + 1])\n            start = i + 1\n    return answer": 3.4198336904779e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string_split = paren_string.split(')')\n    groups = []\n    for group in paren_string_split:\n        if len(group) > 0:\n            groups.append(group)\n\n    groups_split = []\n    for group in groups:\n        groups_split.append(group.split('('))": 9.816831584546903e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # type hinting\n    paren_string: str\n\n    # make a list of all the paren groups\n    paren_groups = []\n    current_group = ''\n    parens_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            parens_stack.append(char)\n        elif char == ')' and parens_stack:\n            current_group += char": 2.531820705534898e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def split_string(word):\n        return word[1:-1] if len(word) > 2 and word[0] == \"(\" and word[-1] == \")\" else word\n    return [split_string(word) for word in paren_string.split(\" \")]": 1.2912991607700158e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Get a list of the parentheses with their corresponding indexes.\n    parentheses_list = get_parentheses(paren_string)\n    # Initialize the list of output strings.\n    output_list = []\n    # For each parenthese index, check if the index is not the first index in the list.\n    # If it is not, then it must be the first index in the list.\n    # If it is": 7.88056138514936e-39, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_paren = ''\n    sep = []\n    for char in paren_string:\n        if char == '(' or char == ')':\n            if current_paren != '':\n                sep.append(current_paren)\n                current_paren = ''\n            if char == ')':\n                sep.append(char)\n            elif char == '(':\n                current_paren += '('": 1.9796249052668055e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    paren_string = paren_string.replace(\" \", \"\")\n    i = 0\n    paren_list = []\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_list.append(paren_string[i])\n        elif paren_string[i] == \")\":\n            if len(paren_list": 2.4423904165190996e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pairs = []\n    current = []\n    for c in paren_string:\n        if c == '(':\n            current.append(c)\n        elif c == ')':\n            pairs.append(''.join(current))\n            current = []\n        else:\n            raise ValueError(\"Invalid input: only () pairs allowed.\")\n    return pairs": 1.8145866123635624e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return ''.join(paren_string.split(' '))": 4.02095728893377e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    current_group = \"\"\n\n    for paren_type in paren_string:\n        if paren_type == \"(\":\n            groups.append(current_group)\n            current_group = \"\"\n        elif paren_type == \")\":\n            groups.append(current_group)\n            current_group = \"\"\n        else:\n            current_group += paren_type\n\n    if current": 2.4440007394995815e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # The function must return a list of strings\n    return []": 1.5192280239193342e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here.\n\n    # This approach will use a stack data structure and process the input string from right to left.\n    # The stack will store the index of the current open parenthesis. If the current character is a closed\n    # parenthesis, the stack will pop the top of the stack, the next open parenthesis, and close the current\n    # parenthesis. If the current character is an open parenthesis, the stack will push the index": 8.400497605085035e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    paren_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_stack.pop()\n        elif char == ' ' and len(paren_stack) > 0:\n            pass\n        else:\n            parentheses.append(char)\n\n    print": 4.605744908963415e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group_builder = []\n    for char in paren_string:\n        if char == '(':\n            group_builder.append(char)\n        if char == ')':\n            if len(group_builder) > 0:\n                groups.append(''.join(group_builder))\n                group_builder = []\n            else:\n                raise ValueError\n    return groups": 2.732506607490116e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_groups = []\n    groups = []\n    group = ''\n    for index in range(len(paren_string)):\n        if paren_string[index] != ' ':\n            group = group + paren_string[index]\n            if index == len(paren_string) - 1:\n                groups.append(group)\n        else:\n            if group:\n                groups.append(group": 3.6328694281999954e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    parens_counter = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            parens_counter += 1\n        elif char == \")\":\n            parens_counter -= 1\n        if parens_counter == 0:\n            parens.append(\"\")\n\n        else:\n            parens[-1] += char\n\n    return parens": 1.2809063219245848e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = list(paren_string)\n    return_list = []\n    count = 0\n    while len(paren_list) != 0:\n        if paren_list[0] == \"(\":\n            count += 1\n        elif paren_list[0] == \")\":\n            count -= 1\n        if count == 0:\n            return_list.append(\"\".join(paren_list[": 1.149994915346941e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    group = []\n    for char in paren_string:\n        if char == '(':\n            group.append(char)\n        elif char == ')':\n            if len(group) > 0:\n                paren_groups.append(''.join(group))\n                group = []\n            else:\n                return paren_groups\n        else:\n            group.append(char)": 8.027977864882432e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    results = []\n\n    return results": 3.881416292297224e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.strip()\n    parentheses = []\n    paren_stack = []\n    paren_group = []\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            if paren_stack and paren_stack[-1] == '(':\n                paren_stack.pop": 3.791048915647064e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return paren_string.split(')(')": 6.134293082295541e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your solution here\n    pass": 4.078210395348017e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and paren_stack:\n            paren_stack.pop()\n            if not paren_stack:\n                paren_groups.append('')\n    while paren_stack:\n        pare": 8.258622940164676e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parenthesis_stack = []\n    result = []\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            parenthesis_stack.append(i)\n        elif char == \")\":\n            last_opening_bracket = parenthesis_stack.pop()\n            if len(parenthesis_stack) == 0:\n                result.append(paren_string[last_opening_": 5.5487332467169896e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    grouped = []\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            i = index + 1\n            if paren_string[i] == '(':\n                while i < len(paren_string):\n                    if paren_string[i] == ')':\n                        grouped.append(paren_string[index:i + 1": 4.138112953818784e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Separate groups of parens into separate strings\n    parens_list = paren_string.split('(')\n    # Remove the empty strings from the list\n    parens_list = [p for p in parens_list if p != '']\n\n    # Iterate through the list and find all the '()' pairs\n    paren_list = []\n    for i in range(len(parens_list)):": 1.8543532169470502e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count = 0\n    current_group = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group = []\n            continue\n        if char == ')':\n            open_count -= 1\n            if open_count == 0:\n                groups.append(''.join(current_group))\n            continue\n        current_group.": 2.8765320276566885e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Separate the groups of nested parentheses\n    # and store them in a list of strings\n    paren_groups = []\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return paren_groups\n    else:\n        # Get the index of the first non-space character\n        paren_string = paren_string.strip()\n        while paren_string": 7.832336862768531e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_groups = []\n    left_paren = paren_string.find('(')\n    while left_paren != -1:\n        right_paren = paren_string.find(')', left_paren)\n        paren_groups.append(paren_string[left_paren:right_paren + 1])\n        paren_string = paren_string.": 1.2652433072484515e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    cur_string = ''\n    for char in paren_string:\n        if char == '(':\n            parens.append(cur_string)\n            cur_string = ''\n        elif char == ')':\n            parens.append(cur_string)\n            cur_string = ''\n        else:\n            cur_string += char\n    parens.append(cur_string)\n    return pare": 3.771639014980781e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result_list = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        # If open paren\n        if paren_string[i] == '(':\n            stack.append(i)\n        # If close paren\n        elif paren_string[i] == ')':\n            # Check to see if there is a non-matching pair\n            if len(stack)": 2.292786144043722e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    paren_stack = []\n    current_string = ''\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                output.append(current_string)\n                current_": 2.3007852200735603e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement this function\n    pass": 0.00017610890912611663, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    left_braces = []\n    for char in paren_string:\n        if char == '(':\n            left_braces.append(char)\n        elif char == ')':\n            if not left_braces:\n                result.append(char)\n            else:\n                left_braces.pop()\n    if not left_braces:\n        result.append(paren_string)": 2.0178206201419608e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE HERE\n    # Submit to the autograder as an argument of the function\n    # The output of this function is not important.\n    # That is, your submission should only return a list of strings\n    # or, if you want to do something more interesting, return a list of\n    # something else (a dictionary, a list, a tuple, whatever)\n    pass": 8.968176466079962e-56, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    group = []\n    open_parens = 0\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            open_parens += 1\n        elif c == ')':\n            open_parens -= 1\n            if open_parens == 0:\n                stack.append(c)\n                group.append(stack.pop())\n            elif open": 2.709538707822337e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    parens_stack.append(paren_string[0])\n    parens_stack.append(paren_string[1])\n    index = 2\n    result_list = []\n    while index < len(paren_string):\n        if parens_stack[-1] == '(':\n            if paren_string[index] == ')':\n                parens_stack.pop()": 2.2509901989078003e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[1:i] + paren_string[i + 1: -1] for i in range(1, len(paren_string) - 1)\n        if paren_string[i] == '(' and paren_string[i + 1] == ')'\n    ]": 3.210100238070701e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Replace pass with your code\n    # TODO: Return a list of the unique groups separated\n    return []": 2.1316380938729501e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    res = []\n    cur_str = ''\n\n    for i in paren_string:\n        if i == '(':\n            res.append(cur_str)\n            cur_str = ''\n        elif i == ')':\n            res.append(cur_str)\n            cur_str = ''\n        elif i == ' ':\n            cur_str += i\n        else:\n            cur_str += i": 1.8207855896779487e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = []\n    for char in paren_string:\n        if char == '(':\n            open_parens.append(char)\n        elif char == ')':\n            open_parens.pop()\n    return [char for char in paren_string if char == '(']": 5.030502965272757e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    counter = 0\n    braces = {')': '(', ']': '['}\n    open_paren = []\n    closed_paren = []\n    for char in paren_string:\n        if char == '(':\n            open_paren.append(char)\n            counter += 1\n            if counter == 2:\n                result.append(''.join(open_paren))\n                open": 1.6205512599690476e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        elif paren == ')':\n            if len(stack) == 0:\n                result.append(paren)\n            else:\n                stack.pop()\n        if len(stack) == 0:\n            result.append('')\n\n    return result": 1.049830643941681e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if paren_string == \"\":\n        return []\n\n    paren_list = []\n    curr_list = \"\"\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == \"(\":\n            paren_list.append(curr_list)\n            curr_list = \"\"\n        elif paren_string[index] == \")\":\n            pare": 1.3360458147156296e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    opener_count = 0\n    # First check if parens are balanced\n    for paren in paren_string:\n        if paren == '(':\n            opener_count += 1\n        elif paren == ')':\n            opener_count -= 1\n            if opener_count < 0:\n                return []\n    # If they are balanced, now add them to paren_": 1.6451689362936296e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    grouped_string = paren_string.replace(' ', '')  # remove any spaces from the string\n    last_closed_bracket = ''  # this will hold the last bracket that was closed\n    current_group = ''  # this will hold the current group as we iterate through it\n    list_of_groups = []  # this will hold our result\n\n    for i in range(len(grouped_string)):": 3.059889370620195e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    paren_stack = []\n    curr_stack = []\n    paren_string += ' '\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            if len(paren_stack) > 0:": 2.6577742850804647e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    separators = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            stack.append(i)\n        elif paren == ')':\n            separators.append(i)\n            if len(stack) == 1:\n                stack.pop()\n                separators.pop()\n    separators.append(len(paren_string))": 5.0883722603297646e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    # if the first item in the paren string is a '(', push it to the list\n    if paren_string[0] == '(':\n        paren_list.append(paren_string[0])\n\n    # if the last item in the paren string is ')' push it to the list\n    if paren_string[-1] == ')':\n        paren_": 2.726293778506305e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # return [paren_string[i:j] for i, j in zip(range(len(paren_string)), range(1, len(paren_string) + 1))]\n\n    # alternatively\n    return [paren_string[i:j] for i, j in zip(range(len(paren_string)), range(1, len(paren_string) + 1)) if\n            paren_string": 1.8326406181751376e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [''.join(paren_string.split(parenthesis)) for parenthesis in ('()', '()()')]": 8.265579390526088e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_stack = []\n    separated_strings = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and paren_stack:\n            separated_strings.append(''.join(paren_stack))\n            paren_stack.": 1.8232152090161284e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = paren_string.split(\")\")\n    p_stack = []\n    group_list = []\n    for p in paren_groups:\n        if p == '':\n            continue\n        if p.startswith(\"(\"):\n            p_stack.append(p)\n        if p.endswith(\")\"):\n            if not p_stack:\n                group_list.append('()')": 6.837083235840683e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Do not change this function.\n    pass": 3.829891962209227e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    for x in paren_string:\n        if x == '(':\n            paren_list.append('()')\n        elif x == ')':\n            paren_list.pop()\n    return paren_list": 1.3542463143498949e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(paren_string[i:i+2])\n        elif paren_string[i] == ')' and parens and parens[-1] == '(':\n            parens.pop()\n    return parens": 9.118898932762256e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    if paren_string == '()':\n        parens.append('')\n    else:\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                if paren_string[i-1] == '(':\n                    parens.append(paren_string[0:i])\n                else:\n                    parens.append(": 4.154240835793653e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_strs = []\n    paren_queue = []\n    paren_group = ''\n    for char in paren_string:\n        if char == '(' or char == ')':\n            if len(paren_queue) == 0:\n                paren_queue.append(char)\n            elif len(paren_queue) == 1:\n                paren_queue.append(char)\n            else:": 4.9802908477934585e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    while paren_string.count('()') == 0:\n        paren_string = paren_string.replace('(', '')\n        paren_string = paren_string.replace(')', '')\n        paren_string = paren_string.replace('(', '')\n    return paren_string.split('()')": 1.238836170686951e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # write your code here\n    paren_groups = []\n    paren_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            if paren_group:\n                paren_groups.append(paren_group)\n                paren_group = ''\n            paren_group += '('\n        elif char == ')':\n            if paren_group:\n                paren": 1.3986503337631256e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    string_stack = []\n    current_open_paren = ''\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(current_open_paren)\n            current_open_paren = '('\n        elif paren == ')':\n            open_paren = paren_stack.pop()\n            string_stack.": 9.697011696946317e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    open_brace_stack: List[str] = []\n    paren_group: List[str] = []\n    paren_groups: List[str] = []\n    is_open_brace = True\n\n    for paren in paren_string:\n        if is_open_brace:\n            if paren == \"(\":\n                open_brace_stack.append(paren)\n                paren_group.append": 3.4395978387194664e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    \"\"\"\n    Inputs:\n    paren_string: str\n    Outputs:\n    paren_list: list of strings, which contains the separate groups\n    \"\"\"\n    # create a counter\n    counter = 0\n    # create a list to store each set of paren_string\n    paren_list = []\n    # iterate over each character in paren_string\n    for i in range(len(paren_string": 4.389535851402599e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # if paren_string == '':\n    #     return []\n    # else:\n    #     if paren_string[0] == '(':\n    #         paren_list = paren_string.split('(')\n    #         return separate_paren_groups(paren_list[1])\n    #     elif paren_string[0] == ')':\n    #         return [paren_string": 3.7329765170446484e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    parens = []\n    p = 0\n    while p < len(paren_string):\n        if paren_string[p] == '(':\n            parens.append('(')\n        if paren_string[p] == ')':\n            if len(parens) == 0:\n                parens.append(')')\n            else:\n                parens.pop()": 1.62462572364434e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_groups = []\n    paren_string = paren_string.replace(' ', '')\n    start_index = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_groups.append(paren_string[start_index:i])\n            start_index = i + 1\n        elif paren_string[": 2.360007524768514e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_parentheses = [paren_string]\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            list_of_parentheses.append('')\n\n    for i in range(len(list_of_parentheses)):\n        for j in range(i + 1, len(list_of_parentheses)):": 4.809304043467113e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and len(paren_stack) > 0:\n            paren_stack.pop()\n        elif paren == ')' and len(paren_stack) == 0:\n            paren_list": 1.482645965544959e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = []\n    close_parens = []\n    for char in paren_string:\n        if char == \"(\":\n            open_parens.append(char)\n        elif char == \")\":\n            close_parens.append(char)\n\n    bracket_list = []\n    if len(open_parens) == 0:\n        return paren_string\n    else:\n        for i in": 3.17023452827601e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_string = paren_string.replace(\")\", \"\")\n    paren_string = paren_string.replace(\"(\", \"\")\n    i = 0\n    j = 1\n    temp = []\n    while i < len(paren_string):\n        if paren_string[i] == \"(\" and paren_string[j] ==": 2.4267842223913723e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Code this function.\n    pass": 1.4550295510438445e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) <= 1:\n        return [paren_string]\n    else:\n        left_paren_count = 0\n        left_paren_count_so_far = 0\n        left_paren_start = 0\n        result = []\n        for index, char in enumerate(paren_string):\n            if char == \"(\":\n                left_paren_count += 1\n                left": 1.5542763857150488e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    temp_str = ''\n    for i in paren_string:\n        if i in ('(', ')'):\n            if i == '(':\n                temp_str += i\n            elif i == ')':\n                parens.append(temp_str)\n                temp_str = ''\n            else:\n                raise ValueError('Unknown character in string')\n    return parens": 8.076371659028186e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = ''\n    parens_counter = 0\n\n    for char in paren_string:\n        if char == '(':\n            parens_counter += 1\n            if parens_counter > 1:\n                current_group += char\n        elif char == ')':\n            parens_counter -= 1\n            if parens_counter == 0:\n                paren_groups.": 8.036190451052647e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # List to store the groups\n    groups = []\n\n    # Index to keep track of current group\n    current_group = []\n\n    # Iterate over each character in the input string\n    for i, char in enumerate(paren_string):\n\n        # If the character is an open parenthesis, add it to the current group\n        if char == '(':\n            current_group.append(char)\n\n        # If": 3.595660195210715e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    list_of_groups = []\n    cur_group = []\n    for char in paren_string:\n        if char == '(':\n            cur_group.append(char)\n        elif char == ')':\n            if len(cur_group) == 0:\n                continue\n            elif len(cur_group) == 1:\n                list_of_groups.append(''.join(cur_group))\n                cur_": 8.105349513728302e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    curr_index = 0\n    paren_groups = []\n    while curr_index < len(paren_string):\n        if paren_string[curr_index] == \"(\":\n            next_index = curr_index + 1\n            start_index = next_index\n            while paren_string[next_index] != \")\":\n                next_index += 1\n            paren_groups.append(": 3.298898775936942e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n\n        if char == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(char)\n\n        if char == ' ':\n            stack = []\n\n    while len(": 2.0783929432309364e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_paren_groups = []\n    paren_group = []\n    for char in paren_string:\n        if char in \"()\":\n            paren_group.append(char)\n        else:\n            if len(paren_group) > 0:\n                current_paren_groups.append(\"\".join(paren_group))\n                paren_group = []\n    current_paren_groups.append": 1.2182542812941995e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    curr_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            curr_group += char\n        elif char == \")\":\n            paren_list.append(curr_group)\n            curr_group = \"\"\n    return paren_list": 3.842886510566955e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    group_length = 0\n    group = \"\"\n    for i in paren_string:\n        if i == \"(\":\n            group_length += 1\n        elif i == \")\":\n            group_length -= 1\n            if group_length == 0:\n                parens.append(group)\n                group = \"\"\n        else:\n            group += i\n\n    return parens": 2.512074101074795e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        paren = paren_string[i]\n        if paren in '()':\n            stack.append(paren)\n            i += 1\n        elif paren in '(':\n            stack.append(paren)\n        elif paren in ')':\n            if len": 8.559698995097546e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    stack_string = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_stack.pop()\n        else:\n            stack_string += char\n\n        if len(paren_stack) == 0:\n            yield stack_string\n            stack_string = ''": 8.221062946140908e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_index = 0\n    while paren_index < len(paren_string):\n        paren_counter = 0\n        start_index = paren_index\n        end_index = paren_index + 1\n        while end_index < len(paren_string):\n            if paren_string[end_index] == '(':\n                paren_counter += 1": 4.598279584406938e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def _parse_group(paren_string: str) -> List[str]:\n        \"\"\"Internal function that parses a single group\n\n        Args:\n            paren_string: A string containing a single group of nested parentheses\n\n        Returns:\n            A list containing the strings of the individual nested parentheses\n        \"\"\"\n\n        # This is a single-character string:\n        if paren_string in '()": 2.1130068941243878e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string_list = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if paren_stack:\n                paren_string_list.append(''.join(paren_stack))\n                paren_stack = []\n    if paren_stack": 1.7317707874903687e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if paren_string == '':\n        return []\n\n    paren_string = paren_string.strip()\n\n    if paren_string.startswith('('):\n        if paren_string.endswith(')'):\n            return [paren_string[1:-1]]\n\n    if paren_string.startswith(')'):\n        if paren_string.endswith('('):": 1.1311707925279078e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    # current_index = 0\n    # open_paren_count = 0\n    # while current_index < len(paren_string):\n    #     if paren_string[current_index] == \"(\":\n    #         open_paren_count += 1\n    #     elif paren_string[current_index] == \")\":\n    #         open_paren_count -= 1": 3.71855845947289e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the input string on \"(\" and \")\"\n    parens = paren_string.split('(')\n    print(parens)\n    return parens\n\n\nseparate_paren_groups('( ) (( )) (( )( ))')": 2.344027535975193e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here": 0.0003956393101441026, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []": 0.0002753766676343231, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '(')\n    paren_string = paren_string.replace(')', ')')\n    paren_string = paren_string.replace(' ', '')\n\n    stack = []\n    stack.append(paren_string[0])\n    count = 0\n    for char": 5.710400783111323e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n\n    # TODO: Write your function here\n\n    # strip out the parens and create new list of parens\n    new_parens = list(paren_string.replace('(', '').replace(')', ''))\n\n    # initialize index to 0\n    i = 0\n\n    # while i is less than the length of new_parens\n    while i < len(new_parens": 4.5482310462266725e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return ['()']\n    else:\n        paren_list = []\n        l_parens = 0\n        r_parens = 0\n        for i in paren_string:\n            if i == '(':\n                l_parens += 1\n            elif i == ')':\n                r_parens += 1\n            if l_parens == r_parens and l": 5.240914080944944e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_braces = 0\n    # loop through the string to find nested parens\n    for letter in paren_string:\n        if letter == '(':\n            open_braces += 1\n        elif letter == ')':\n            open_braces -= 1\n        if open_braces == 0:\n            result.append(paren_string[0:paren_string.index(letter)+": 1.1492592094232206e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n\n    group_start_index = 0\n    group_end_index = 0\n    groups = []\n\n    while open_count != 0:\n        while paren_string[group_start_index] != '('": 2.5711429337879553e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(paren_string):\n        j = i + 1\n        if paren_string[i] == \"(\":\n            while paren_string[j] != \")\":\n                j += 1\n            result.append(paren_string[i + 1:j])\n            i = j\n        i += 1\n    return result": 9.695583042857456e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(')', ')(')\n    stack = []\n    result = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                result.append(": 7.366104748394461e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return paren_string\n\n    string_list = paren_string.split(' ')\n    final_string_list = []\n\n    for string in string_list:\n        opening_par, closing_par = '', ''\n        for i, character in enumerate(string):\n            if character == '(':\n                opening_par = string[:i + 1]\n            elif character ==": 9.46581670211493e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string.replace(paren, '').replace(paren * 2, '') for paren in paren_string if paren in ['(', ')']]": 7.294183575120155e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    p_list = []\n    op_counter = 0\n    temp_string = ''\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            op_counter += 1\n            temp_string += char\n        elif char == ')':\n            op_counter -= 1\n            if op_counter == 0:\n                p_list.append(temp_string)\n                temp_string =": 3.695806984853058e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    lst = []\n    temp_lst = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            temp_lst.append(paren_string[i])\n        if paren_string[i] == ')' and len(temp_lst) > 0:\n            temp_lst.pop()\n            if len(temp_lst": 4.8834629494228445e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE HERE": 0.0017620520961532525, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    separator_index_list = []\n    for index, paren in enumerate(paren_string):\n        if paren == '(':\n            separator_index_list.append(index)\n\n    for index, _ in enumerate(separator_index_list):\n        if index < len(separator_index_list) - 1:\n            if separator_index_list[index + 1] - separator": 4.473233919525677e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups: List[str] = []\n    # Iterate through the string to find the groups\n    while True:\n        # Check if the input string has open paren\n        if paren_string.find('(') == -1:\n            break\n        # Find the index of the first and last open paren\n        first_index = paren_string.find('(')\n        last_index = paren_string.rfind('": 7.506693225815003e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = ''\n    paren_list = []\n\n    for char in paren_string:\n        if char == '(':\n            if paren_group:\n                paren_list.append(paren_group)\n                paren_group = ''\n\n        elif char == ')':\n            if paren_group:\n                paren_list.append(paren_group)\n                paren_": 5.518467568154355e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    current_group_string = \"\"\n    paren_group_list.append(current_group_string)\n    for c in paren_string:\n        if c == \"(\":\n            if current_group_string == \"\":\n                current_group_string = \"\"\n                paren_group_list.append(current_group_string)\n        elif c == \")\":\n            if": 9.111206359631596e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_stack = []\n\n    for char in paren_string:\n        if char in '(':\n            paren_stack.append('(')\n        elif char in ')':\n            if paren_stack and paren_stack[-1] == '(':\n                paren_stack.pop()\n            else:\n                paren_stack.append(')')\n\n    if paren_": 3.356911537884265e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_chars = []\n    for char in paren_string:\n        if char == '(':\n            paren_chars.append('(')\n        elif char == ')':\n            paren_chars.append(')')\n        else:\n            paren_chars.append(' ')\n    return [paren_chars[i:j] for i, j in zip(range(len(p": 1.3789375202549057e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: write this\n    return [paren_string]": 2.827478446777309e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_list.append(i)\n        elif i == \")\":\n            if paren_list:\n                paren_list.pop()\n            else:\n                return []\n    if paren_list:\n        return []\n    else:\n        return paren_list": 7.826333629517815e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_string = paren_string.replace(' ', '')\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append('')\n        else:\n            parens[-1] += paren_string[i]\n    return parens": 3.2504929710679075e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Initialize empty list\n    nested_list = []\n\n    # Initialize empty string\n    parenthesis_string = \"\"\n\n    # Iterate over the input string\n    for i in paren_string:\n\n        # Add the character to the parenthesis string\n        parenthesis_string += i\n\n        # If the parenthesis string contains an open parenthesis, append it to the nested list\n        if i == \"(\":": 4.863496009085028e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    open_parens = 0\n    i = 0\n    group_index = 0\n    groups = []\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_parens += 1\n        elif paren_string[i] == ')':\n            open_parens -= 1\n\n        if open_parens == 0:\n            groups.append(p": 4.2105018836571854e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output_strings = []\n    paren_stack = []\n    paren_str = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_str += char\n            output_strings.append(paren_str)\n            paren_str = ''\n            if len(paren_stack) > 1": 3.688736035948117e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    open_paren_count = 0\n    paren_string = paren_string.replace(\" \", \"\")\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            open_paren_count += 1\n            if open_paren_count == 1:\n                string = \"\"\n            else:\n                string += paren_string[": 4.3995646931946926e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    level = 0\n    parens.append(paren_string[0])\n    for i in range(1, len(paren_string)):\n        if paren_string[i] == '(':\n            level += 1\n        elif paren_string[i] == ')':\n            level -= 1\n        if level == 0:\n            parens.append(paren_string[i": 3.459165157502869e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # O(n) where n = len(paren_string)\n    # Space complexity is O(n) as we are storing all of the open parenthesis\n    open_paren = 0\n    paren_list = []\n\n    for paren in paren_string:\n        if paren == '(':\n            open_paren += 1\n        elif paren == ')':\n            open_paren -= 1": 2.6064029355760253e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    opening_braces = [\"]\", \"}\", \")\"]\n    closing_braces = [\"[\", \"{\", \"(\"]\n    ret = []\n    for i, char in enumerate(paren_string):\n        if char in opening_braces:\n            ret.append([])\n        if char in closing_braces:\n            for j, group in enumerate(ret):\n                if char == closing_braces[": 6.899277774567364e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code here\n\n    return [paren_string]": 5.070749394444701e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # noinspection PyUnboundLocalVariable\n    parens = []\n    parens.append(paren_string)\n    i = 0\n    while i < len(parens):\n        j = i + 1\n        while j < len(parens):\n            if parens[i].find(parens[j]) > -1:\n                parens.append(parens[i][:parens[j].find(pare": 1.0006846294011728e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    parens = []\n    for paren in paren_string:\n        if paren == '(':\n            parens.append(paren)\n        elif paren == ')':\n            if len(parens) != 0:\n                parens.pop()\n            else:\n                paren_groups.append(''.join(parens))\n                parens = []\n    paren": 6.860260584834795e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n    open_paren = [index for index, paren in enumerate(paren_string) if paren == '(']\n    if not open_paren:\n        return [paren_string]\n    paren_groups = []\n    open_paren.insert(0, 0)\n    close_paren = [index for index, paren in enumerate(": 2.9196570958743155e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    if paren_string[0] == '(':\n        paren_list.append('(')\n\n    for paren in paren_string[1:]:\n        if paren == ')':\n            if paren_list[-1] != '(':\n                paren_list.append(paren)\n\n        if paren == '(':\n            paren_list": 5.2208820575255336e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = list(paren_string)\n    paren_list.reverse()\n    split_paren_list = []\n    while paren_list:\n        if paren_list[-1] == '(':\n            split_paren_list.append(paren_list.pop())\n        elif paren_list[-1] == ')':\n            split_paren_list.append(paren": 2.2480057182191647e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: complete this function\n    return None": 1.4169380139673975e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # initialize result list\n    result_list = []\n    # initialize open brace counter\n    open_brace_count = 0\n\n    # loop over each character in the string\n    for idx, char in enumerate(paren_string):\n        # if char is open brace, increment open brace counter\n        if char == '(':\n            open_brace_count += 1\n        # if char is close brace, decrement open brace counter": 6.758366669593467e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return None": 3.350636861646843e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if len(current_group) > 0:\n                current_group.pop()\n        else:\n            if len(current_group) == 0:\n                current_group.append(char)\n    if len(current_": 3.6064615947752224e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here.\n    if paren_string[0] != \"(\":\n        raise ValueError(\"The string must begin with an opening parenthesis\")\n    # Flip the string to the left so we can track the location of the matching parens\n    string = paren_string[::-1]\n    # A list to hold our groups\n    groups = []\n    # A flag to track the current open paren": 1.601408897110199e-45, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_stack = []\n    i = 0\n\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n\n        if paren_string[i] == ')':\n            if len(paren_stack) > 0:\n                result.append(paren_string[paren_stack.pop": 3.3657407854996943e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Initialize an empty list to hold the output list\n    paren_group_list = []\n\n    # Initialize a variable to keep track of the index for the current paren string being processed\n    paren_group_index = 0\n\n    # Loop through the string until the index is at the end of the string\n    while paren_group_index < len(paren_string):\n\n        # Get the current character and": 2.0741103225034565e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_group = ''\n    for char in paren_string:\n        if char == '(':\n            if paren_group:\n                paren_groups.append(paren_group)\n                paren_group = ''\n            paren_group += '('\n        elif char == ')':\n            if paren_group:\n                paren_groups.append(paren_": 1.9996159043756483e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n    elif paren_string == \" \":\n        return []\n    elif paren_string == \"()\":\n        return [\"()\"]\n    elif paren_string == \"(())\":\n        return [\"()()\"]\n    elif paren_string == \"(( ))\":\n        return [\"()()\"]\n    elif paren_string == \"(( ))()\":": 1.7363931252367358e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                current_group += char\n                paren_stack.pop()\n            else:\n                return []\n        else:\n            current_group += char\n    if paren_": 6.535972972093138e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[i + 1: j] for i, j in enumerate(paren_string) if i != paren_string.index('(')]": 7.247776935749982e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n    paren_string_list = paren_string.split(\" \")\n    paren_string_list_paren = [paren_string for paren_string in paren_string_list if paren_string != \"\"]\n    paren_string_list_paren_split = [paren_string_list_paren[0]]\n    for i in": 1.0835162557617138e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # You can use list slicing to iterate through a string\n    # output = [ ]\n    # for _ in range(len(paren_string)):\n    #     pass\n\n    # Use split to split the input string into individual tokens.\n    # Ignore all spaces, only split on ( and )\n    # Each token must be an individual group of parentheses ( )\n    # Ignore any empty strings\n\n    return []": 3.443010898937305e-57, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    current_count = 0\n    max_count = 0\n    output = []\n    for char in paren_string:\n        if char == '(':\n            current_count += 1\n        elif char == ')':\n            current_count -= 1\n\n        if current_count > max_count:\n            output.append('')\n            max_count = current_count\n        elif current_count == max_count:": 9.37059588828141e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ## your code here\n    # return []\n\n    ## test cases\n    assert isinstance(paren_string, str)\n    assert paren_string != ''\n\n    return paren_string.split('(')": 1.0462721678475148e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert paren_string.count('(') == paren_string.count(')'), 'Parentheses are not balanced!'\n    stack = []\n    res = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if len(": 8.361138930088845e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            result.append(paren_string[0:i])\n            result.append(paren_string[i+1:])\n            return result\n    return result": 2.283366280567094e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = list(paren_string)\n    open_paren = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren.append(i)\n        elif char == ')':\n            # Using pop() instead of remove() will remove the last index in the list\n            open_paren.pop()": 1.7868421759044643e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    paren_list = list(paren_string)\n    i = 0\n    for i in range(len(paren_list)):\n        if paren_list[i] == '(':\n            paren_list[i] = '('\n            output.append(paren_list[i:])\n        elif paren_list[i] == ')':\n            paren_list[i": 2.643891164664665e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement this function\n    pass": 8.468673909122975e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_counter = 0\n\n    if paren_string.find('(') != -1:\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                paren_counter += 1\n            elif paren_string[i] == ')':\n                paren_counter -= 1\n            if paren_counter": 6.674974750876202e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Use recursion to iterate over the string and create a list of the grouped strings\n    # if the parentheses aren't balanced, then return an empty list\n    if not paren_string:\n        return []\n    elif paren_string[0] != '(' or paren_string[-1] != ')':\n        return [paren_string]\n    else:\n        inner_list = []": 6.420459669683395e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # base case: no open parentheses\n    if paren_string == '':\n        return []\n    # base case: a single open paren\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    else:\n        # the first open paren index\n        idx_of_first_open = paren_string.index('('": 6.0047288047732145e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    lst = []\n    i = 0\n    start = 0\n    stack = []\n\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:": 1.5935142140947302e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string = paren_string.replace(' ', '')\n    if len(paren_string) < 2:\n        return [paren_string]\n    open_count = paren_string.count('(')\n    close_count = paren_string.count(')')\n\n    if open_count == close_count:\n        return [paren_string]\n\n    if open_count > close_": 6.013281255267112e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_list.append(paren_string[0:i+1])\n        elif paren_string[i] == ')':\n            paren_list.append(paren_string": 2.911431182446496e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    parens = []\n\n    for c in paren_string:\n        if c == '(':\n            parens.append(c)\n        elif c == ')':\n            if parens:\n                parens.pop()\n            else:\n                parens.append(c)\n\n    if parens:\n        result.append(separate_paren_groups(c) for c in pare": 1.0144330150945385e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Check for no parens\n    if paren_string == '()':\n        return ['()']\n    else:\n        # Create a stack to hold unpaired paren groups\n        unpaired_parens = []\n        # Iterate through the string\n        for paren in paren_string:\n            # If the current paren is an open paren, push it to the stack\n            if paren == '(':": 3.0217138360947022e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parens = []\n    paren_stack = []\n\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            paren_stack.pop()\n        elif i == ' ':\n            continue\n        else:\n            parens.append(i)\n\n    ## Handle the case where the string doesn't end with": 6.1057035407938e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_count = 0\n    start_index = 0\n    paren_group = \"\"\n\n    for index in range(len(paren_string)):\n        if paren_string[index] == '(':\n            paren_count += 1\n        elif paren_string[index] == ')':\n            paren_count -= 1\n\n        if paren_count == 0:": 4.851785167577062e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    # use a stack to store the open paren\n    stack = []\n\n    for i in range(len(paren_string)):\n        # If the open parenthesis\n        if paren_string[i] == \"(\":\n            stack.append(paren_string[i])\n        # If the close parenthesis\n        elif paren_string[i] == \")\":\n            # and": 3.678585400781206e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    if len(paren_string) == 1:\n        return [paren_string]\n    group = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                group.append(char)\n            else": 3.7664780356642633e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    paren_stack = []\n\n    for parenthese in paren_string:\n        if parenthese == '(':\n            paren_stack.append(parenthese)\n        else:\n            if paren_stack:\n                paren_group.append(paren_stack.pop())\n            else:\n                return []\n\n    return paren_group": 3.94577403176476e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    start_pos = 0\n    end_pos = 0\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            start_pos = i\n\n        elif paren_string[i] == ')' and end_pos == 0:\n            end_pos = i\n            paren_groups.append(paren_string[": 4.2225814941432175e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                parens.append(')')\n        elif char != ' ':\n            parens.append(char)\n    return parens": 3.778031912115044e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if paren_stack:\n                result.append(paren_stack.pop())\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n    return result": 7.406359021920375e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    p = ''\n    for i in paren_string:\n        if i == '(':\n            p += i\n        if i == ')' and len(p) > 0:\n            if p[-1] == '(':\n                parentheses.append(p[:-1])\n                p = ''\n            else:\n                parentheses.append(p)\n                p = ''\n    return": 1.0072978058036882e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[stack[-1][1] + 1 : i + 1]\n        for i, c in enumerate(paren_string)\n        if c == '('\n        for stack in stack, stack[-1]\n        if stack[-1][1] == i - 1 and stack[-1][0] == '('\n    ]": 2.7695973951515834e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    open_braces = 0\n    open_braces_list = []\n    close_braces = 0\n    close_braces_list = []\n    return_list = []\n    for i in paren_string:\n        if i == \"(\":\n            open_braces += 1\n            open_braces_list.append(i)\n            if open_braces == 2:\n                return_list.append(\"": 1.4808065427545689e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return None": 0.0017679365415059114, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code here": 0.0015195305652252699, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    start = 0\n    paren_group = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            if not paren_stack:\n                start = i + 1\n                paren_group.append(": 2.807467592403552e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    final_result = []\n    temp = \"\"\n    count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            count += 1\n            temp += paren_string[i]\n        elif paren_string[i] == \")\" and count == 0:\n            final_result.append(temp)\n            temp = \"\"\n        elif paren_": 3.730209988343186e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    parens_output = []\n    for paren in paren_string:\n        if paren == '(':\n            parens_stack.append(paren)\n        elif paren == ')':\n            parens_stack.pop()\n        elif paren == ' ':\n            if parens_stack:\n                parens_stack.pop()\n            continue\n        else:\n            return": 6.732006650428717e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '( ')\n    paren_string = paren_string.replace(')', ' )')\n\n    paren_string = '(' + paren_string + ')'\n\n    paren_string_list = paren_string.split": 3.158112253592998e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace('(', ' ').replace(')', ' ')\n    paren_string_list = paren_string.split(' ')\n    res = []\n    for x in paren_string_list:\n        if x == '':\n            continue\n        if '(' in x:\n            res.append(x)\n        elif ')' in x:\n            res.append(": 3.2939324114889156e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack: List[str] = []\n    current: str = \"\"\n    paren_chars: List[str] = ['(', ')']\n\n    for char in paren_string:\n        if char in paren_chars:\n            if char == '(':\n                stack.append(char)\n            else:\n                if len(stack) == 0:\n                    current += char\n                else:\n                    stack.": 1.225413458186369e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = paren_string.split(' ')\n    result_list = []\n    # result_list = []\n    # for i in paren_list:\n    #     if '(' in i:\n    #         result_list.append(i)\n    for i in paren_list:\n        if '(' in i:\n            result_list.append(i)\n    for i in paren_list": 6.951374652254146e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement this function\n    return []": 6.838624575195674e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_result = []\n    # loop through the string, starting at position 0\n    for pos, char in enumerate(paren_string):\n        # for each character, if we see a left paren, add it to the stack\n        if char == \"(\":\n            paren_stack.append(char)\n        # if we see a right paren, look at the last char in the": 4.3501948829721435e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    count = 0\n    # counts the open parentheses. \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n\n        if count == 0:\n            # if count reaches zero, then it's time to create a group\n            group = ''\n            for char in paren_string:\n                if char == ')':": 9.490977682138258e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    curr_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                curr_group = curr_group + char\n                if len(stack) == 1:\n                    stack.pop()\n                    yield curr_group\n                    curr_group = ''\n                else:": 6.381584655623463e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_group_to_string = []\n    open_group = []\n    for x in paren_string:\n        if x == '(':\n            open_group.append(x)\n        elif x == ')':\n            if len(open_group) > 0:\n                open_group.pop()\n            else:\n                list_group_to_string.append('(')\n                list_group_to_string": 1.0282376134694633e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # If the string is empty return an empty list\n    if not paren_string:\n        return []\n\n    # Initialize an empty list to return\n    paren_list = []\n\n    # Initialize a stack that holds the paren index\n    paren_stack = []\n\n    # Loop through the string\n    for i in range(len(paren_string)):\n        # If the paren is '(',": 2.828554216562587e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # No matter what your input is, you are going to end up with a string that you can split\n    # based on parentheses.\n    # There will be multiple groups of parentheses.\n    # Separate each group into its own string.\n    # You are not allowed to use loops, so use a list or generator expression, or any other method to\n    # help you here.\n    # However, do not use string methods or the": 5.073681585113065e-66, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n\n    paren_stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            if paren_stack:\n                current_group += char\n                paren_stack.append(current_group)\n                current_group = ''\n            else:\n                paren_stack.append(char)\n        elif char": 1.7246595261488523e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: implement me\n    return []": 3.157305898674722e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    result = []\n    for idx in range(len(paren_string)):\n        if paren_string[idx] == '(':\n            paren_stack.append(idx)\n        elif paren_string[idx] == ')':\n            if len(paren_stack) == 1:\n                result.append(paren_string[paren_stack[0]: idx +": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    sep_list = []\n    paren_stack = []\n    paren_count = 0\n    for char in paren_string:\n        if char == \"(\":\n            paren_count += 1\n            paren_stack.append(char)\n        elif char == \")\":\n            if paren_count > 0:\n                paren_stack.pop()\n                paren_count -= 1\n            else:": 3.2740403978597524e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return ['()' if paren_string == '()' else paren_string]": 6.841454307764861e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    num_parens = 0\n    current_string = \"\"\n\n    for paren in paren_string:\n        if paren == '(':\n            num_parens += 1\n            current_string += \"(\"\n\n        if paren == ')':\n            num_parens -= 1\n            current_string += \")\"\n            if num_parens == 0:\n                paren": 1.874632850964066e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    left_pars = 0\n    right_pars = 0\n    parens = []\n    for char in paren_string:\n        if char == '(':\n            left_pars += 1\n        elif char == ')':\n            right_pars += 1\n        elif right_pars == left_pars:\n            parens.append(''.join(parens))\n            parens.append(char)": 3.9967393380032736e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ret = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(paren_string[i])\n        elif paren_string[i] == ')' and len(paren_stack) > 0:\n            paren_stack.pop()\n        elif paren_string[": 1.1417185723558024e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string_list = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_string_list.append(\"(\")\n        elif i == \")\":\n            if len(paren_string_list) > 0 and paren_string_list[len(paren_string_list) - 1] == \"(\":\n                paren_string_list.pop()\n            else": 1.7437546263755078e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n\n    if paren_string.count('(') != paren_string.count(')'):\n        raise ValueError(\"Unbalanced parentheses\")\n\n    if paren_string == \"\":\n        return []\n\n    paren_count = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            paren_count += 1\n        elif char ==": 1.9419152490063756e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    current_group = ''\n    for paren in paren_string:\n        if paren in '()':\n            current_group += paren\n        elif paren == ' ':\n            if len(current_group) > 0:\n                parens_stack.append(current_group)\n                current_group = ''\n        else:\n            if len(parens_stack) > 0 and pare": 7.585744466817706e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    curr_open_paren_count = 0\n    new_pars = []\n    for char in paren_string:\n        if char == '(':\n            curr_open_paren_count += 1\n        elif char == ')':\n            curr_open_paren_count -= 1\n\n        if curr_open_paren_count == 0:\n            new_pars.append(paren": 1.4760367973877763e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # We need to treat the parens as a stack\n    stack = []\n    output = []\n    paren_level = 0\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            paren_level += 1\n        elif char == \")\":\n            if paren_level > 0:\n                stack.pop()\n                paren_level -= 1\n                # Once": 1.1797955814494158e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # REPLACE THIS LINE WITH YOUR CODE": 3.5869900883936443e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_strings: List[str] = []\n    current_string = ''\n    current_open_bracket = 0\n    # Go through the string and see what types of braces are in there.\n    for character in paren_string:\n        if character == '(':\n            current_open_bracket += 1\n        elif character == ')':\n            current_open_bracket -= 1\n        elif current": 2.879795547600827e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    i = 0\n    while i < len(paren_string):\n        paren_string = paren_string.replace(\"(\", \" (\", 1)\n        paren_string = paren_string.replace(\")\", \" )\", 1)\n\n        if paren_string == \"\":\n            break\n        i += 1\n\n    paren_list = paren_string.": 2.145851194448871e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_string = paren_string.replace(' ', '')\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            paren_stack.pop()\n\n    paren_stack.reverse()": 3.0449023214564034e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here. Don't change the following line.\n    return separate_paren_groups_helper(paren_string, 0)": 8.776979256355383e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(\"(\")\n        elif paren == \")\":\n            paren_list.append(paren_stack.pop())\n    return paren_list": 7.018328567048251e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    groups = []\n\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        elif paren == ')' and stack:\n            groups.append(stack.pop())\n\n    while stack:\n        groups.append(stack.pop())\n\n    return groups": 1.5583315502137685e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    nested = []\n\n    for paren in paren_string:\n        if paren == \"(\":\n            nested.append(paren)\n        elif paren == \")\":\n            if nested:\n                parens.append(\"\".join(nested))\n                nested = []\n    if nested:\n        parens.append(\"\".join(nested))\n    return parens": 1.4987252380508664e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO - Implement this function\n    if paren_string.strip() == \"\":\n        return [\"\"]\n    open_paren_count = 0\n    open_paren_locations = []\n    for i, paren in enumerate(paren_string):\n        if paren == \"(\":\n            open_paren_count += 1\n            open_paren_locations.append(i)\n        elif": 9.776030084014347e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Fill this in with the solution.\n    pass": 3.253071988595784e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Add code here\n    return []": 2.4913900984609007e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    s = \"\"\n    for i in paren_string:\n        if i == '(':\n            s += i\n        elif i == ')':\n            if len(s) > 0:\n                return_list.append(s)\n                s = \"\"\n            else:\n                return_list.append(s)\n                s = \"\"\n    return_list.append(s)\n    return return": 3.62138977219964e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    stack = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            groups.append(\"\".join(stack))\n            stack.pop()\n    return groups": 1.1657351906028002e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    string = ' '\n    for i in paren_string:\n        if i == '(':\n            string += '('\n        elif i == ')' and string[-1] == '(':\n            string = string[:-1]\n        elif i == ')' and string[-1] != '(':\n            paren_list.append(string)\n            string = ' '\n        else:": 5.325712966433508e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"\".join(x).strip() for x in re.split('\\(\\)|\\(\\)', paren_string)]": 1.4107136275889216e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    for item in paren_string.split():\n        if paren_string[0] == '(' and paren_string[-1] == ')':\n            paren_list.append(item)\n\n    return paren_list": 7.522133147237369e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_stack = []\n    paren_list = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                continue\n            else:\n                paren_stack.pop()": 8.116697486014895e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    open_paren_count = 0\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_count += 1\n\n        if open_paren_count > 1 and paren_string[i] == ')':\n            open_paren_count -= 1\n\n        if open_paren": 2.117829705855894e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    temp = \"\"\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            output.append(temp)\n            temp = \"\"\n        elif paren_string[i] == \")\":\n            output.append(temp)\n            temp = \"\"\n        elif paren_string[i] == \" \":\n            pass\n        else:": 1.7993695338259176e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert isinstance(paren_string, str), f'Input to {separate_paren_groups.__name__} should be a string'\n    return_list = []\n    # A list to return a string for\n    parenthesis_stack = []\n    # A stack to keep track of open parentheses\n    for c in paren_string:\n        # Check for opening parenthesis\n        if c == '(':\n            #": 2.4704127966656733e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def _paren_to_list(paren_string: str) -> List[str]:\n        paren_string_list: List[str] = [paren_string[0]]\n        for paren in paren_string[1:]:\n            if paren == '(':\n                paren_string_list.append(paren)\n            elif paren == ')':\n                if len(paren_": 4.205824625532903e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for c in paren_string:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if stack:\n                result.append(stack.pop())\n    return result": 1.3051492624578053e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Add your code here": 0.0002264300161504212, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n    paren_list.append(paren_string[0])\n    paren_list.append(paren_string[2:])\n    if len(paren_list) == 1:\n        return paren_list\n    elif len(paren_list) > 1:\n        return separate_paren_groups(paren_list[1])": 9.862608652686744e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Create a stack.\n    stack = []\n\n    # Split the input string by brackets.\n    for char in paren_string:\n        if char == '(':\n            # If it's a left parenthesis, add it to the stack.\n            stack.append(char)\n        elif char == ')':\n            # If it's a right parenthesis, start popping from the stack until the open parenthesis": 1.2230710937452085e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string_list = []\n    sub_paren_string = ''\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_string_list.append(sub_paren_string)\n            sub_paren_string = ''\n        elif paren == ')':\n            paren_string_list.append(sub_paren_string)": 2.812685433888187e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here...": 9.082087854229545e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    group = ''\n    list_of_paren_groups = []\n    paren_list = list(paren_string)\n\n    for i in paren_list:\n\n        if i == '(':\n            group = group + i\n\n        elif i == ')':\n            list_of_paren_groups.append(group)\n            group = ''\n\n        else:\n            group = group + i": 1.0660989661101522e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    open_paren = ''\n    paren_list = []\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            open_paren += paren_string[index]\n            paren_stack.append(open_paren)\n        elif paren_string[index] == ')':\n            if len": 1.5658022316813147e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    answer = []\n\n    # Solution goes here\n\n    return answer": 2.0486333691920833e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_list = []\n    inner_list = []\n    for i in paren_string:\n        if i == '(':\n            inner_list.append(i)\n        elif i == ')' and inner_list:\n            new_list.append(''.join(inner_list))\n            inner_list = []\n        else:\n            new_list.append(i)\n    return new_list": 2.3081326252628732e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Start a list for the output\n    final_output = []\n\n    # Start an empty list for nested group\n    nested_group = []\n\n    # For every character in the input string\n    for character in paren_string:\n\n        # If the current character is a (\n        if character == \"(\":\n\n            # If the current character is a (\n            if nested_group:\n                # Append the current nested group": 2.9473185977628704e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Your code goes here\n    return []": 1.2233172177475724e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code here\n    return []": 5.117733176254612e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert isinstance(paren_string, str)\n    assert paren_string.count('(') == paren_string.count(')')\n\n    ## YOUR CODE HERE\n    if paren_string.startswith('('):\n        return [paren_string[1:]] + separate_paren_groups(paren_string[2:])\n    else:\n        if paren_string.startswith": 4.255750581870604e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # todo: your code goes here\n    pass": 7.889589198357538e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    # TODO: Write code to process parens_str and add to groups\n    return groups": 6.896181345622156e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n    # Create a stack to keep track of open parentheses\n    stack = []\n    # Loop through each character in the string\n    for i in paren_string:\n        # If the character is an open parenthesis, add it to the stack\n        if i == '(':\n            stack.append(i)\n        # If the character is a closed parenthesis,": 1.2979706299676374e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_strings = []\n    paren_string_builder = []\n\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if len(paren_stack) == 0:\n                paren_strings.append(\"\".join(paren_string_builder))\n                paren_string": 5.3722666091880234e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    # if paren is open, add paren to paren\n    # if paren is closed, check if it is the first close, if so, add paren to paren\n    # if it is not the first close, check if it is a nested group, if so, add paren to paren\n    # if it is not nested, add paren to paren\n    # if paren is not an open or": 4.6193222891971415e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n\n    for ch in paren_string:\n        if ch == \"(\":\n            paren_stack.append(ch)\n        elif ch == \")\":\n            if paren_stack:\n                paren_list.append(paren_stack.pop())\n\n    return paren_list": 2.020053932777949e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # your code here\n    # def find_end(paren_string):\n    #     i = 0\n    #     n = 0\n    #     while i < len(paren_string):\n    #         if paren_string[i] == '(':\n    #             n += 1\n    #         elif paren_string[i] == ')':\n    #             n -= 1\n    #         if n ==": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_list.append('(')\n\n    if paren_stack:\n        for elem in pare": 9.293519233151985e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    l_paren_count = r_paren_count = 0\n    if paren_string[0] == '(':\n        l_paren_count += 1\n    if paren_string[-1] == ')':\n        r_paren_count += 1\n    if l_paren_count == r_paren_count:\n        if paren_string.count('(') == paren_string.count": 5.247954812349268e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    if paren_string.startswith('(') and paren_string.endswith(')'):\n        paren_groups.append(paren_string[1:-1])\n    else:\n        print('The parentheses are not balanced.')\n\n    if '(' in paren_string and ')' in paren_string:\n        string_before_open = paren_string": 2.78764011215092e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    current_group = []\n    open_group = False\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if open_group:\n                current_group.append(paren_string[i])\n            else:\n                open_group = True\n        elif paren_string[i] == ')':\n            if open_": 2.458136726399272e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code here\n    # return list of strings\n    return []": 1.1514152450547432e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create a stack of parentheses\n    # create a list to store the output\n    # loop through the input string\n        # if the current character is a left parenthesis, push it onto the stack\n        # if the current character is a right parenthesis, pop the stack and add it to the list\n        # if the current character is not a parenthesis, just add it to the output\n    # return the list\n    stack = []\n    output": 1.2338445107367773e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    result = []\n\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                result.append(''.join(stack))\n                stack.pop()\n            else:\n                stack.append(i)\n\n    if stack:\n        result.append(''.join(stack))\n\n    return": 2.7060577475945015e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    sep_list = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            count = 1\n            for j in range(i + 1, len(paren_string)):\n                if paren_string[j] == \"(\":\n                    count += 1\n                elif paren_string[j] == \")\":\n                    count -= 1": 4.144271625894329e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # List of group strings\n    groups = []\n    # List of open and closed parentheses\n    parentheses = []\n    for char in paren_string:\n        # If an open parentheses is encountered, add it to the parentheses list\n        if char == '(':\n            parentheses.append(char)\n        # If a closed parentheses is encountered, pop it from the parentheses list and add it": 6.954380179661797e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # PLEASE USE RECURSION.\n    # HINT: Remember the index of the current open parenthesis.\n    # HINT: Remember the current string.\n    # HINT: Remember the index of the current open parenthesis.\n    # HINT: Remember the current string.\n    # HINT: Remember the index of the current open parenthesis.\n    # HINT: Remember the current string.\n    # HINT: Remember the index of": 3.724516150904425e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # if paren_string == '':\n    #     return ['']\n    # result = []\n    # parens = 0\n    # i = 0\n    # while i < len(paren_string):\n    #     if paren_string[i] == '(':\n    #         parens += 1\n    #     elif paren_string[i] == ')':\n    #         parens -= 1": 1.170347948931311e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_group = []\n    parenthesis = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parenthesis += 1\n            if parenthesis == 1:\n                paren_group.append(paren_string[i])\n            else:\n                paren_group.append('(')\n        elif paren": 3.0530569463615582e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_substring = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_substring:\n                paren_stack.append(current_substring)\n                current_substring = \"\"\n            paren_stack.append(char)\n        elif char == \")\":\n            if current_substring:\n                paren_stack.append(current_": 3.0286418713204783e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_strings = []\n    for paren_string_index in range(0, len(paren_string)):\n        if paren_string[paren_string_index] == \"(\":\n            start_of_paren_group = paren_string_index + 1\n            if paren_string[paren_string_index + 1] == \"(\":\n                paren_strings.append(paren_": 2.3084817042165836e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    # Create a list to store all the seperated groups\n    # Loop through the input string\n    # if current character is ( add to list\n    # elif current character is ) and last character in list is ( remove from list\n    # else do nothing\n    # Return list\n\n    paren_list = []\n    # for character in paren_string:\n    #     if character == '(':\n    #": 6.073668929709092e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"()\":\n        return paren_string\n    else:\n        return [parene_group for parene_group in paren_string.split(')(') if parene_group != '']": 1.9366089910444067e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    final_list = []\n    while paren_string.replace(' ', ''):\n        final_list.append(paren_string)\n        paren_string = paren_string.replace('()', '')\n        paren_string = paren_string.replace('()', '')\n    return final_list": 4.419954420975276e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_list = []\n    closed_paren_list = []\n    for char in paren_string:\n        if char == '(':\n            open_paren_list.append(char)\n        elif char == ')':\n            closed_paren_list.append(char)\n        else:\n            pass\n    return open_paren_list, closed_paren_list": 1.5888916885437524e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    current_group = ''\n    is_open = False\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            is_open = True\n            continue\n        if char == ')':\n            if stack:\n                current_group = stack.pop() + char\n                if is_open:\n                    stack.append(current_group": 5.839733064788046e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Iterate through the string, adding the current character to a stack\n    # if the stack is empty, we've reached the beginning of a new group\n    # if we've seen a \"(\" but haven't seen a \")\" then we've encountered a nested group\n    # if we've seen a \")\" then we've reached the end of a group\n    # if we have seen both \"(\" and \")\" then we have closed a": 3.073898489016982e-42, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    bracket = \"\"\n    for c in paren_string:\n        if c == \"(\":\n            stack.append(c)\n        if c == \")\" and len(stack) > 0:\n            if len(stack) == 1:\n                result.append(bracket)\n                bracket = \"\"\n            stack.pop()\n        if c != \"(\" and c != \")": 3.1035463705294686e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = \"\"\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            if i < len(paren_string) - 1 and paren_string[i+1] == \")\":\n                current_group = \"(\"\n            else:\n                current_group += \"(\"\n        elif paren_string[i] == \")": 1.062662279458352e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # code goes here\n    paren_str_list = paren_string.split(\" \")\n    return paren_str_list": 2.4272555298167532e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    curr_paren_group = []\n    open_paren = '('\n    closed_paren = ')'\n\n    for char in paren_string:\n        if char == open_paren:\n            if curr_paren_group:\n                paren_groups.append(''.join(curr_paren_group))\n                curr_paren_group = []": 3.795898480238363e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    inner_str = \"\"\n    for c in paren_string:\n        if c == \"(\":\n            if inner_str:\n                result.append(inner_str)\n                inner_str = \"\"\n            result.append(c)\n        elif c == \")\":\n            if inner_str:\n                result.append(inner_str)\n                inner_str = \"\"\n            result.append(c)": 5.121188552923684e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_stack.append(paren_string)\n\n    result = []\n\n    while len(paren_stack) != 0:\n        current = paren_stack.pop()\n        is_single_paren = current[0] == '(' and current[-1] == ')'\n        is_double_paren = current[0] == '(' and current[1] ==": 9.530832246522976e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO - implement this function": 3.608053559404174e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n    result = []\n    counter = 0\n    while counter < len(paren_string):\n        counter += 1\n        if paren_string[counter] == '(':\n            counter += 1\n            start = counter\n            while counter < len(paren_string):\n                if paren_string[counter] == ')' and counter < len(paren_string) and pare": 7.728609884155301e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    new_string = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        else:\n            new_string.append(paren)\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n    return new_string": 1.726742944422844e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    paren_stack.append('(')\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append('(')\n            paren_groups.append('(')\n        elif char == ')':\n            paren_stack.pop()\n            paren_groups.pop()\n    return": 1.3104228376453936e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_braces = []\n    for char in paren_string:\n        if char == '(':\n            open_braces.append(char)\n        elif char == ')' and len(open_braces) > 0:\n            open_braces.pop()\n        elif char == ')':\n            result.append(')')\n\n    return result": 1.200554452498635e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    current_string = ''\n    parens = 0\n\n    for char in paren_string:\n        if char == '(':\n            parens += 1\n        elif char == ')':\n            parens -= 1\n        if parens == 0:\n            paren_list.append(current_string)\n            current_string = ''\n        else:\n            current_string += char": 7.73733263610369e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[0:i] + ' ' + paren_string[i + 1:j] + ' ' + paren_string[j + 1:]\n        for i, j in [\n            (paren_string.find('('), paren_string.find(')'))\n            for paren_string in paren_string.split()\n            if paren_string.find('(') < pare": 8.339487229482955e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    current_string = ''\n\n    for char in paren_string:\n        if char == '(':\n            parens_stack.append(current_string)\n            current_string = ''\n        elif char == ')':\n            parens_stack.append(current_string)\n            current_string = ''\n        else:\n            current_string += char\n    parens_stack.append": 5.367638045286183e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_stack = []\n    paren_stack = []\n\n    for i, paren in enumerate(paren_string):\n        if paren == \"(\":\n            open_paren_stack.append(i)\n        elif paren == \")\":\n            if open_paren_stack:\n                start = open_paren_stack.pop()\n                paren_stack.append((start, i))": 1.1159564084589438e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    paren_count = 0\n\n    # Start with a loop to go through each char in the string\n    for char in paren_string:\n        # If the char is an opening parenthesis, add it to the paren_stack\n        if char == '(':\n            paren_stack.append('(')\n            paren_count += 1\n        # If": 4.543766218965208e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code below this line\n    open_paren = '('\n    close_paren = ')'\n    result = []\n    open_counter = 0\n    group_start = -1\n    for i in range(len(paren_string)):\n        if paren_string[i] == open_paren:\n            open_counter += 1\n            if open_counter == 1:\n                group_start =": 2.0599456487791855e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            result.append(paren_string[0:i])\n            result.append(paren_string[i + 1: len(paren_string)])\n\n    return result": 1.3039589870645265e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    open_parens = ['(', '[', '{']\n    close_parens = [')', ']', '}']\n    paren_group = ''\n    paren_groups = []\n    for i in range(len(paren_string)):\n        if paren_string[i] in open_parens:\n            paren_group += paren_string[i]\n        elif paren_string": 4.927067690794101e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_list = []\n    paren_string_length = len(paren_string)\n\n    # This conditional checks if the string is empty\n    if paren_string == '':\n        return paren_groups\n\n    # This if statement checks for the first group in the string\n    if paren_string[0] == '(' and paren_string[-1] == ')':": 3.366213571130789e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [''.join(g) for g in (c.split(' ') for c in paren_string.split('()'))]": 4.891187626891187e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # write code here\n    pass": 4.887673524147385e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            paren_list.append(char)\n        elif char == ')':\n            if len(paren_list) == 0:\n                continue\n            elif paren_list[-1] == '(':\n                paren_list.pop()\n            else:\n                paren_list.append(char)": 7.731169681105452e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                paren_group.append(\"\")\n        if len(paren_stack) == 0 and": 3.7273426111651066e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ans = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if stack == []:\n                ans.append(paren_string[i - 1])\n                i += 1\n                continue\n            else:": 1.2159837762072394e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = paren_string.split()\n    paren_stack = []\n    parens_to_return = []\n    for paren in parens:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            paren_stack.pop()\n        else:\n            paren_stack.append(paren)\n            for index, _ in": 1.0429798264877819e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # check for balanced parens\n    left_count = 0\n    right_count = 0\n    balance = True\n    for char in paren_string:\n        if char == '(':\n            left_count += 1\n        elif char == ')':\n            right_count += 1\n            if right_count > left_count:\n                balance = False\n                break\n\n    if balance:\n        groups = paren_string.": 3.280105781787877e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    current_group = []\n    for paren in paren_string:\n        if paren == '(':\n            if current_group:\n                paren_list.append(\"\".join(current_group))\n                current_group = []\n            current_group.append(paren)\n        elif paren == ')':\n            if current_group:\n                paren_list.append(\"": 1.4956524516969592e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def separate_group(paren_string: str) -> str:\n        paren_string = paren_string.replace(\" \", \"\")\n        group = \"\"\n        for char in paren_string:\n            if char == \"(\":\n                group += char\n            elif char == \")\":\n                if group[-1] != \")\":\n                    group += char\n                else:\n                    group += char\n                    group_str =": 3.709344023934635e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Insert your solution here\n    return []": 3.3794764931148093e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_count = 0\n    paren_string_list = []\n    paren_chunk_start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_group_count += 1\n        elif paren_string[i] == ')':\n            paren_group_count -= 1\n        elif paren_": 2.0013671449191375e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def get_nested_parens(current_level: int, paren_string: str, opened_parens: int) -> int:\n        \"\"\"\n        Recursive function that takes the current level of nested parenthesis\n        and a string of parenthesis.\n        If a nested group is found, the function will return the number of new levels.\n        Otherwise, it will return the number of new levels + 1.\n        :param": 2.026130309151607e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Your code here": 0.00046674970492914996, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Finish this function\n    pass": 5.335943743378441e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    paren_list.append('(')\n\n    # loop through the string\n    for i in range(len(paren_string)):\n        # append current paren into stack\n        if paren_string[i] == '(':\n            paren_stack.append(paren_string[i])\n        else:\n            if len(paren_": 8.204746908016485e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"\".join(x) for x in zip(paren_string[::2], paren_string[1::2])]": 3.79543771374916e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    open_paren_indexes = []\n    closed_paren_indexes = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_indexes.append(i)\n        elif paren_string[i] == ')':\n            if len(open_paren_indexes) ==": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # we initialize a new list of strings to store the result\n    result = []\n\n    # we iterate over the input string, checking for balanced parentheses\n    # we also initialize an empty stack of open parentheses\n    stack = []\n    for i, char in enumerate(paren_string):\n        # if the character is an open parenthesis, we add it to the stack\n        if char == \"(\":\n            stack.": 1.0627068108614362e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n\n    # Check for the opening paren\n    open_paren_count = paren_string.count(\"(\")\n    open_paren_index = paren_string.find(\"(\")\n    open_paren_end_index = paren_string.find(\")\")\n\n    # Separate the parts into groups\n    while open_paren_count > 0:\n        # Remove": 6.2815234197303095e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    current = \"\"\n    groups = []\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(current)\n            current = \"\"\n        elif char == \" \":\n            if current != \"\":\n                stack.append(current)\n                current = \"\"\n        else:\n            if stack == []:\n                current += char\n            else:\n                current += char": 6.17331355919782e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces = 0\n    paren_list = []\n    paren_string = paren_string.strip()\n    for index in range(0, len(paren_string)):\n        if paren_string[index] == '(':\n            open_braces += 1\n        if paren_string[index] == ')':\n            open_braces -= 1\n        if paren_string[index": 8.1716665443372e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_stack = []\n    sep_string = ''\n    for ch in paren_string:\n        if ch == '(':\n            group_stack.append(sep_string)\n            sep_string = ''\n        elif ch == ')':\n            group_stack.append(sep_string)\n            sep_string = ''.join(group_stack.pop() for _ in range(len(group_stack)))\n        else": 6.042738097473473e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_group.append(paren_stack.pop())\n            else:\n                return None\n        else:\n            paren_group.append(char)": 3.627629111803296e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Implement your separate_paren_groups function here.\n    return []": 4.6706454969309155e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_list.append(i)\n        elif i == ')':\n            paren_list.pop()\n        else:\n            pass\n\n    for i in paren_list:\n        if i != ')':\n            if paren_list[paren_list.": 2.5781286360320438e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = [paren_string.count('('), paren_string.count(')')]\n    if parentheses[0] == parentheses[1]:\n        return [paren_string]\n    else:\n        return separate_paren_groups(paren_string.replace('()', ''))": 3.580167468499603e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    inside_paren = False\n    paren_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            inside_paren = True\n            paren_group = ''\n        elif char == ')':\n            paren_list.append(paren_group)\n            paren_group = ''\n            inside_paren = False\n        if inside": 1.7388022267882432e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    op_stack = []\n    pos = 0\n    while pos < len(paren_string):\n        if paren_string[pos] == '(':\n            op_stack.append(pos)\n        elif paren_string[pos] == ')':\n            start_index = op_stack.pop()\n            result.append(paren_string[start_index: pos + 1])\n        pos": 5.72107920244465e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[x:y] for x, y in ((i, i + 2) for i in range(0, len(paren_string), 2))]": 1.9328529328015235e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n\n    current_paren_string = \"\"\n    index = 0\n    while index < len(paren_string):\n        char = paren_string[index]\n\n        if char == \"(\":\n            current_paren_string += char\n        elif char == \")\":\n            if current_paren_string == \"\":\n                current_paren_string += char\n            else:": 6.743526993690685e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_paren = ''\n    result = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n                if len(paren_stack) == 0:\n                    result.append(current_": 4.3256459175209094e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # 1. Create a list containing a single element which is a single empty list.\n    parens = [[]]\n    # 2. Iterate over the string.\n    for i in paren_string:\n        # 3. If the current character is a left parenthesis, add it to the list.\n        if i == '(':\n            # 4. Remove the last element from the list.\n            parens[-1].": 1.7562543925246094e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_str = \"\"\n    bracket_counter = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            paren_counter = 0\n            bracket_counter += 1\n        elif char == \")\" and bracket_counter > 0:\n            bracket_counter -= 1\n            if paren_counter == 0:\n                paren_list.append": 8.352467164586569e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Your code here\n    pass": 9.441948660691281e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_list = []\n\n    if paren_string == '':\n        return new_list\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    elif paren_string[0] == '(' and paren_string[1] == '(' and paren_string[-1] == ')':\n        return [paren_": 1.2765116601008662e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = ''\n    open_paren_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            current_group += char\n        elif char == ')':\n            open_paren_count -= 1\n            if open_paren_count == 0:\n                paren_groups.append(": 1.238138411581699e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # edge case - is there a way to not do a recursive call here?\n    if paren_string == '()':\n        return ['()']\n    else:\n        paren_list = []\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                paren_list.append(paren_string[:i])\n            elif paren_string[": 9.947244409504529e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create a list of all the possible combinations of open and close parentheses\n    # by looping through the paren string.\n    bracket_list = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(' or paren_string[i] == ')':\n            bracket_list.append(paren_string[i])\n\n    # Create a list": 1.1593678408657437e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren = \"\"\n    for i in paren_string:\n        if i == \"(\":\n            paren = \"\"\n        elif i == \")\":\n            parens.append(paren)\n        elif i != \" \":\n            paren += i\n    return parens": 1.4271877423107402e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.isspace() or paren_string == '':\n        return []\n\n    groups = []\n    opened = 0\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            opened += 1\n        elif paren_string[i] == ')':\n            opened -= 1\n        elif paren_string[i] == '": 1.8215923689311703e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n\n    if paren_string[0] == ')':\n        return [paren_string]\n    else:\n        if paren_string[0] == '(' and paren_string[1] != ')':\n            return [paren_string[0:2]] + separate_paren_groups(paren_string[2:])\n        else:": 6.509716990781549e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_paren = []\n    for char in paren_string:\n        if char == '(':\n            open_paren.append(char)\n        if char == ')':\n            result.append(''.join(open_paren))\n            open_paren = []\n    return result": 2.686059833062373e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    groups = []\n    for char in paren_string:\n        if char == \"(\":\n            groups.append(char)\n        elif char == \")\":\n            if len(groups) > 0:\n                output.append(groups.pop())\n            else:\n                groups.append(char)\n    if len(groups) > 0:\n        output.append(groups.pop())\n    return output": 8.981414404960975e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.strip()\n    paren_stack.append(paren_string[0])\n    if paren_string[-1] == '(':\n        return [paren_string]\n    else:\n        paren_stack.append(paren_string[-1])\n        paren_stack = ''.join(paren_stack)\n        return [": 5.68115475190061e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return [paren_string]\n    if paren_string.startswith('('):\n        return [paren_string]\n    if paren_string.startswith('(') and paren_string.endswith(')'):\n        return [paren_string]\n    count = 0\n    start_index = 0\n    list_of_groups = []\n    for": 2.900832502767601e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            j = i + 1\n            while paren_string[j] != ')':\n                j += 1\n            substring = paren_string[i + 1:j]\n            res.append(substring)\n            i = j + 1\n        else:": 1.285465504572608e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Go through each parentheses and remove all of the inner nested parentheses\n    paren_list = paren_string.split(')')\n    paren_list = [paren for paren in paren_list if paren != '()']\n\n    return paren_list": 1.906193980773536e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    braces_stack = []\n    braces_output = []\n    prev_char = ''\n    for char in paren_string:\n        if char == '(':\n            braces_stack.append(char)\n        elif char == ')':\n            if prev_char == '(':\n                braces_output.append(''.join(braces_stack))\n                braces_stack = []\n            else:": 2.5365418155622173e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create list of strings with no open parentheses\n    # NOTE: \"list comprehension\" is a concept introduced in Python 3.6.\n    # The use of square brackets on the right of the list creation is new\n    # to Python 3.6 (from 3.5), and we can replace it with square brackets\n    # if we were to support Python 3.5+\n    no_open_paren_": 3.2070544313290875e-64, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # 1. Find all the pairs of opening and closing braces in the input string.\n    # 2. Group the pairs of opening and closing braces together as a single string.\n    # 3. Use a recursive function to separate the group of braces into separate strings.\n    # 4. Return the list of separate strings.\n    pass": 1.3580938258685908e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    stack = []\n    # opening parens are pushed onto the stack\n    for p in paren_string:\n        # if a new opening paren is found push to stack\n        if p == \"(\":\n            stack.append(p)\n        # if a closing paren is found pop stack and append to list of parens\n        elif p == \")\":\n            parens.append(p)\n    return pare": 7.744086398894665e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Get the start and end indices of each group\n    group_starts, group_ends = [], []\n    curr_group = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            curr_group += 1\n        elif paren_string[i] == ')':\n            curr_group -= 1\n        if curr_group": 3.4467242560079883e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    paren_stack = []\n    paren_list = []\n    paren_count = 0\n    paren_len = 0\n    paren_start = 0\n    for i in paren_string:\n        if i == '(':\n            paren_count += 1\n            if paren_count == 1:\n                paren_start = paren_len\n        elif i == ')':": 6.718832783665738e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Complete this function\n    pass": 4.934197901912113e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    if paren_string[0] == '(' and paren_string[-": 2.5734697116843412e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parenthesis_pairs = []\n\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            start = i\n        elif paren_string[i] == ')':\n            end = i\n            parenthesis_pairs.append(paren_string[start:end+1])\n\n    return parenthesis_pairs": 6.066966396775857e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: write function\n    pass": 8.63935073328268e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # start with an empty list to put all our results in\n    return_list = []\n\n    # start at the leftmost position\n    left = 0\n\n    # go right to the right until you get to the rightmost position\n    right = 0\n\n    # check if there are any parentheses at all\n    if paren_string.count('(') != 0:\n\n        # if so, start looking for them": 3.711478580725144e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # TODO: replace this": 2.9071693464225242e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split(' ()'):\n        if paren_group.strip():\n            paren_groups.append(paren_group.strip())\n\n    return paren_groups": 9.15495215504804e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    new_group = []\n    for i in paren_string:\n        if i == '(':\n            paren_group.append(i)\n        elif i == ')':\n            paren_group.append(i)\n            new_group.append(''.join(paren_group))\n            paren_group = []\n\n    return new_group": 1.6706513094268766e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # write your code here\n    pass": 0.00016416507040960387, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == '(':\n            parens_stack.append(paren_group)\n            paren_group = []\n        elif char == ')':\n            parens_stack[-1].extend(paren_group)\n            paren_group = []\n        else:\n            paren_group.append(": 1.275457573620338e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # answer = []\n    # paren_list = []\n    # for i in paren_string:\n    #     if i == \"(\":\n    #         paren_list.append(i)\n    #     elif i == \")\":\n    #         if len(paren_list) > 0:\n    #             paren_list.pop()\n    #         else:\n    #             answer.append(i)": 6.639114933884462e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n    paren_string_2 = paren_string\n    while \"()\" in paren_string_2:\n        paren_list.append(paren_string_2.split(\"()\", 1)[0])\n        paren_string_2 = paren_string_2.split(\"()\", 1)[1]\n    paren_list.append(paren_string_2)": 1.7205931476073502e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n\n    paren_stack = [paren_string[0]]\n    result = []\n    for i in range(1, len(paren_string)):\n        if paren_stack:\n            # check the stack to see if paren is nested\n            if paren_stack[-1] == '(' and paren_string[i] == ')':\n                # if": 3.0959224969806614e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # hint: use the built-in function split\n    # hint: the function split returns a list\n    # hint: for the first group of parentheses, the code should return ['()']\n    # hint: for the second group of parentheses, the code should return ['()()']\n    # hint: for the third group of parentheses, the code should return ['()()()']\n    # hint: for the fourth group of parenthes": 2.7569077751286967e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack: List[str] = []\n    paren_string_list = paren_string.split(')')\n\n    for i in paren_string_list:\n        if i.startswith('('):\n            paren_stack.append(i)\n        else:\n            current_paren = paren_stack.pop()\n            while current_paren not in paren_string_list and not": 6.020386683320565e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current = ''\n    for char in paren_string:\n        if char == '(':\n            current += char\n            if len(result) > 0 and current[-1] == ')' and result[-1].endswith(')') or len(\n                    result) > 0 and current[-1] == ')':\n                current = current[:-2] + char\n        if char == ')':\n            current": 2.4842628400616877e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code here": 0.0008987447041294418, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    for item in paren_string:\n        if item == '(':\n            paren_stack.append(item)\n        elif item == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                raise Exception(\"Closing paren outside opening paren\")\n        else:\n            raise Exception": 8.87304059103801e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_paren_groups = []\n\n    for character in paren_string:\n        if character == \"(\":\n            list_of_paren_groups.append(\"(\")\n        if character == \")\":\n            if list_of_paren_groups[-1] == \"(\":\n                list_of_paren_groups.pop()\n            else:\n                list_of_paren_groups.append(\"": 4.088431173585777e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n\n    indices = [i for i, char in enumerate(paren_string) if char == '(']\n\n    results = []\n    for index in indices:\n        if paren_string[index + 1] == ')':\n            sub_result = separate_paren_groups(paren_string[:index] + paren_string[": 1.1341564976757957e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # First create a list of all the opening and closing parentheses.\n    parentheses = ['(', ')']\n    # Use list comprehension to generate all permutations of the list of parentheses.\n    parentheses_permutations = [''.join(perm) for perm in list(map(lambda x: itertools.permutations(x), parentheses))]\n    # We'll return the list of": 8.427477173636839e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO": 0.0038583863358538726, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_groups = []\n    buffer = ''\n\n    for char in paren_string:\n        if char == '(':\n            if buffer:\n                paren_groups.append(buffer)\n                buffer = ''\n            paren_groups.append(char)\n        elif char == ')':\n            if buffer:\n                paren_groups.append(buffer)\n                buffer = ''\n            paren_groups.": 1.7784709153409266e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    string = \"\"\n    for char in paren_string:\n        if char != \" \":\n            string += char\n    parens = []\n    i = 0\n    while i < len(string):\n        paren = \"\"\n        while i < len(string) and string[i] != \"(\":\n            i += 1\n        while i < len(string) and string[i] != \")\":\n            i +=": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write this function.\n    pass": 5.61696960032661e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    i = 0\n\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                stack.append(i)\n\n        i += 1\n\n    if": 1.743099615384989e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    paren_open = '('\n    paren_close = ')'\n\n    # iterate through the string and collect all characters that are not paren_close.\n    # add them to a list, and then return a list.\n    for char in paren_string:\n        if char != paren_close:": 8.825302434194697e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    group_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        if char == ')':\n            paren_stack.pop()\n            if len(paren_stack) == 0:\n                group_stack.append(''.join(paren_stack))\n                paren_stack = []": 9.433439709150006e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_groups = []\n    parens = []\n    start_index = 0\n    current_index = 0\n    group = ''\n    while current_index < len(paren_string):\n        parens = paren_string[current_index]\n        if parens == '(':\n            paren_list.append(parens)\n        elif parens == ')':": 5.321304378206235e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    pairs = [(\"(\", \")\"), (\"[\", \"]\"), (\"{\", \"}\")]\n    stack = []\n    groups = []\n    for paren in paren_string:\n        if len(stack) == 0:\n            stack.append(paren)\n        else:\n            if len(stack) == 1:\n                if paren not in": 4.2504862299114136e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.count('(') != paren_string.count(')'):\n        raise Exception('Input string must be balanced')\n\n    def helper(output, paren_string):\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                output.append('')\n                output[-1] += helper(output, paren_string[i +": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    count = 0\n    count2 = 0\n    list1 = []\n    for i in paren_string:\n        if i == '(':\n            count += 1\n            count2 += 1\n        elif i == ')':\n            count -= 1\n            count2 += 1\n        elif i == ' ':\n            count -= 1\n            count2 += 1\n        if count < 0:\n            return []\n        if count ==": 9.902861819997355e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = []\n    for c in paren_string:\n        if c == '(':\n            group.append(c)\n        elif c == ')' and len(group) > 0:\n            groups.append(''.join(group))\n            group = []\n        elif c == ')' and len(group) == 0:\n            raise ValueError(f'Error separating groups in {paren_string}": 7.850179670086537e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # helper function to check if a string is properly balanced\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Input: a string containing parentheses\n        Output: True if the parentheses in the string are properly balanced, False otherwise\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('(()())')\n        True\n        >>> is_balanced('(()))')": 1.8739210313090685e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string.strip() for paren_string in paren_string.split(')(')]": 8.890848676208271e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            group += char\n        if char == \")\" and group.endswith(\"(\"):\n            groups.append(group)\n            group = \"\"\n    return groups": 1.5484091244962652e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    lst = []\n    string = ''\n    for c in paren_string:\n        if c == '(':\n            lst.append(string)\n            string = ''\n        elif c == ')':\n            if len(string) == 0:\n                continue\n            lst.append(string)\n            string = ''\n        else:\n            string += c\n    return lst": 1.033873243505525e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(\" \", \"\")\n\n    for character in paren_string:\n        if character == '(':\n            paren_list.append(\"(\")\n        elif character == \")\":\n            paren_list.append(\")\")\n\n    return paren_list": 1.1353957480666214e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n                if len(paren_stack) == 0:\n                    paren_list.append('()')": 1.2637872107127342e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement this function": 0.00033672884397455155, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return ['()' for _ in paren_string]": 4.2860360608313155e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n\n    #     groups = []\n    #     curr_group = ''\n    #     for char in paren_string:\n    #         if char == '(':\n    #             curr_group += char\n    #         elif char == ')':\n    #             groups.append(curr_group)\n    #             curr_group = ''\n    #         else:\n    #             curr_": 2.2111742759944002e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                return []\n    if paren_stack:\n        return []\n    else:\n        return paren_string.split()": 4.34938230819062e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Replace the following line with your code.\n    pass": 7.912642075000236e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the paren string into a list of sub-strings (see lecture slide 11)\n    parens = paren_string.split()\n    # make a list of the results of evaluating the parsed strings\n    paren_list = []\n    # loop through each string in the paren list\n    for paren in parens:\n        # add the paren to the list if the paren is not empty\n        if paren !": 2.674021506350593e-44, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    # Define our \"string\" variable\n    string = ''\n    # Start the loop\n    for char in paren_string:\n        # print(f'Currently processing character {char}')\n        # If our character is an open parenthesis, start a string\n        if char == '(':\n            string = ''\n        # If our character is a closed parenthesis, check if there is an opening parenthesis already": 9.88108883306753e-44, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.count(\"(\") != paren_string.count(\")\"):\n        return []\n\n    group_stack = []\n    group_list = []\n\n    for index, paren in enumerate(paren_string):\n        if paren == \"(\":\n            group_stack.append(index)\n        elif paren == \")\":\n            group_stack.pop()\n\n        if not group_": 3.140812938242635e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def recurse(group, acc):\n        if len(group) == 1:\n            return acc + [group[0]]\n        elif group[0] == '(' and group[-1] == ')':\n            return recurse(group[1:-1], acc + [group[1:-1]])\n        else:\n            return recurse(group[1:], acc)\n\n    return recurse(paren_string, [": 3.907484983690603e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    if '(' not in paren_string:\n        paren_list.append(paren_string)\n        return paren_list\n    else:\n        for paren in paren_string:\n            if paren == '(':\n                for i, char in enumerate(paren_string):\n                    if i == paren_string.find(paren):\n                        paren_list": 4.567868734704882e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    list_strings = []\n\n    open_paren_count = 0\n    open_paren_stack = []\n\n    for paren_index in range(len(paren_string)):\n\n        # Increment counter if we find an open paren\n        if paren_string[paren_index] == '(':\n            open_paren_count += 1\n\n        # Decrement counter if we find a": 6.299761538503429e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # TODO: remove when you are done implementing this function": 6.104362155722736e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create a list of all the opening braces and open parenthesis\n    opening_braces = ['(', '[', '{']\n    open_parenthesis = ['(', '[', '{', '(', '[', '{']\n\n    # create a list of all the closing braces and close parenthesis\n    closing_braces = [')', ']', '}']\n    close_parenthesis = [')', '": 2.656598561899308e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    parens_remaining = [paren_string]\n\n    while parens_remaining:\n        parens.append(parens_remaining.pop())\n\n    return parens": 1.0364322068066181e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(\" \", \"\")\n\n    paren_stack.append(paren_string[0])\n    for i in range(1, len(paren_string)):\n        paren_stack.append(paren_string[i])\n\n        if paren_stack[-1] == \")\":\n            if paren_stack[-2] == \"": 5.872050130042207e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_str = ''\n    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            j = i\n            while paren_string[j] != ')':\n                j += 1\n            result.append(paren_string[i + 1:j])\n            i = j\n        i += 1\n    return result": 2.19858739305833e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    temp = ''\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            temp += char\n            continue\n        if char == ')' and temp != '':\n            paren_groups.append(temp)\n            temp = ''\n            continue\n        temp += char\n    if temp != '':\n        paren_groups.append(temp)": 5.894884541515916e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                paren_stack.append(')')\n            elif paren_stack[-1] == '(':\n                paren_stack.pop()": 6.779987952309906e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # keep track of groups\n    group_stack = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            # start a new group\n            current_group += char\n            group_stack.append(current_group)\n        elif char == ')':\n            # end a group\n            if current_group:\n                # add the current group to the list and start a": 9.91815959807571e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: complete this function\n    return []": 1.4411311392499408e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parenthesis_count = 0\n    all_separated_groups = []\n\n    for index, parenthesis in enumerate(paren_string):\n        if parenthesis == '(':\n            parenthesis_count += 1\n        elif parenthesis == ')':\n            parenthesis_count -= 1\n\n        if parenthesis_count == 0:\n            all_separated_groups.append(paren_string[:index + 1": 1.1497196537538383e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pairs = {')': '('}\n    balanced_parentheses_list = []\n    my_stack = []\n    for c in paren_string:\n        if c in pairs.values():\n            my_stack.append(c)\n        elif c in pairs.keys():\n            if my_stack[-1] == pairs[c]:\n                my_stack.pop()\n            else:\n                balanced_parentheses_list": 7.508677801278521e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_group = []\n    paren_string = paren_string.replace(' ', '')\n    for p in paren_string:\n        if p == '(':\n            paren_group.append('')\n        elif p == ')':\n            if len(paren_group) > 0:\n                paren_group.pop()\n            else:\n                paren_group.append('')\n        else": 4.838568938079002e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count = paren_string.count('(')\n    close_count = paren_string.count(')')\n\n    if open_count == close_count:\n        return [paren_string]\n\n    answer_list = []\n    curr_level = 0\n\n    for paren in paren_string:\n        if paren == '(':\n            curr_level += 1\n        elif paren": 4.479107599745193e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    paren_group = []\n    paren_group_string = ''\n\n    for char in paren_string:\n        if char == '(':\n            paren_group.append(char)\n        elif char == ')':\n            if len(paren_group) == 1:\n                paren_group.append(char)\n                paren_group_string += char": 6.107842626191942e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n    elif len(paren_string) < 2:\n        return []\n    else:\n        left_count = 0\n        right_count = 0\n        index = 0\n        result = []\n        while index < len(paren_string) - 1:\n            if paren_string[index] == '(':\n                left_count +=": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n\n    for paren in paren_string:\n        if paren in ['(', ')']:\n            paren_stack.append(paren)\n        else:\n            if paren_stack:\n                paren_list.append(paren_stack.pop())\n            else:\n                paren_list.append(paren)\n\n    return pare": 1.3768591453477416e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Build the tree of nested parentheses\n    pass": 1.7611653603341636e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    paren_groups = paren_string.split('(')\n    for paren_group in paren_groups:\n        paren_group = paren_group.split(')')\n        if len(paren_group) > 1:\n            paren_group_list.append(paren_group[1])\n    return paren_group_list": 1.9045231137649984e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    opening_paren = '('\n    closing_paren = ')'\n    # could have just created this list using list comprehension\n    # opening_paren_list = [opening_paren, opening_paren, opening_paren]\n    # closing_paren_list = [closing_paren, closing_paren]\n\n    opening_paren_list = []\n    closing_paren_list =": 1.3263476610773786e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string_list = []\n    paren_string_list_rev = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] != '(':\n            paren_string_list.append(paren_string[i])\n        elif paren_string[i] == '(':\n            paren_list.append": 3.672106765598237e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_string = paren_string.replace(\" \", \"\")\n    split_string = paren_string.split(\")\")\n    split_string = [paren_string.strip('()') for paren_string in split_string]\n    split_string = list(map(lambda paren_string: paren_string.replace(\" \", \"\"), split_string))\n\n    return split_string": 7.463987441267475e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n    current_list = []\n    for char in paren_string:\n        if char == '(':\n            if current_list:\n                group_list.append(current_list)\n            current_list = []\n        elif char == ')':\n            if current_list:\n                group_list.append(current_list)\n            current_list = []\n        else:\n            current_list": 1.7323437897260293e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # put your code here": 0.00035664256044933614, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    stack = []\n    for char in paren_string:\n        if char in ['(', ')']:\n            stack.append(char)\n        if char == ')':\n            # pop and concatenate string\n            s = ''\n            while stack[-1] != '(':\n                s += stack.pop()\n            stack.pop()\n            groups.append(s)\n\n    return groups": 1.9316210905906127e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # your code here\n    pass": 0.0006931900419177906, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = list(paren_string)\n    paren_stack = []\n    res = []\n    start = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                paren_string.insert(i, ' '": 1.4428849323535434e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(char)\n        elif char == ' ':\n            if stack:\n                parens.append(''.join(stack))": 5.337867023638827e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pairs = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            pairs.append(i)\n\n    paren_groups = []\n    for pair in pairs:\n        start_group = pair\n        end_group = pair\n        while paren_string[end_group + 1] != '(':\n            end_group += 1\n        pare": 1.0548179619737148e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = \"\"\n    for i, paren in enumerate(paren_string):\n        if paren == \"(\":\n            current_group += paren\n        elif paren == \")\":\n            if i == len(paren_string) - 1:\n                paren_groups.append(current_group)\n                return paren_groups\n            elif paren_string[i": 8.367570786956742e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for character in paren_string:\n        if character == \"(\":\n            stack.append(\"(\")\n        elif character == \")\":\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append(\"()\")\n    return result": 9.962296637428954e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE GOES HERE\n    return": 8.093133729260559e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return ['']": 0.0006698774318391022, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    new_string = ''\n    for x in paren_string:\n        if x == '(' or x == ' ':\n            if len(paren_stack) > 0:\n                if paren_stack[0] == '(':\n                    new_string = new_string + x\n                else:\n                    paren_stack.append(x)\n            else": 1.9877715108933945e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    open_paren_count = 0\n    cur_paren = ''\n\n    for paren_char in paren_string:\n        if paren_char == '(':\n            open_paren_count += 1\n            cur_paren += paren_char\n        elif paren_char == ')':\n            open_paren_count -= 1\n            cur_paren += paren": 6.047994914627688e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Goal: Take a string of parentheses and separate them into lists of parentheses\n    # Ignore spaces, because you don't want to start a sub-list with a space\n    # Separate groups are not nested within each other\n\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.strip()\n    #": 1.2107743949819026e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    output_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append('(')\n        if i == ')' and len(paren_stack) > 0:\n            if paren_stack[-1] == '(':\n                paren_stack.pop()\n                output_list.append(')')\n\n    return output_": 9.353180956542213e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    parentheses_stack = []\n\n    # loop through each character in the input string\n    for char in paren_string:\n        if char == '(':\n            parentheses_stack.append(char)\n\n        # if closing parenthesis is found,\n        # add the open parenthesis to the list\n        elif char == ')':\n            paren_groups.append(parentheses": 5.6036217249283914e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write code here\n\n    return []": 1.742319281184159e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code goes here.": 0.0002798259364176177, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def create_separate_list():\n        separate_list = []\n        counter = 0\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                counter += 1\n            elif paren_string[i] == ')':\n                counter -= 1\n            if counter == 0:\n                separate_list.append(paren_string[i:i +": 1.6394275531629817e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = ''\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            if group == '':\n                group = group + paren_string[i]\n                i += 1\n            elif paren_string[i] != group[len(group) - 1]:\n                group = group + paren_string[i]": 2.46386114148917e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code here\n\n    return list_of_substrings": 6.505397281409084e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_start_index = 0\n    paren_end_index = 0\n    paren_groups_index = 0\n\n    while paren_end_index < len(paren_string):\n        if paren_string[paren_end_index] == '(':\n            paren_start_index = paren_end_index\n            paren_groups.append('')": 1.946186793812403e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if paren_string == \"()\":\n        return paren_string\n    open_brackets_count = 0\n    close_brackets_count = 0\n    string_list = []\n    string_temp = []\n    for i in paren_string:\n        if i == '(':\n            open_brackets_count += 1\n        elif i == ')':\n            close_brackets_count += 1": 2.1519726455787917e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    paren_groups = []\n    open_braces = 0\n    result = ''\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        elif char == ')':\n            open_braces -= 1\n        if open_braces == 0:\n            if char == ' ':\n                paren_groups": 1.24861602358913e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Check input and raise error if it's invalid\n    assert check_input(paren_string), 'Input is not a valid string'\n\n    # Build list of sub strings\n    sub_strings = []\n    index = 0\n    while index < len(paren_string):\n        sub_str_list = []\n        inner_index = index\n        while paren_string[inner_index] != ')' or pare": 1.1822749790909962e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(' ', '')\n\n    # return paren_string.split('()')\n    # return paren_string.split('()(')\n\n    # split by (\n    # filter out the empty strings\n    # for each element, make a list\n    #     if not the first item, strip the parens off the first": 8.937253658291645e-46, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n    if paren_string == '(( ))':\n        return [paren_string]\n\n    paren_string = paren_string.strip('()')\n\n    if not paren_string:\n        return []\n\n    result = []\n    for i in range(len(paren_string)):\n        start = i": 3.7444793527161946e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Add code here\n    return []": 1.6766069927948065e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    #print(paren_string)\n    parens = []\n    string_list = []\n    open_parens = []\n    closed_parens = []\n    open_paren_index = []\n    closed_paren_index = []\n\n    for i, c in enumerate(paren_string):\n        if c == \"(\":\n            open_parens.append(c)\n            open_paren_": 2.8357215571204925e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # todo: replace this stub code with your solution\n    return []": 3.0605790669856633e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    num_groups = 0\n    list_of_groups = []\n    for c in paren_string:\n        if c == \"(\":\n            num_groups += 1\n            list_of_groups.append(\"\")\n        elif c == \")\" and num_groups == 1:\n            return_list.append(list_of_groups.pop())\n            num_groups -= 1\n        elif c": 7.36273071015499e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_stack_index = -1\n    paren_stack_index += 1\n\n    new_paren_list = []\n    current_paren_stack = []\n\n    current_paren_string = ''\n    index = 0\n\n    # loop through string\n    while index < len(paren_string):\n\n        # get next char\n        next_char = paren_": 5.072396592753653e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # input validation\n    if not paren_string:\n        return []\n    if paren_string[0] != '(':\n        raise ValueError('Invalid input. Must start with \"(\"')\n    if paren_string[-1] != ')':\n        raise ValueError('Invalid input. Must end with \")\"')\n\n    # create stack\n    stack = []\n\n    # go through each character in the input string": 1.5055928928104262e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_chars = ['(', ')']\n    paren_chars_str = ''.join(paren_chars)\n    paren_chars_str_length = len(paren_chars_str)\n\n    current_open_paren_count = 0\n    current_close_paren_count = 0\n    current_group_start_index = 0\n    all_groups = []": 9.369500837409639e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    for index in range(len(paren_string)):\n        if paren_string[index] == '(':\n            count = 1\n            start = index\n            while True:\n                if paren_string[index] == '(':\n                    count += 1\n                    index += 1\n                elif paren_string[index] == ')':\n                    count -= 1\n                    index += 1": 1.1600637062153937e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses_list = []\n    for paren in paren_string.strip():\n        if paren == '(':\n            parentheses_list.append(paren)\n        elif paren == ')' and len(parentheses_list) > 0 and parentheses_list[-1] == '(':\n            parentheses_list.pop()\n        elif paren == ')' and len(parentheses_": 4.584273532637622e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    paren_stack.append('(')\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack[-1] == '(':\n                paren_stack.pop()\n            else:\n                paren_stack.append(": 3.2312521130604163e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_list = paren_string.split('()')\n    return paren_list": 5.988936864277397e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # should be returned in the same order as the input\n    paren_groups = []\n    open_paren = 0\n    for i in paren_string:\n        if i == '(':\n            open_paren += 1\n        elif i == ')':\n            open_paren -= 1\n        elif i == ' ':\n            if open_paren == 0:\n                paren_groups.append('')": 6.929965425195191e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_dict = {'(': ')', ')': '(', '(': '(', ')': ')', '(': ')', ')': '(', ')': ')'}\n    nested_list = []\n    parenthesis_list = []\n    nested_string = ''\n    for paren in paren_string:\n        if paren == '(':\n            parenthesis_list.append(p": 2.175574324024483e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    for paren_group in paren_string.split('):('):\n        for open_paren in paren_group:\n            if open_paren != '(':\n                result.append('(')\n\n        for close_paren in paren_group:\n            if close_paren != ')':\n                result.append(')')\n\n    return result": 2.635101570134067e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # initialize the string that will contain the answer\n    answer_list = []\n\n    # initialize the count of the open braces, initialize it to 0\n    open_braces = 0\n\n    # iterate over the input string\n    for char in paren_string:\n        # if the current character is an open brace\n        if char == '(':\n            # add one to the count of open braces\n            open_br": 3.9928796151286915e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE GOES HERE\n    raise NotImplementedError()": 5.8629707026843444e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    counter = 0\n    for i in paren_string:\n        if i == \"(\":\n            counter += 1\n        elif i == \")\":\n            counter -= 1\n        elif counter == 0 and i != \" \":\n            paren_list.append(i)\n    return paren_list": 5.643119408559862e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    # TODO: implement\n\n    return groups": 7.700416854747898e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    open_par = []\n    close_par = []\n    counter = 0\n    for char in paren_string:\n        if char == \"(\":\n            open_par.append(counter)\n        elif char == \")\":\n            close_par.append(counter)\n        counter += 1\n    start_index = 0\n    end_index = 1\n    while start_index <= len(": 5.987954067946123e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) == 0:\n                result.append(')')\n            else:\n                paren_stack.pop()\n        else:\n            if len(paren_stack) == 0": 3.5311138875193394e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_string = []\n    paren_string = list(paren_string.replace(' ', ''))\n    if len(paren_string) % 2 == 1:\n        raise ValueError(\"The input is not a balanced group.\")\n\n    else:\n        while paren_string:\n            if paren_string[0] == '(':\n                paren_group_string.append('(')": 3.441708656165841e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = []\n    group_count = 0\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n            group_count += 1\n        elif char == ')':\n            if group_count > 0:\n                paren_group.append(paren_stack.pop() + ')')\n                group_count": 1.3409378949229079e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    output = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            if len(stack) == 1:\n                output.append(char)\n        if char == ')':\n            if len(stack) == 1:\n                output.append(char)\n                stack.pop()\n            if len(stack) == 0:\n                output.": 1.6925153951431193e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here\n    # HINT: You can use the following regex pattern to find parentheses within a string\n    # pattern = re.compile(r'(\\()|(\\))')\n    # Consider the following input strings:\n    # '(  ) ((  ))'\n    # '(  ) (  ) (  ) ((  ))'\n    # and the pattern ( \\( | \\) ) will match": 2.1087259290702268e-47, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    group_list = []\n    open_paren_count = 0\n    curr_group = []\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            curr_group.append(char)\n        elif char == ')':\n            open_paren_count -= 1": 1.2089841144140056e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if len(paren_string) == 0:\n        return []\n\n    open_paren = paren_string[0]\n    close_paren = paren_string[-1]\n\n    if open_paren == close_paren:\n        return [paren_string[1:-1]] + separate_paren_groups(paren_string[1:-1])\n\n    start_of_next_group": 7.10853375281053e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = ''\n    for i in paren_string:\n        if i == '(':\n            current_group += i\n        elif i == ')':\n            if len(current_group) > 0:\n                result.append(current_group)\n                current_group = ''\n    result.append(current_group)\n    return result": 4.1474004526814016e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    output = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return []\n            output.append(stack.pop())\n    return output": 5.53060896399816e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # This function was taken from an online tutorial.\n    pass": 7.131744817798363e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_str_list = paren_string.split()\n    paren_str_list.sort()\n    paren_str_list.sort(key=len, reverse=True)\n    new_paren_str_list = []\n    while paren_str_list:\n        if paren_str_list[-1]:\n            new_paren_str_list.append(paren_str_list.pop": 2.3623202062924126e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_in_group = []\n    parens_out_group = []\n\n    for char in paren_string:\n        if char == '(':\n            parens_in_group.append(char)\n        elif char == ')':\n            parens_out_group.append(char)\n\n    if len(parens_in_group) != len(parens_out_group):\n        raise Exception": 9.336407054638332e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    left_brackets = []\n    right_brackets = []\n    balanced_list = []\n\n    for item in paren_string:\n        if item == \"(\":\n            left_brackets.append(item)\n        elif item == \")\":\n            right_brackets.append(item)\n\n    print(left_brackets)\n    print(right_brackets)\n\n    return balanced_list": 7.430715819086224e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_chunks = []\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n        elif c == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_chunks.append(''.join(paren_stack))\n                paren_stack = []": 5.585967097542833e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # 1. Start with a set of open and closed parentheses\n    # 2. Iterate through the string, looking for open and closed parentheses\n    # 3. When we find a match, add the part of the string between the\n    #    open and closed parens to a list\n\n    open_paren = '('\n    closed_paren = ')'\n\n    current_idx = 0\n\n    pare": 4.0460667211123075e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create a list of the parts of the input string\n    parts = []\n    group = \"\"\n    for i in paren_string:\n        if i == \"(\":\n            group += i\n        elif i == \")\":\n            if group == \"\":\n                parts.append(group)\n                group = \"\"\n            else:\n                parts.append(group)\n                group = \"\"\n        elif i == \" \":\n            if": 1.878617237330213e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    output_list = []\n\n    paren_stack = []\n    ptr = 0\n    while ptr < len(paren_string):\n        current_char = paren_string[ptr]\n        if current_char == '(':\n            paren_stack.append(current_char)\n\n        if current_char == ')':\n            if paren_stack:\n                # We have a match of parens": 4.958028425297772e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            paren_list.append(paren_string[paren_stack.pop():i+1])\n    return paren_list": 1.1114403295575104e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code here\n    groups = []\n    current_group = []\n    paren_string = paren_string.replace(\" \", \"\")\n    for char in paren_string:\n        if char == \"(\":\n            current_group.append(char)\n        elif char == \")\":\n            groups.append(\"\".join(current_group))\n            current_group = []\n        else:\n            current_group": 1.5203911724654343e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # SEPARATE\n    # remove spaces\n    paren_string = paren_string.replace(\" \", \"\")\n    # remove all parentheses except the ones enclosing balanced pairs of parentheses\n    paren_string = paren_string.replace(\"()\", \"\")\n    # find all open and close parentheses\n    open_parentheses = []\n    close_parentheses = []\n    for i in": 1.162215146878192e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    paren_string = paren_string.replace(' ', '')\n    current_string = ''\n    for char in paren_string:\n        if char == '(' or char == ')':\n            current_string += char\n        elif char == ')' and current_string:\n            paren_list.append(current_string)\n            current_string = ''\n    if current_string": 1.3657553492385668e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create a list of all of the parentheses and use a for loop to go through them one by one\n    # Create a variable to keep track of the current position in the string\n    # Create a list to store all of the groups\n    # Create a list to store the current group\n    # Initialize the first position to 0\n    # Check if the character at the current position is a left parenthesis and if it's not, skip to the": 1.716253577680322e-42, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    new_list = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            new_list.append(''.join(paren_stack))\n            paren_stack.pop()\n        else:\n            new_list.append(paren)\n\n    return new": 1.384539590543257e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string_list = paren_string.split('()')\n    return paren_string_list": 1.4361223946260959e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_groups = []\n    group = []\n    open_paren = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_paren += 1\n        elif char == ')':\n            open_paren -= 1\n        if open_paren == 0:\n            list_of_groups.append(''.join(group))\n            group = []\n        else:": 3.310845670596325e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # build a list of parentheses\n    paren_list = []\n    open_paren = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren += 1\n        elif char == ')':\n            open_paren -= 1\n        if open_paren == 0:\n            paren_list.append(char)\n    return paren_list": 6.801817993754568e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # ignore spaces\n    no_space_string = paren_string.replace(' ', '')\n    paren_groups = []\n    if '(' not in no_space_string:\n        return [paren_string]\n    else:\n        # split string into groups of balanced parentheses\n        paren_groups = no_space_string.split('()')\n        # remove empty strings from list\n        paren_groups =": 1.615463380435011e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    for paren_group in paren_string.split('()'):\n        if paren_group != '':\n            paren_groups.append(paren_group)\n    return paren_groups": 2.013939326683236e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # First, split the string up into individual paren groups\n    p_groups = paren_string.split(')(')\n    # Now we will separate each of the sub-groups into their own individual strings\n    # and place them in a new list\n    split_p_groups = []\n    for group in p_groups:\n        # First, we will check if the group is empty (there are no parens)\n        # If it": 2.5831977869727922e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parentheses_groups: List[str] = []\n\n    # Your code here\n    pass\n\n    return parentheses_groups": 1.1584466620681844e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: complete this function\n    pass": 3.166077195354599e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # This is not correct but it is close enough to working code\n    paren_list = paren_string.split()\n    output = []\n    for paren in paren_list:\n        if paren[0] == \"(\" and paren[-1] == \")\":\n            output.append(paren[1:-1])\n        else:\n            output.append(paren)\n    return output": 8.159605106797984e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Use a stack to store each group.\n    paren_stack = []\n\n    # Split the string based on parentheses.\n    paren_list = paren_string.split(')')\n\n    # Loop through the list of parentheses.\n    for paren in paren_list:\n        # Each group gets a separate string.\n        if paren.startswith('('):\n            paren": 5.778639936001164e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output_list = []\n    for i in range(paren_string.count(\"(\")):\n        if paren_string[0:paren_string.find(\"(\") + 1].count(\"(\") == paren_string[0:paren_string.find(\")\") + 1].count(\")\"):\n            output_list.append(paren_string[0:paren_string.find(\"(\") + 1])": 2.5139815867788672e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pairs = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\", \"<\": \">\"}\n    stack = []\n    parens = []\n    for paren in paren_string:\n        if paren in pairs:\n            stack.append(paren)\n        elif not stack:\n            break\n        elif pairs[stack.pop()] == paren:\n            pass\n        else:\n            break\n    else": 1.4012747419314235e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    stack = []\n    for char in paren_string:\n        if char in \"()\":\n            stack.append(char)\n        if char == \")\":\n            output.append(\"\".join(stack))\n            stack.pop()\n    return output": 1.0056884397657209e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"()\":\n        return [\"()\"]\n    else:\n        first_paren = paren_string[0]\n        if first_paren == \"(\":\n            return [paren_string] + separate_paren_groups(paren_string[1:])\n        else:\n            end_bracket_index = paren_string.find(\")\")\n            return [paren_string": 2.818182037187988e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement the function.\n    pass": 2.520299842743913e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    if len(paren_string) == 0:\n        return result\n    paren_stack = []\n    temp_string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            paren_stack.pop()\n            if len(paren_stack) == 0:\n                result.append(": 3.849562458468056e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for paren in paren_string:\n        if paren == \"(\":\n            stack.append(\"(\")\n        elif paren == \")\" and stack:\n            result.append(stack.pop())\n        elif paren == \")\" and not stack:\n            return [paren_string]\n    while stack:\n        result.append(stack.pop())\n    return result": 9.624854612242747e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.count(\"(\") != paren_string.count(\")\"):\n        raise ValueError\n\n    if paren_string.count(\"(\") > paren_string.count(\")\"):\n        raise ValueError\n\n    list_groups = paren_string.split(\")\")\n    list_groups.reverse()\n    string_groups = list_groups\n    string_groups.reverse()": 1.2654244351723569e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    opening = 0\n    current = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            opening += 1\n        elif char == \")\":\n            if opening > 0:\n                opening -= 1\n            else:\n                output.append(current)\n                current = \"\"\n        else:\n            current += char\n    output.append(current)\n    return output": 4.846208405716862e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n\n    # reassign paren_string to lowercase and remove whitespace\n    paren_string = paren_string.lower().replace(' ', '')\n\n    # outer loop to start at the first parenthesis and work our way through the string\n    # adding to the list as we go\n    for i in range(len(paren_string)):\n        if paren_string[i]": 1.9843135324362805e-36, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    for paren in paren_string.strip():\n        if paren == '(':\n            paren_list.append('(')\n        elif paren == ')':\n            if len(paren_list) != 0:\n                paren_list.pop()\n            else:\n                paren_list.append(')')\n    return paren_list": 3.817754748678333e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here\n    pass": 8.108306573849642e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    paren_count = 0\n    end_index = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_count += 1\n        elif char == ')':\n            paren_count -= 1\n\n        if paren_count == 0:\n            groups.append(paren_string[end_index:i + 1])": 1.4889228675702318e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces in string\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    output = []\n\n    # Iterate through string\n    for paren in paren_string:\n        # If the character is '(', add it to the stack\n        if paren == '(':\n            stack.append(paren)\n        # If the character is ')', pop the stack and add": 6.773120062713703e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_stack = []\n    paren_string_length = len(paren_string)\n    start_index = 0\n    end_index = 0\n    group = []\n    list_of_groups = []\n\n    for index in range(paren_string_length):\n\n        if paren_string[index] == '(':\n            open_paren_stack.append(index)\n\n        elif": 1.5054467810069095e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Split on each instance of the open/closed parentheses\n    # Use regular expressions to filter out parentheses that are not properly closed (incorrect)\n    # Use regular expressions to filter out empty parentheses that are not properly closed (incorrect)\n    # Use regular expressions to filter out spaces that are not properly closed (incorrect)\n\n    # Write your code here\n\n    # Hint:\n    # Use regular": 3.4585489797426677e-47, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            paren_stack.pop()\n        else:\n            i += 1": 8.379604301513691e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    p_stack = []  # Stack for parentheses\n    r_stack = []  # Stack for result\n    for paren in paren_string:\n        if paren == '(':\n            p_stack.append(paren)\n            r_stack.append('')\n        elif paren == ')':\n            r_stack[-1] += paren\n            if len(p_stack) > 0:\n                p": 8.221272355832783e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = \"\"\n    counter = 0\n    for char in paren_string:\n        if char == '(':\n            counter += 1\n        if char == ')':\n            counter -= 1\n        if counter == 0 and char != ' ':\n            current_group += char\n        if char == ' ' and counter != 0:\n            groups.append(current_group)\n            current_group": 2.0850292661076046e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_count = 0\n    open_position = 0\n    open_found = False\n    for index, character in enumerate(paren_string):\n        if character == '(':\n            open_count += 1\n            open_position = index\n            open_found = True\n        if character == ')':\n            open_count -= 1\n            if open_count == 0 and open_found:": 3.8075688307900144e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # return a list containing the groups as strings\n    return [group for group in paren_string.split(')(')]": 5.680182593177107e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def split_paren(string: str) -> List[str]:\n        \"\"\"\n        This function assumes that the string is correctly formatted. It splits the string into\n        a list of strings based on the \")\" found in the string. If the string contains no \")\", it\n        returns the original list.\n\n        :param string: The string to split into substrings based on \")\" found in the string.\n        :return: A list": 4.375306624091014e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # def split_paren_groups(parentheses):\n    #     \"\"\"This function takes a string containing nested parentheses, and outputs a list of those strings without\n    #     the nested parentheses.\n    #     \"\"\"\n    #     parens_stack = []\n    #     paren_split = []\n    #     for paren in parentheses:\n    #         if paren == '(':\n    #": 5.06562303581454e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = ''\n    for paren in paren_string:\n        if paren == '(':\n            current_group += paren\n        if paren == ')':\n            if current_group:\n                paren_groups.append(current_group)\n            current_group = ''\n    paren_groups.append(current_group)\n    return paren_groups": 5.436002676590719e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # ---------------------------------------------------------------------------\n    # Your code to define the separate_paren_groups function goes here.\n    # ---------------------------------------------------------------------------\n\n    return []": 6.3649803068153885e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    for s in paren_string.split('):'):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack:\n                    break\n                stack.pop()\n        else:\n            res.append(s)\n    return res": 2.5919643865596276e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    count = 0\n    paren_str = ''\n    for i in paren_string:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if i == '(' and count == 1:\n            paren_str += i\n        elif i == ')' and count == 0:\n            res.append(paren_str)\n            pare": 2.6071713184156514e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    stack = []\n    for i in paren_string:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            stack.pop()\n        if not stack:\n            paren_list.append(\"\")\n        elif i == \"(\" and stack[-1] == \")\":\n            paren_list.append(\"\")\n        else:\n            paren": 7.53328201155858e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_stack = []\n    curr_index = 0\n    paren_string_length = len(paren_string)\n    while curr_index < paren_string_length:\n        if paren_string[curr_index] == \"(\":\n            paren_group_stack.append(\"(\")\n        else:\n            if paren_group_stack:\n                paren_group_stack": 6.91141223230265e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code goes here": 0.0017711812770525655, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    open_braces = []\n    for index, char in enumerate(paren_string):\n        if char == \"(\":\n            open_braces.append(index)\n        elif char == \")\":\n            if len(open_braces) == 0:\n                groups.append(paren_string[index:])\n            else:\n                start = open_braces.pop()\n                end = index": 2.1295687966804126e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_stack = []\n    final_list = []\n    string_builder = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            open_paren_stack.append(char)\n        elif char == \")\":\n            if open_paren_stack:\n                string_builder += char\n                open_paren_stack.pop()\n            else:\n                final_list.append": 4.4998671258419456e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    inner_parens = []\n    outer_parens = []\n    balanced_parens = []\n    for char in paren_string:\n        if char == \"(\":\n            inner_parens.append(char)\n        elif char == \")\":\n            if len(inner_parens) == 0:\n                outer_parens.append(char)": 5.331898285375953e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = [paren_string[i:j] for i, j in\n                    zip(range(len(paren_string)),\n                        range(len(paren_string) + 1)) if paren_string[i:j] != ' ']\n\n    return [g.replace(' ', '') for g in paren_groups]": 6.694874831014779e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = \"\"\n    for ch in paren_string:\n        if ch == \"(\":\n            if not current_group:\n                current_group = \"\"\n            current_group += ch\n        elif ch == \")\" and current_group:\n            paren_groups.append(current_group)\n            current_group = \"\"\n        elif ch == \" \" and current_group:": 1.95786247209769e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE HERE\n    return []": 0.00015726220907787757, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.strip() == '':\n        return []\n\n    if paren_string.find('(') != 0 or paren_string.find(')') != len(paren_string)-1:\n        return [paren_string]\n\n    if paren_string.count('(') == paren_string.count(')'):\n        return [paren_string]\n\n    # Extract": 2.5239477081123602e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    open_braces = '('\n    close_braces = ')'\n    current_paren_string = ''\n    for i in range(len(paren_string)):\n        if paren_string[i] == open_braces:\n            paren_stack.append(i)\n        elif paren_string[i] == close_braces:\n            paren_stack.": 3.3240153428225873e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string_split = paren_string.split()\n    paren_list = []\n    for paren in paren_string_split:\n        if paren.startswith('('):\n            paren_list.append(paren)\n        if paren.endswith(')'):\n            paren_list.append(paren)\n    return paren_list": 8.408388099645655e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # code here\n    pass": 3.5607886016829986e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    start_paren = 0\n    paren_string = paren_string.replace(\" \", \"\")\n    for index, paren in enumerate(paren_string):\n        if paren == '(':\n            if index == 0:\n                start_paren = index\n            else:\n                paren_list.append(paren_string[start_paren:index])\n                start": 1.0625584752703165e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    left_paren_stack = []\n    for p in paren_string:\n        if p == '(':\n            left_paren_stack.append(p)\n        elif p == ')':\n            if len(left_paren_stack) > 0:\n                left_paren_stack.pop()\n            else:\n                paren_group.append(p)\n        else": 3.5752533746565573e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # assert isinstance(paren_string, str)\n    # assert len(paren_string) >= 0\n\n    paren_group = ''\n    paren_groups = []\n    for i in paren_string:\n        if i == '(' or i == ')':\n            paren_group += i\n        elif i == ' ':\n            if paren_group != '':\n                paren_groups.append": 1.2867988123066145e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # A dictionary mapping bracket types to their corresponding closing bracket type.\n    bracket_type_dict = {')': '(', '}': '{', ']': '['}\n\n    # A list to hold the nested groups\n    groups = []\n\n    # A list to hold the opening bracket types encountered.\n    opening_brackets = []\n\n    for bracket in paren_string:\n        if bracket in": 1.7691387304987308e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return ['()']\n    paren_groups = paren_string.split()\n    paren_group_length = len(paren_groups)\n    ret_val = []\n    if paren_group_length == 0:\n        return []\n\n    for paren_group in paren_groups:\n        curr_index = 0\n        curr_index_upper =": 3.954562759878304e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    lst = []\n    count = 0\n    for i in paren_string:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        elif i == ' ':\n            if count == 0:\n                lst.append(paren_string[0:paren_string.index(i)])\n                paren_string = paren_string[paren_": 8.104797856692592e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_stack = []\n    paren_group_list = []\n\n    if not paren_string:\n        return paren_group_list\n\n    for ch in paren_string:\n        if ch == '(':\n            paren_group_stack.append(ch)\n        elif ch == ')':\n            paren_group_stack.pop()\n            if not paren_group_stack:": 6.338947260949724e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parenthesis_stack = []\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            parenthesis_stack.append(i)\n        elif i == ')':\n            if parenthesis_stack:\n                parenthesis_stack.pop()\n            else:\n                paren_list.append(i)\n    return paren_list": 1.172248318818807e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Add your code here.\n    return []": 1.2343428865578181e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = ''\n    nesting_level = 0\n\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            if nesting_level == 0:\n                groups.append(current_group)\n                current_group = ''\n            nesting_level += 1\n            current_group += paren\n        elif paren == ')':\n            if": 2.1378371134118342e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_string = paren_string.replace(\"()\", \"\")\n    paren_string = paren_string.replace(\"  \", \" \")\n    while True:\n        if \"()\" in paren_string:\n            paren_string = paren_string.replace(\"()\", \"\")\n        elif \"  \"": 1.3218281431823238e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def _flatten(parentheses_group):\n        # type: (str) -> List[str]\n        return [part for parts in parentheses_group.split('()') for part in parts.split(' ')]\n\n    return _flatten(paren_string)": 1.889627332678822e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    parentheses_list = []\n    paren_list = []\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_list.append(paren)\n            parentheses_list.append(\"\".join(paren_list))\n        if paren == \")\":\n            paren_list.pop()": 3.688515487437782e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ret_lst = []\n    stack = []\n\n    for x in paren_string:\n        if x == \"(\":\n            stack.append(x)\n        elif x == \")\":\n            if len(stack) > 0:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    stack.append(x)\n        elif x == \" \":\n            if len(stack)": 1.0666410042393318e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # I will add solution here\n\n    result = []\n    current = []\n    for char in paren_string:\n        if char == '(':\n            current.append('(')\n        elif char == ')':\n            result.append(''.join(current))\n            current = []\n    return result": 5.488974238947892e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups: List[str] = []\n\n    return paren_groups": 1.3095658184569481e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_paren_level = -1\n    stack = []\n    paren_groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            current_paren_level += 1\n        elif char == ')':\n            current_paren_level -= 1\n        else:\n            pass\n\n        if current_paren_level == 0:": 7.43980452721576e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Split on opening and closing paren\n    paren_string = paren_string.replace(' ', '')\n    paren_groups = paren_string.split(')(')\n\n    # remove empty paren groups\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group]\n\n    return paren_groups": 4.5189495257177824e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = {\n        '(': [],\n        ')': []\n    }\n    for i, char in enumerate(paren_string):\n        if char in parentheses:\n            parentheses[char].append(i)\n    stack = [(0, 0)]\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append((i,": 4.2459186921597533e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    p_stack = [paren_string]\n    open_brackets = []\n    while len(p_stack) > 0:\n        p = p_stack.pop()\n        if p == '':\n            open_brackets.append('')\n            continue\n        if p[0] == '(':\n            open_brackets.append(p)\n            continue\n        if p[-1] == ')':\n            open": 3.051446205927827e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = paren_string.split('(')\n    paren_groups = list(filter(lambda x: x != '', paren_groups))\n    return paren_groups": 4.833782261749482e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    temp = []\n    for char in paren_string:\n        if char == \"(\":\n            temp.append(char)\n        elif char == \")\":\n            if not temp:\n                output.append(\"\".join(temp))\n                temp = []\n            else:\n                output.append(\"\".join(temp))\n                temp = []\n        elif char == \" \":\n            pass\n        else:": 7.391148606725693e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    result = []\n    open_parentheses = []\n    for char in paren_string:\n        if char == \"(\":\n            open_parentheses.append(char)\n            parentheses.append(\"\")\n        if char == \")\":\n            parentheses[-1] += char\n            if len(open_parentheses) > 0:\n                open_parentheses.pop()": 1.7404834357066593e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_counter = 0\n    paren_stack = []\n\n    for i in paren_string:\n        if i == '(':\n            paren_counter += 1\n        elif i == ')':\n            paren_counter -= 1\n        if paren_counter == 0:\n            result.append(''.join(paren_stack))\n            paren_stack.clear()\n        else": 2.1659785733676023e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if i == 0 or paren_string[i-1] == '(':\n                paren_group.append('(')\n            else:\n                paren_group[-1] += '('\n        elif paren_string[i] == ')':\n            if": 1.168362862740139e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    paren_stack = []\n    paren_stack.append(paren_string[0])\n    i = 1\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            if not paren_string[i - 1] == ')':\n                paren_stack.append(paren_string[i])\n            elif paren_string": 2.212797994019132e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parentheses_stack = []\n    paren_string = paren_string.replace(' ', '')\n\n    for i, paren in enumerate(paren_string):\n\n        if paren == '(':\n            parentheses_stack.append(i)\n        elif paren == ')' and len(parentheses_stack) > 0:\n            paren_string = paren_string[:parentheses": 3.4663789043507907e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    substring = \"\"\n    return_list = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(\"(\")\n            if substring != \"\":\n                return_list.append(substring)\n                substring = \"\"\n        elif char == \")\":\n            substring += char\n            if paren_stack[-1] == \"": 5.571225602846479e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # while loop to break out of the while loop when there is no more open braces\n    while paren_string.find('(') != -1:\n        # set the start and end positions of the first open braces\n        # (will be used to update the positions of the first and last opened brace)\n        start = paren_string.find('(')\n        end = paren_string.find(')')": 1.1365236790240133e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = []\n    close_parens = []\n    current_group = []\n    for i, paren in enumerate(paren_string):\n        if paren == \"(\":\n            open_parens.append(i)\n        elif paren == \")\":\n            close_parens.append(i)\n\n    for i in range(len(open_parens)):\n        current_group.append": 1.9525790073056693e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create a list of the characters in paren_string\n    paren_string_list = []\n    for char in paren_string:\n        paren_string_list.append(char)\n    # create a list of the chunks in paren_string\n    paren_chunks = []\n    paren_chunk = ''\n    paren_chunk_list = []\n    for char in paren_string_": 6.077526850792215e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    start_idx = 0\n    end_idx = 0\n    for idx, paren in enumerate(paren_string):\n        if paren == '(':\n            end_idx = idx\n            paren_groups.append(paren_string[start_idx:end_idx])\n            start_idx = idx\n        elif paren == ')':\n            end_idx = idx": 5.1531614191837674e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n        elif c == ')':\n            if len(paren_stack) == 0:\n                paren_stack.append(c)\n            else:\n                paren_stack.pop()\n        else:\n            if len(p": 1.4623999882486853e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.count('(') == 0:\n        return [paren_string]\n    else:\n        # split paren_string into a list with nested parens, and a list of non-nested parens\n        paren_list = list(paren_string)\n        nested_parens = []\n        non_nested_parens = []\n        for i in range(len(paren_list))": 7.0570378373156085e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # your code goes here\n    result = []\n\n    left_count, right_count = 0, 0\n    current_group = []\n    for character in paren_string:\n        if character == '(':\n            left_count += 1\n        elif character == ')':\n            right_count += 1\n        if left_count == right_count:\n            if current_group:\n                result.append(''.join": 2.676703346307535e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group = ''\n    groups = []\n    for i in paren_string:\n        if i == '(':\n            if group == '':\n                group = ''\n            else:\n                group += i\n        elif i == ')':\n            groups.append(group)\n            group = ''\n        elif i == ' ' and group != '':\n            groups.append(group)\n            group = ''\n        elif i !": 1.2806886386498148e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.strip()\n    if paren_string == \"\":\n        return [\"\"]\n    elif paren_string[0] == \"(\" and paren_string[-1] == \")\":\n        return [paren_string]\n    else:\n        return [paren_string[0]] + separate_paren_groups(paren_string[1:-1]) + [paren_string": 4.217211518897067e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    curr_group = []\n    groups = []\n\n    for char in paren_string:\n        if char == '(':\n            curr_group.append('(')\n        if char == ')':\n            groups.append(''.join(curr_group))\n            curr_group = []\n\n    return groups": 5.823158334742744e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # 1. Write a simple recursive function to find the index of the first matching open parenthesis.\n    #    If no matching open parenthesis is found, return -1\n    #    The next open parenthesis should be indexed as `current_index + 1`\n    # 2. Write a simple recursive function to find the index of the first matching close parenthesis.\n    #    If no matching close parenthesis is found, return -1": 7.2902341664782005e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_string_list = list(paren_string)\n    lst = []\n    temp_paren_string = ''\n    for i in range(len(paren_string_list)):\n        if paren_string_list[i] == '(':\n            if len(temp_paren_string) != 0:\n                l": 3.875898651694339e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack and paren_stack[-1] == '(':\n                paren_stack.pop()\n            else:\n                result.append(char)\n\n    while paren_stack:": 2.4410874060202795e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = ['()']\n    parens.extend(paren_string.replace(' ', '').split(')(')[::-1])\n    return parens": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_string = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n                if not paren_stack:\n                    current_string += ')'\n            else:\n                paren_stack.append(char)": 5.032140989585357e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    open_paren = False\n    paren_group = ''\n    for c in paren_string:\n        if c == '(':\n            if open_paren:\n                open_paren = False\n                paren_group += ')'\n            else:\n                open_paren = True\n                paren_group += c\n        elif c == ')':\n            if not open_p": 3.8759631319116635e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def helper(string, index=0):\n        if len(string) == 0:\n            return [string]\n        if string[index] == '(':\n            new_string = []\n            new_string.append(string[index])\n            for i in range(index + 1, len(string)):\n                if string[i] == ')':\n                    new_string.append(string[i])\n                    new_": 1.0379859183946963e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return [\"\"]\n    if paren_string[0] != '(' or paren_string[-1] != ')':\n        raise ValueError(\"Input string should start and end with '(' and ')'\")\n    res = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':": 6.353069348388069e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    paren_stack = []\n    result = []\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(paren)\n        elif paren == \")\":\n            if len(paren_stack) > 0:\n                paren_group.append(paren)\n                paren_stack.pop()\n                if len(p": 2.401004448367119e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n    final_output = []\n    i = 0\n\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            final_output.append(paren_string[stack[-1]:i+1])\n            stack.pop()\n        i += 1": 1.8799419810833397e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    list_groups = []\n\n    current_group = []\n    temp = ''\n    group = ''\n\n    for char in paren_string:\n        if char == '(':\n            if current_group:\n                list_groups.append(''.join(current_group))\n                current_group.clear()\n            group += '('\n        elif char == ')':\n            if group:\n                group = group[:-": 2.020609842856415e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    \"\"\"\n    Input:\n        paren_string = \"( ) (( )) (( )( ))\"\n    Output:\n        [\"()\", \"(())\", \"(()())\"]\n    \"\"\"\n\n    # Split the input string by the grouping parentheses\n    grouped_paren_string = paren_string.split(\"( )\")\n\n    # Create a list to store the separates\n    separates = []": 6.741218250052252e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    for i in range(len(paren_string)):\n        paren_groups.append(paren_string[i:].replace('()', '').replace('(', '').replace(')', ''))\n\n    return paren_groups": 1.8175116832390563e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    left_counter = 0\n    right_counter = 0\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            left_counter += 1\n        elif i == ')':\n            right_counter += 1\n        if right_counter == left_counter:\n            paren_list.append(paren_string[0:left_counter + right_counter])\n            left_": 2.1502601787548328e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    # Scanning the string and extracting each group\n    index = 0\n    while index < len(paren_string):\n        open_paren = paren_string.find('(', index)\n        if open_paren == -1:\n            break\n        close_paren = paren_string.find(')', open_paren)\n        paren_list.append(p": 3.508596276835289e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    for paren in paren_string:\n        if paren != ' ':\n            if paren == '(':\n                result.append('(')\n            if paren == ')':\n                result.pop()\n    return result": 8.619311843435875e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = ''\n    paren_groups = []\n\n    if len(paren_string) == 0:\n        return paren_groups\n\n    for index, char in enumerate(paren_string):\n        if char == '(' or char == ')':\n            paren_group += char\n        else:\n            paren_groups.append(paren_group)\n            paren_group = ''": 8.84551590760736e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = ''\n    for c in paren_string:\n        if c == '(':\n            if current_group:\n                result.append(current_group)\n                current_group = ''\n            else:\n                result.append(c)\n        elif c == ')':\n            if current_group:\n                result.append(current_group)\n                current_group = ''\n            else": 1.8637764217112288e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    paren_list = list(paren_string)\n    for idx, paren in enumerate(paren_list):\n        if paren == '(':\n            paren_stack.append(idx)\n            if idx + 1 < len(paren_list) and paren_list[idx + 1] == '(':\n                paren_list.": 6.7622209227673385e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    open_braces_stack = []\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_stack.append(ch)\n        elif ch == ')':\n            open_braces_stack.pop()\n            if len(open_braces_stack) == 0:\n                paren_groups.append(\"\")\n\n        if len(open": 1.2544663772918006e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your function body here\n    pass": 3.33215938661176e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    paren_list = []\n    paren_stack = []\n    paren_count = 0\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_count += 1\n            paren_stack.append(paren)\n        elif paren == \")\":\n            paren_count -= 1\n            paren_stack.pop()\n        if": 2.863553916890104e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # separating pairs of parentheses, and then removing the inner parentheses,\n    # and then replacing the inner parentheses with nothing\n    # --> O(N)\n    while paren_string.count('()') != 0:\n        paren_string = paren_string.replace('()', '')\n    # removing the outer parentheses from the remaining parentheses\n    # --> O(N)": 7.523557889414479e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    count = 0\n    p_list = []\n    for c in paren_string:\n        if c == '(':\n            count += 1\n            if count == 1:\n                p_list.append('')\n        if c == ')':\n            count -= 1\n        if count > 0:\n            p_list[-1] += c\n    return p_list": 1.696902115226121e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    opening_paren = []\n    for i, letter in enumerate(paren_string):\n        if letter == '(':\n            opening_paren.append(i)\n        elif letter == ')':\n            if opening_paren:\n                opening_paren.pop()\n            else:\n                groups.append(paren_string[opening_paren[-1]:i+1])": 1.3017706672006864e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the string into an array of strings, each one is a potential group of parentheses\n    parens = paren_string.split(' ')\n    # create a dictionary to store the split groups\n    paren_dict = {}\n    # split the groups into individual items\n    for i in parens:\n        # split the items into an array of strings\n        inner = i.split(')')\n        # if the array has a": 8.789312278908778e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: write your code here\n    return []": 6.080505789725578e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create two lists to store the results and the input\n    paren_list = list(paren_string)\n    result_list = []\n\n    # create a list of the indices where we are expecting to find a closing bracket\n    close_indices = []\n    for i, char in enumerate(paren_list):\n        if char == \"(\":\n            close_indices.append(i)\n\n    # pop": 1.0909515132191867e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # store all groups in a list of strings\n    # when I find a '(' push to the stack\n    # when I find a ')' pop from stack\n\n    groups = []\n    paren_stack = []\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            # push index of '(' to stack\n            paren_stack.append(i)\n        elif char == \")": 9.393822096674182e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    group_stack = []\n    groups = []\n    group = ''\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            group_stack.append(i)\n        elif paren_string[i] == ')':\n            start = group_stack.pop()\n            group += paren_string[start: i+1]\n            if len(": 2.844120178894484e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '( ')\n    paren_string = paren_string.replace(')', ' )')\n\n    paren_list = []\n    open_count = 0\n\n    for idx, item in enumerate(paren_string):\n        if item == '(':\n            open_count": 4.06302728728599e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack: List[int] = []\n    paren_list: List[str] = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            paren_list.append(paren_string[paren_stack.": 4.611218976393089e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces = ['(', '[', '{', '<']\n    closing_braces = [')', ']', '}', '>']\n    curr = ''\n    separating_paren_groups = []\n    for i in paren_string:\n        if i in open_braces:\n            curr = curr + i\n        elif i in closing_braces:\n            if curr !=": 6.652210782549651e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string.replace(bracket, '') for bracket in paren_string if bracket in '()']": 6.862399952335949e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_of_tuples = []\n    for i in paren_string:\n        if i == \"(\":\n            list_of_tuples.append(0)\n        elif i == \")\":\n            list_of_tuples.pop()\n    return paren_string.split(\"()\")": 2.498031853191862e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # this is a recursive function\n    def find_group_separator(string: str, left_counter: int, right_counter: int) -> int:\n        if string[right_counter] == ')' and right_counter - left_counter == 1:\n            return right_counter\n        if string[right_counter] == ')':\n            return find_group_separator(string, left_counter + 1, right_": 4.691113637452093e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('((', '(')\n    paren_string = paren_string.replace('))', ')')\n    return paren_string.split(')(')": 4.0419599641926985e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Here is the first thing you need to do: implement this function.\n    # You can take a look at the tests above to see what the answer to the\n    # given input strings should be.\n\n    return ['()', '(())', '(()())']": 2.1245607365546927e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    paren_open = 0\n    paren_closed = 0\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_open += 1\n        elif paren == ')':\n            paren_closed += 1\n        else:\n            pass\n\n        if paren_open == paren_closed and paren": 2.0056675902991803e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create a stack of paren groups\n    stack = []\n    paren_stack = []\n\n    for char in paren_string:\n        # if char is open paren, push to stack\n        if char == '(':\n            stack.append(char)\n\n        # if char is close paren, remove top of stack if closing paren matches top of stack\n        elif char == ')':\n            if stack:": 2.4029618394790248e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # raise NotImplementedError(\"Separate paren groups not implemented.\")\n\n    result = []\n    stack = []\n\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n\n        elif c == ')':\n            if len(stack) == 0:\n                result.append('')\n            else:\n                result.append(c)\n                stack.pop()": 2.7981591969754024e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    count = 0\n    result = []\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0 and char != ' ':\n            paren_list.append(char)\n            count = 0\n    for paren in paren_list:\n        if paren == '": 2.528599152642434e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # remove pass and implement function": 3.2483422627959963e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    return ['()']": 8.730239323368535e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_group = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if len(current_group) > 0:\n                paren_groups.append(current_group)\n                current_group = []\n            current_group.append(paren_string[i])\n        elif paren_string[i]": 2.3269677828871266e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    group_stack = []\n    current_group = ''\n\n    for paren in paren_string:\n        if paren == '(':\n            group_stack.append(current_group)\n            current_group = ''\n        elif paren == ')':\n            group_stack.append(current_group)\n            current_group = ''\n            if len(group_stack) >= 2:\n                group_stack[-": 7.495530450558024e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return []\n    elif paren_string[0] == '(':\n        return [paren_string] + separate_paren_groups(paren_string[1:])\n    elif paren_string[-1] == ')':\n        return separate_paren_groups(paren_string[:-1]) + [paren_string]\n    else:": 1.2187725688441463e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    open_braces = 0\n    current_string = ''\n\n    # check for non-paren elements\n    for char in paren_string:\n        if char != '(' and char != ')':\n            current_string += char\n            continue\n\n        if char == '(':\n            open_braces += 1\n            if open_braces == 1:\n                current_string": 1.0618169907092592e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code here\n    ...": 1.1457541120165278e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if paren_stack:\n                paren_list.append(paren_stack.pop())\n    if paren_stack:\n        raise ValueError(\"Unexpected closing parenthesis\")\n\n    return": 1.292302493977679e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # init variables\n    parens_stack = []\n    current_group = []\n    grouped_strings = []\n    current_string = ''\n    current_balanced = True\n    # iterate through the input paren string\n    for char in paren_string:\n        # if a parenthesis is encountered\n        if char in '()':\n            # if the parenthesis is open, add it to the stack\n            if char ==": 6.366121655204518e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return paren_string\n    else:\n        i = 0\n        paren_stack = []\n        while i < len(paren_string):\n            if paren_string[i] == '(':\n                paren_stack.append(paren_string[i])\n            elif paren_string[i] == ')' and len(paren_stack) == 0:": 5.987381994694035e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Replace this stub code with your solution.\n    pass": 2.634655408331484e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_stack = []\n    open_paren_stack = []\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_stack.append(idx)\n        elif char == ')':\n            if open_paren_stack:\n                close_idx = open_paren_stack.pop()\n                group_stack.append(paren_string[close_": 1.590194708768392e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Use a stack to track the open/close parens in each group of nested parens.\n    # If a \")\" is encountered, then all the open parens up to that index are\n    # balanced and will be joined to form a single string.\n    #\n    # The code below will start at the beginning of the input string and work\n    # backwards.\n    stack = []\n    for i, char in enumerate(paren_string": 5.631009137070228e-54, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    raise NotImplementedError(\"This function is incomplete\")": 1.5262650416199755e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Initialize two variables to keep track of the current string and the index\n    current_string = ''\n    index = 0\n\n    # Iterate through the input string\n    while index < len(paren_string):\n        # Check if the current character is an open parenthesis\n        if paren_string[index] == '(':\n            # If it": 1.2401950538496725e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO Implement separate_paren_groups\n    pass": 8.210627940394254e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    string_list = []\n    open_parens = 0\n    braces = 0\n    open_braces = 0\n    close_parens = 0\n    closed_parens = 0\n    open_braces_string = '('\n    close_braces_string = ')'\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_parens += 1": 3.2981884806047774e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement this function\n    #\n    # This function returns a list of strings that are made up of the separate\n    # groups.  You should return a list of strings, not a list of list of\n    # strings.\n    #\n    # You should split the parentheses at the first open parenthesis found in\n    # paren_string.  After that, you should use recursion to find the first\n    # closed parenthesis": 5.537589996806809e-47, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code below this line\n    if paren_string == '':\n        return [paren_string]\n    left_braces = paren_string.count('(')\n    right_braces = paren_string.count(')')\n    if left_braces == right_braces:\n        return [paren_string]\n    if left_braces < right_braces:\n        string_list =": 2.0318577681707558e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n        elif char == ')' and len(paren_stack) != 0:\n            paren_groups.append(''.join(paren_stack))\n            paren_stack.pop()\n        else:\n            continue\n\n    pare": 5.219040744487438e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string_temp = []\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_list.append(paren_string_temp)\n            paren_string_temp = []\n        elif paren == ')':\n            paren_list.append(''.join(paren_string_temp))\n            paren_string_temp": 5.73408799020537e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = [0] * (paren_string.count('(') - paren_string.count(')'))\n    open_paren = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            open_paren += 1\n        elif c == ')':\n            parens[open_paren - 1] = i + 1\n            open_paren -=": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_string = ''\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')' and len(paren_stack) > 0:\n            current_string += char\n            paren_stack.pop()\n        elif char == ')' and len(paren_stack) == 0:\n            current_": 3.3145951593604763e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # # iterate over string\n    # parens = []\n    # open_parens = []\n    # while len(paren_string) > 0:\n    #     if paren_string[0] == '(':\n    #         parens.append(paren_string[0])\n    #         open_parens.append(paren_string[0])\n    #         paren_string = paren_string": 1.876900417532983e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create a stack to store unmatched parentheses\n    unmatched_parens = []\n    # create a stack to store the final group strings\n    final_groups = []\n\n    # loop through each character in the input string\n    for char in paren_string:\n        # if the character is an open parenthesis, add it to the unmatched parentheses stack\n        if char == \"(\":\n            unmatched": 1.2783107718450858e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            j = i\n            while paren_string[j] != \")\":\n                j += 1\n            parentheses.append(paren_string[i:j+1])\n            i = j + 1\n        i += 1\n    return parentheses": 1.7704965430027702e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    current = ''\n    for char in paren_string:\n        if char == '(':\n            current += char\n        elif char == ')':\n            if len(current) > 0:\n                parens.append(current)\n                current = ''\n            else:\n                raise ValueError('unbalanced parentheses')\n        elif char == ' ':\n            pass\n        else:\n            raise Value": 3.078936697711734e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def _split(string):\n        if string == '':\n            return []\n        # print('string = {}'.format(string))\n        if string[0] == '(':\n            # if first char is open, we need to split it\n            # search for first close and split the string there\n            start_index = string.index(')')\n            if start_index == len(string) - 1:\n                return string[": 2.682449256152648e-42, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the string into groups of parentheses\n    groups = paren_string.split('()')\n\n    # convert each group to a list of strings\n    groups = [group.split('(') for group in groups]\n\n    # remove all empty strings from the list\n    groups = [group for group in groups if group]\n\n    # join the list back together\n    groups = ['(' + ')' * group.count(')": 6.577268953267401e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = paren_string.replace(\" \", \"\").split(\")\")\n    return list(filter(lambda x: x.count(\"(\") == x.count(\")\"), parens))": 5.527025815323151e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # your code here\n\n    return []": 3.544475466282956e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = \"\"\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            if group != \"\":\n                groups.append(group)\n                group = \"\"\n            group += \"(\"\n        elif paren_string[i] == \")\":\n            if group != \"\":\n                groups.append(group)\n                group =": 5.6526716316313814e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            paren_group = []\n            while paren_stack:\n                paren_group.append(paren_stack.pop())\n            paren_stack.append(paren_group)": 1.5540947843871713e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    paren_groups = []\n\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n\n        elif paren == ')':\n            if stack:\n                paren_groups.append(''.join(stack))\n                stack.pop()\n\n    return paren_groups": 7.319925378624746e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Split the string by the opening and closing parens\n    paren_split = paren_string.split('()')\n\n    # Store the resulting strings\n    paren_group = []\n    for item in paren_split:\n        # If the item does not contain an opening parenthesis, it is a closing parenthesis. Add to paren_group.\n        if item.find('(') == -1 and item.find": 2.539038101352409e-36, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            result.append(stack.pop())\n        else:\n            result.append(char)\n    return result": 4.702515053679192e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_list = []\n    paren_string = paren_string.split()\n    for item in paren_string:\n        if paren_stack == []:\n            paren_stack.append(item)\n        else:\n            if paren_stack[-1] != item and item != \"(\":\n                paren_list.append(\"\".join(paren_": 1.2058143354863072e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(' ', '')\n    print(paren_string)\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            paren_stack.pop()\n        else:\n            raise ValueError('Invalid character in paren string')": 4.362753561881891e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(' ', '')\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n    return paren_stack": 6.040790886819546e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def paren_group(paren_string: str) -> List[str]:\n        if paren_string.startswith('(('):\n            return paren_group(paren_string[2:])\n        elif paren_string.startswith('))'):\n            return paren_group(paren_string[1:])\n        elif paren_string.startswith('()'):": 1.0982267092050978e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"()\":\n        return [paren_string]\n    else:\n        new_list = []\n        for i in range(len(paren_string)):\n            if paren_string[i] == \"(\":\n                new_list.append(paren_string[i:])\n            elif paren_string[i] == \")\":\n                new_list.append(paren_string": 2.627470372774936e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[start:end] for start, end in pair_indices(paren_string)]": 6.779148185701743e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_braces = []\n    for char in paren_string:\n        if char == '(':\n            open_braces.append('(')\n        elif char == ')':\n            open_braces.pop()\n        elif len(open_braces) == 0:\n            result.append(char)\n        else:\n            pass\n    return result": 5.3691772022694556e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    results = []\n    paren_stack = []\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_stack.append(paren_string[0])\n    for paren in paren_string[1:]:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')' and paren_stack[-1] == '(':": 2.1113310500941284e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Feel free to write your own tests for this function.\n    pass": 8.893553745653617e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # bracket_stack = []\n    # results = []\n    # for c in paren_string:\n    #     if c == '(':\n    #         bracket_stack.append(c)\n    #     elif c == ')':\n    #         bracket_stack.pop()\n    #     elif c == ' ' and len(bracket_stack) > 0:\n    #         continue\n    #     elif c": 2.0801984867267958e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_list.append(paren_string[i])\n        elif paren_string[i] == ')':\n            if len(paren_list) != 0:\n                paren_list.pop()\n            else:\n                paren_list.": 5.473553028176127e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # if there are only open parentheses, return it as it is\n    if paren_string.count('(') == paren_string.count(')'):\n        return [paren_string]\n    # if it's empty string, return it as it is\n    elif paren_string == \"\":\n        return []\n\n    # split the string into a list of strings, which are each a pair of parentheses": 8.784491786255224e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # I tried to be efficient by using a variable that keeps track of the number of open parentheses\n    # I would rather have to iterate through the string to find the open parentheses, then iterate backwards\n    # to find the close parentheses\n    # I implemented this the other way.\n    # I believe it is more readable, but I think this is more efficient\n\n    open_parentheses_counter = 0\n    current": 3.3225375408640306e-64, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return paren_string\n\n    paren_string = remove_spaces(paren_string)\n    paren_string_list = [paren_string[0]]\n    for i in range(1, len(paren_string)):\n        paren_string_list.append(paren_string[i])\n\n    return separate_paren_groups(paren_": 2.6601357565134967e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # We can use a stack to keep track of the current open paren group.\n    # If we find a new open paren, we push it onto the stack.\n    # If we find a close paren, we pop the stack until we find an open paren.\n    # We then add the current paren group to the list of paren groups\n    # Then we reset the current paren group to an empty string\n    # After the for": 2.454296509914501e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens = ['(', '{', '[', '<']\n    close_parens = [')', '}', ']', '>']\n    open_parens_index = open_parens.index('(')\n    close_parens_index = close_parens.index(')')\n    paren_stack = []\n    stack_item = ''\n    paren_list = []\n    paren": 6.664088420135979e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    if paren_string.startswith('('):\n        return [paren_string] + separate_paren_groups(paren_string[1:])\n    else:\n        return separate_paren_groups(paren_string[1:])": 3.5574520999542214e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(\" \", \"\")\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(i)\n        elif paren_string[i] == \")\":\n            if len(paren_stack) == 0:\n                paren_stack.append(i": 1.0178904208476509e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = []\n    stack = []\n    result = []\n    last_index = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            stack.append(i)\n        elif ch == ')':\n            if len(stack) == 0:\n                result.append(paren_string[last_index:i])\n                last_index = i + 1": 2.201258815502399e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    temp_list = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        if char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                paren_list.append(''.join(temp_list": 4.217234786745753e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return [paren_string]\n    result = []\n    for i in range(len(paren_string) - 1):\n        if paren_string[i] == '(' and paren_string[i + 1] == ')':\n            result.append(paren_string[0: i] + paren_string[i + 2:])\n        elif paren_": 1.715786896140934e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Convert input string to list of characters\n    paren_list = list(paren_string)\n    # Keeps track of the current group\n    curr_group = []\n    # Keeps track of the indexes of the opening bracket\n    opening_bracket_indexes = []\n    # Keeps track of the indexes of the closing bracket\n    closing_bracket_indexes = []\n    # Keeps track of the indexes": 7.83834547100918e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # the stack holds paren elements in this case, start from 0\n    stack = [0]\n    # list of all paren groups\n    group = []\n    for idx, paren in enumerate(paren_string):\n        if paren == '(':\n            # if the next paren is open, push to the stack\n            stack.append(idx)\n            # continue to next iteration\n            continue\n        if paren": 1.9418584099549463e-45, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # initialise list for storing values\n    paren_list = []\n\n    # create variables for tracking index position in string and number of levels\n    i = 0\n    level = 0\n\n    # while the index value is smaller than the length of the string, continue\n    while i < len(paren_string):\n\n        # if the character at the index is an open parenthesis, increment the level\n        if paren_string[": 5.1979363298092e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    if paren_string[0] == \"(\":\n        output.append(\"()\")\n        left_paren = 1\n    elif paren_string[0] == \")\":\n        output.append(\"()\")\n        right_paren = 1\n    else:\n        output.append(paren_string[0])\n        left_paren = 1\n        right_paren = 1\n    for char": 1.6105743339108655e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) < 2:\n        return [paren_string]\n    list_of_substrings = []\n    for i in range(0, len(paren_string), 2):\n        if paren_string[i] == '(' and paren_string[i + 1] == ')':\n            list_of_substrings.append(paren_string[i: i + 2])": 7.509933351039918e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    output_list = []\n    starting_index = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\" and paren_string[i + 1] == \"(\":\n            output_list.append(paren_string[starting_index:i])\n            starting_index = i\n        elif i == len(paren_string) - 1:": 4.502758536624236e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if paren_stack:\n                result.append(\"\".join(paren_stack))\n                paren_stack.pop()\n            else:\n                return None\n\n    if paren_stack:\n        return": 5.056781202674418e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_output = []\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            paren_stack.pop()\n        if not paren_stack:\n            paren_output.append('')\n\n    return paren_output": 1.6421054007113979e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_string = list(paren_string)\n    index = 0\n    while len(paren_string) > 0:\n        if paren_string[index] == '(':\n            paren_string.pop(0)\n            paren_groups.append('')\n            index -= 1\n        elif paren_string[index] == ')':\n            paren_string": 4.674462603784641e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return []\n\n    paren_list = []\n    current_string = ''\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if len(current_string) > 0:\n                paren_list.append(current_string)\n                current_string = ''\n            paren_list.": 6.924973096371056e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # for each group ( ), ()\n    # use a stack to keep track of open parentheses\n    # for each group:\n    # pop the stack as long as the stack is not empty\n    # use a flag to track whether or not the group is balanced\n    # when the stack is empty and all parentheses have been popped\n    # return the list of separated strings\n    stack = []\n    result = []\n    flag = False": 1.0459073173590754e-48, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_list = []\n\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                return paren_list\n            else:\n                paren_stack.pop()\n        else:\n            pass": 2.859194206049283e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    stack.append(paren_string[0])\n    i = 1\n    count = 0\n    final_output = []\n    while count < len(paren_string):\n        if stack[-1] == '(' and paren_string[i] == ')':\n            final_output.append(stack.pop())\n            count += 1\n        elif stack[-1] == '(' and paren_string": 1.236373284581335e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: code here.": 1.1237476944622002e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    paren_stack = []\n    string = ''\n    paren_count = 0\n    paren_index = 0\n    # This if statement is here because the paren_stack will have an empty string in the very first group.\n    if paren_string[0] == '(':\n        string = paren_string\n        paren_stack.append('')\n    for char in paren_string:": 1.9142174012057964e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_group = ''\n    paren_depth = 0\n    for char in paren_string:\n        if char == '(':\n            paren_depth += 1\n        if char == ')':\n            paren_depth -= 1\n        if char == '(' and paren_depth == 0:\n            paren_groups.append(paren_group)\n            paren_": 2.956612937546019e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            group += char\n        elif char == ')' and group != \"\":\n            group += char\n            groups.append(group)\n            group = \"\"\n\n    if group:\n        groups.append(group)\n\n    return groups": 2.49381551604857e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    final_list = []\n\n    # create a loop to add each group to the final list\n    for i in paren_string:\n        if i == '(':\n            final_list.append(i)\n        if i == ')':\n            final_list.append(i)\n\n    return final_list": 1.6189404618952534e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string_split = paren_string.split()\n    paren_string_split_clean = [paren for paren in paren_string_split if paren]\n    return list(map(lambda x: x[1:-1], paren_string_split_clean))": 1.4281393843986293e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    nested_paren_group = []\n\n    for paren in paren_string:\n        if paren == '(':\n            nested_paren_group.append(paren)\n            continue\n        if paren == ')':\n            nested_paren_group.append(paren)\n            paren_groups.append(nested_paren_group.copy())\n            nested": 1.6926816140319485e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    assert (len(paren_string) > 0)\n    paren_string_items = [str(item) for item in paren_string]\n    split_parens = []\n\n    # function that uses an iterable to split the string into individual items\n    def split_into_items(paren_string_items: List[str]) -> List[str]:\n        iterable_start = 0\n        paren_items": 4.0983831551650365e-48, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    current_string = \"\"\n    last_open_paren = None\n    for paren in paren_string:\n        if paren == '(':\n            current_string += paren\n        if paren == ')':\n            if last_open_paren:\n                current_string += paren\n                current_string = current_string.replace(last_open_paren, \"\", 1)": 1.019203672554924e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n    open_group = False\n    sub_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            if open_group:\n                group_list.append(sub_group)\n                sub_group = ''\n            open_group = True\n        elif char == ')':\n            if open_group:\n                sub_group += char\n                if len(sub": 1.0975733296244559e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write code to separate parentheses groups in paren_string here.\n    # You can change this function body to help you build your solution.\n    # This function is meant to be a starting point only.\n\n    # build a list of parentheses groups\n    paren_list = []\n\n    # build a list of paren indexes\n    paren_indexes = []\n\n    # build a list of braces indexes": 3.366900984844113e-45, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = \"\"\n    depth = 0\n\n    for i in paren_string:\n        if i == \"(\":\n            depth += 1\n        if i == \")\":\n            depth -= 1\n        if i == \"(\" and depth == 0:\n            groups.append(group)\n            group = \"\"\n        else:\n            group += i\n\n    if depth != 0:\n        raise ValueError(\"": 1.94241533226233e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    if paren_string == '':\n        return []\n    paren_list = list(paren_string)\n    paren_list_2 = list(paren_string)\n    del paren_list[0]\n    del paren_list[len(paren_string) - 1]\n    paren_string_2 = ''.": 1.3272959926628208e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    parens = []\n    for idx, p in enumerate(paren_string):\n        if p == '(':\n            parens.append(idx)\n        elif p == ')':\n            paren_groups.append(''.join(paren_string[start:end] for start, end in zip(parens, parens[::-1])))\n            del parens[-1]": 1.1182017853999518e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            if i > 0 and paren_string[i-1] == ' ':\n                result.append('')\n            paren_stack.append('(')\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                result.": 3.16442837862071e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    i = 0\n    # While i is less than the length of the string and is within the parens:\n    while i < len(paren_string) and paren_string[i] != \")\":\n        # If the char is a parenthesis and is not a closing parenthesis, add the char to the paren list.\n        if paren_string[i] == \"(\":\n            parens.": 4.058498592038689e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # first we use a stack to store the parentheses that we are going to separate.\n    # this works because each open parenthesis must be matched with its matching close parenthesis.\n    # the stack will be working from the back\n    paren_stack = []\n    paren_groups = []\n\n    # loop through the string of parens\n    for paren in paren_string:\n        # add each open paren to the stack": 2.1387710620859774e-45, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_index = i\n        elif paren_string[i] == ')':\n            result.append(paren_string[open_paren_index:i + 1])": 1.3398863038309363e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren = []\n    curr_level = 0\n    start_index = 0\n    group_index = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            curr_level += 1\n        elif paren_string[i] == ')' and curr_level > 0:\n            curr_level -= 1\n        if cur": 1.0835197246658497e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n\n    all_groups = []\n    stack = []\n\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        if i == ')':\n            all_groups.append(stack.pop())\n\n    return all_groups": 1.2975220087963901e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = ''\n    counter = 0\n    for i in paren_string:\n        if i == '(':\n            counter += 1\n            group += i\n        elif i == ')' and counter != 0:\n            groups.append(group)\n            group = ''\n            counter -= 1\n        elif i == ')':\n            group = group[:-1]\n    return groups": 2.4116484345298783e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = ''\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            if open_paren_count > 1:\n                groups.append(group)\n                group = ''\n        elif char == ')':\n            open_paren_count -= 1\n            if open_paren_count": 2.022491809742636e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_stack = []\n    parens_left = 0\n    parens_right = 0\n    for paren in paren_string:\n        if paren == '(':\n            parens_left += 1\n        elif paren == ')':\n            parens_right += 1\n        if parens_right > parens_left:\n            # we found a group\n            group = \"\"\n            while parens_stack": 2.0275474475833582e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_group = []\n    group_list = []\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        if char == ')':\n            open_count -= 1\n        if open_count == 0:\n            group_list.append(''.join(current_group))\n            current_group = []\n    return group_list": 3.3768952721127656e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def separate_paren_groups_helper(paren_string: str) -> List[str]:\n        \"\"\"\n        Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n        separate those group into separate strings and return the list of those.\n        Separate groups are balanced (each open brace is properly closed) and not nested within each other\n        Ignore any spaces in the input string.": 6.429263160402196e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if len(current_group) > 0:\n                result.append(''.join(current_group))\n                current_group.clear()\n    result.append(''.join(current_group))\n    return result": 1.0243458926101204e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Implement this function\n    pass": 2.541145476087579e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    index = 0\n    while index < len(paren_string):\n        group = []\n        if paren_string[index] == '(':\n            counter = 0\n            while counter < 2:\n                if paren_string[index + 1] == '(':\n                    group.append(paren_string[index:index + 2])\n                    index += 2\n                else:\n                    group.append(": 4.3065387714240195e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return list(map(lambda paren: paren.strip(), paren_string.strip().split(')(')))": 5.3468359709891945e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Write your code here\n\n    return []": 3.93318180775305e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            group += char\n        elif char == \")\":\n            if group:\n                groups.append(group)\n                group = \"\"\n        elif char != \" \":\n            group += char\n\n    return groups": 6.571979402030824e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # YOUR CODE GOES HERE\n    return [paren_string]": 1.2780150296500218e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n\n    for index, paren_group in enumerate(paren_string):\n        if paren_group == '(':\n            paren_list.append(paren_string[index + 1:])\n\n    return paren_list": 1.534566315146683e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # todo: use stack to track depth and find parentheses to close\n    pass": 4.879069406820317e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    curr_paren = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(curr_paren)\n            curr_paren = \"\"\n        elif char == \")\":\n            curr_paren = paren_stack.pop() + char\n            paren_stack.append(curr_paren)\n            cur": 1.5730751815524236e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def _inner_function(s):\n        try:\n            bracket_stack = []\n            for char in s:\n                if char == '(':\n                    bracket_stack.append(char)\n                elif char == ')':\n                    if bracket_stack:\n                        bracket_stack.pop()\n                    else:\n                        bracket_stack.append(char)\n            return bracket_stack\n        except IndexError": 7.77880289771869e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            group_stack.append(paren_string[i:i + 2])\n        if paren_string[i] == ')' and group_stack[-1] == '(':\n            group_stack.pop()\n\n    return group_stack": 7.4575822029418e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_brace_count = 0\n    open_paren_list = []\n    close_paren_list = []\n    for ch in paren_string:\n        if ch == '(':\n            open_paren_list.append(ch)\n            open_brace_count += 1\n        elif ch == ')':\n            close_paren_list.append(ch)\n            open_brace_count -= 1": 3.143889395118798e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            groups.append(''.join(stack))\n            stack.pop()\n    return groups": 3.6254872010193416e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # base case\n    if paren_string == '':\n        return []\n\n    # recursive case\n    if paren_string.count('(') != paren_string.count(')'):\n        raise ValueError('Incorrect amount of brackets')\n\n    # separate parentheses from all elements of the list\n    open_parens, close_parens = [], []\n    for i, char in enumerate(": 2.238818898990931e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # pylint: disable=too-many-nested-blocks\n\n    sep_paren_groups = []\n    groups = []\n    open_braces = []\n    for char in paren_string:\n        if char == '(':\n            open_braces.append(char)\n        elif char == ')':\n            if open_braces:\n                open_braces.pop()\n                if not open_": 5.093091701378069e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def contains_paren(strng):\n        return any(char.isalpha() for char in strng)\n\n    result_list = []\n\n    for i in range(0, len(paren_string)):\n        if contains_paren(paren_string[i]):\n            if paren_string[i] != '(':\n                result_list.append(paren_string[i])": 2.531933332307832e-23, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    return res": 2.8038722621030872e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    open_parens = 0\n    for char in paren_string:\n        if char == '(':\n            open_parens += 1\n        elif char == ')':\n            if open_parens > 0:\n                open_parens -= 1\n            else:\n                return paren_string.split(')')\n        else:\n            continue\n    if open_parens == 0:": 8.012872107476293e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def paren_search(index: int, starting_paren: str, ending_paren: str):\n        \"\"\"\n        Helper function that searches for an opening parenthesis and returns the index of the end of the\n        containing group.\n        :param index: The index to start the search from.\n        :param starting_paren: The type of parenthesis to search for.\n        :param ending_paren: The type of parenthesis": 5.271685318820296e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string or not paren_string[0]:\n        return []\n\n    stack = []\n    stack_index = 0\n\n    for index, character in enumerate(paren_string):\n        if character == '(':\n            stack.append(index)\n            stack_index += 1\n\n        if character == ')':\n            if stack_index:\n                stack_index -= 1\n            else:": 3.6805701294109207e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    pointer = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            result.append(paren_string[pointer:i])\n            pointer = i + 1\n        elif paren_string[i] == ')':\n            result.append(paren_string[pointer:i])\n            pointer = i + 1": 4.680688568727554e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the string into groups of parentheses\n    paren_groups = paren_string.split(')')\n\n    # set a list to hold the results\n    final_groups = []\n\n    # iterate through the groups\n    for group in paren_groups:\n\n        # create a list of the group split by open parentheses\n        temp = group.split('(')\n\n        # this loop will get all the": 2.4655144987577854e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    paren_stack = []\n    open_paren = False\n\n    for i in paren_string:\n        if i == '(':\n            open_paren = True\n        if open_paren:\n            if i == ')':\n                paren_stack.pop()\n            else:\n                paren_stack.append(i)\n        else:\n            paren_group": 3.7074044719824054e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # add your code here\n    return []": 8.95623918408601e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = list(paren_string.strip())\n    idx = 0\n    paren_list.reverse()\n    while idx < len(paren_list):\n        if paren_list[idx] == '(':\n            paren_list[idx] = \")\"\n        elif paren_list[idx] == \")\":\n            paren_list[idx] = \"(\"\n        idx += 1": 2.1257722025631095e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    open_braces = 0\n    current_word = ''\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        elif char == ')':\n            open_braces -= 1\n            if open_braces == 0:\n                paren_list.append(current_word)\n                current_word = ''\n        else:": 1.0894751844067065e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_stack.append('(')\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '(')\n    paren_string = paren_string.replace(')', ')')\n    # print(paren_string)\n\n    # First check if string is empty and if so just return an empty": 1.6424603940363418e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_group = []\n    for paren in paren_string:\n        if paren == '(':\n            if paren_group:\n                paren_list.append(''.join(paren_group))\n            paren_group.clear()\n        elif paren == ')':\n            if paren_group:\n                paren_list.append(''.join(paren": 3.808681277932542e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # This function does not need to be implemented to pass the tests\n    # Use the below as an example and modify it as needed.\n    # Use the instructions provided in the problem description to complete this function.\n    # If you do not get the test to pass, make sure that you have a variable name and a variable type\n    # that is appropriate to store the list of strings returned from this function.\n    # Return the list of strings\n    return ['',": 1.1187244081912213e-65, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_strings = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_strings.append(get_group(paren_string, i))\n            i += 1\n        else:\n            i += 1\n    return paren_strings": 1.026258883496321e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    # print(paren_string)\n    # paren_string = paren_string.replace(' ', '')\n\n    output_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            bracket = '('\n            count = 1\n            for j in": 7.241459600597056e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[i:j+1] for i, j in zip(range(0, len(paren_string)), range(1, len(paren_string) + 1))\n            if paren_string[i:j] != ' ' and paren_string[i] == '(' and paren_string[j] == ')']": 1.0534496822375718e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    count = 0\n    paren_string_list = []\n\n    for i in paren_string:\n        if i == '(':\n            count += 1\n            paren_string_list.append(i)\n        elif i == ')':\n            count -= 1\n            paren_string_list.append(i)\n        elif i == ' ':\n            if count == 0:\n                paren_string_list": 7.020808815542671e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    current_list = []\n    open_paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            if open_paren_count == 1:\n                current_list = [char]\n            else:\n                current_list.append(char)\n        elif char == ')':\n            open_paren_count": 5.12897024830059e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    lst = []\n    group_start = paren_string.find('(')\n    while group_start != -1:\n        group_end = paren_string.find(')', group_start)\n        lst.append(paren_string[group_start:group_end+1])\n        paren_string = paren_string[group_end+1:]\n        group_start = paren_string": 2.8456242523706266e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_group_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0 and paren_stack[-1] == '(':\n                paren_stack.pop()\n            else:\n                paren_group_stack.": 2.6455302307895775e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_list = []\n    list_one = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            list_one.append(i)\n        elif paren_string[i] == \")\":\n            new_list.append(list_one)\n            list_one = []\n        else:\n            continue\n    return new_list": 1.8564938775327855e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # find left paren\n    # find right paren\n    # find inner paren\n    # find middle paren\n    # find right paren\n    # find left paren\n\n    # find end of the input string\n    # split the input string using the end of the input string as the delimiter\n    # return the list of the split elements\n\n    # iterate over the list of split elements\n    # if the element is not": 4.655264222018464e-43, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    pass  # TODO: Replace with correct code": 4.738792220740249e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    p = ''\n    for c in paren_string:\n        if c == '(':\n            if p:\n                parens.append(p)\n                p = ''\n        elif c == ')':\n            if p:\n                parens.append(p)\n                p = ''\n        else:\n            p += c\n\n    if p:\n        parens.append(p)": 1.3490324252635089e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Write your code to separate_paren_groups() below this line\n\n    # TODO: Create a list containing all the substrings of paren_string that are parentheses\n    parentheses_list = []\n    parentheses_list.append(paren_string)\n    for i in range(len(parentheses_list)):\n        paren_string = parentheses_list[i]": 9.336571934003921e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # your code here\n\n    return result": 3.7738279742932816e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                result.append(paren_stack.pop())\n            else:\n                result.append('(')\n\n    result = ''.join(result)\n    return result.split": 8.773887642130739e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code below this line\n\n    return \"Should return a list of separated strings\"": 1.0294657785848685e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_stack = []\n    paren_index = 0\n    paren_string += '&'\n    while paren_index < len(paren_string):\n        if paren_string[paren_index] == '(':\n            paren_stack.append(paren_index)\n        elif paren_string[paren_index] == ')':\n            paren": 8.050221705920612e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\" \".join(paren_string.split(\" \"))]": 7.602341651184672e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if paren_string[0] != '(' or paren_string[-1] != ')':\n        raise Exception(\"String doesn't start and end with parentheses\")\n    parenthesis_stack = []\n    new_string = ''\n    for char in paren_string:\n        if char == '(':\n            parenthesis_stack.append(new_string)\n            new_string = ''\n        elif": 1.485480822218942e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Return the list of nested strings\n    return ['()', '(())', '(()())']": 3.453548340141534e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    open_paren = []\n    for paren in paren_string:\n        if paren == '(':\n            open_paren.append(paren)\n        elif paren == ')' and open_paren:\n            paren_list.append(open_paren.pop())\n    return paren_list": 5.290768721523004e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Don't change the following line and run this cell to check your work.\n    assert isinstance(paren_string, str)\n    return [''.join(paren_string.split(paren)) for paren in '()']": 2.4601294478598315e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    current_paren = ''\n    for char in paren_string:\n        if char == '(':\n            if current_paren:\n                parens.append(current_paren)\n                current_paren = ''\n            current_paren += char\n        elif char == ')':\n            if current_paren:\n                parens.append(current_paren)\n                current_p": 2.2209182190322148e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_strings = []\n    parentheses = 0\n\n    for i in paren_string:\n        if i == '(':\n            parentheses += 1\n        elif i == ')':\n            parentheses -= 1\n\n        if parentheses == 0:\n            paren_strings.append('(')\n\n    return paren_strings": 5.356464982154553e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return [paren_string]\n    else:\n        p = paren_string[0]\n        if p != '(' and p != ')':\n            return [paren_string]\n        else:\n            rest = paren_string[1:]\n            return [p] + separate_paren_groups(rest)": 2.5658166960137197e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def find_first_start_paren(string):\n        left_paren_count = 0\n        for i, character in enumerate(string):\n            if character == '(':\n                left_paren_count += 1\n            elif character == ')' and left_paren_count:\n                left_paren_count -= 1\n            elif left_paren_count:\n                yield (i, left_paren": 2.00691537028301e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # First, check for balanced parentheses. We can do this by iterating through the input string.\n    # If a char is an open parenthesis, we will increment a counter. If a char is a close parenthesis,\n    # we will decrement a counter. If at any point the counter goes below 0, we have encountered\n    # a closing parenthesis without an opening parenthesis. This means the input is not balanced.\n    #": 4.686021016408817e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Fill in the empty function to return the correct result\n    pass": 5.506758129112583e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    cur_paren_string = []\n    paren_string_list = []\n    for paren in paren_string:\n        if paren == '(':\n            cur_paren_string.append(paren)\n            paren_stack.append(cur_paren_string)\n        elif paren == ')':\n            if len(paren_stack) == 0:": 5.108347996614039e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses_stack = []\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            parentheses_stack.append(i)\n        if i == ')' and len(parentheses_stack) > 0:\n            parentheses_stack.pop()\n        if len(parentheses_stack) == 0 and i == ')':\n            paren_list": 1.4880819758088887e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # build a stack to hold the last item of each group\n    # track the index of the last item of the group\n    # when the stack is empty or the last item of the group is the same as the current item,\n    # add the current item to the stack and increment the last index\n    # if the current item is a close parenthesis and the last item of the stack is the same as the\n    # current item, pop the last item of the": 1.6353381406585675e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    ans = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    ans.append('()')\n            else:\n                stack.append(')')\n\n    return ans": 1.6765775237534776e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parens_stack = []\n    group = []\n    for char in paren_string:\n        if char == \"(\":\n            open_parens_stack.append(char)\n        elif char == \")\":\n            if len(open_parens_stack) > 0:\n                open_parens_stack.pop()\n            else:\n                group.append(char)\n        else:\n            group.append(": 3.1190191391597976e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    answer = []\n    paren_string = paren_string.replace(\" \", \"\")\n    string_split = []\n    for i in range(0, len(paren_string)):\n        string_split.append(paren_string[i])\n    open_paren_list = []\n    for i in string_split:\n        if i == \"(\":\n            open_paren_list.append(i)": 1.8609458816771795e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_count = 0\n    current_index = 0\n    total_string = ''\n\n    while current_index < len(paren_string):\n        if paren_string[current_index] == '(':\n            paren_count += 1\n        elif paren_string[current_index] == ')':\n            paren_count -= 1\n\n        if paren_count == 0:\n            total_": 1.7196766832537745e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Pseudocode:\n    #   Keep track of open and close brackets.\n    #   Check if there is an opening bracket, if there is remove it from the list.\n    #   When there is an opening bracket, but not a closing bracket, add the string to the output list.\n    #   When there is a closing bracket, check if the bracket matches the last opening bracket in the list.\n    #": 2.700264671936855e-42, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split the string into a list of lists\n    parentheses_list = paren_string.split(')')\n    # print(parentheses_list)\n\n    # create a list to store the strings\n    separated_parens_list = []\n\n    # loop through the list of lists\n    for parentheses_group in parentheses_list:\n        # print(parentheses_group)\n        # check if": 2.442825618569992e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    results = []\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    for paren in paren_string:\n        if paren == '(':\n            paren_list.append(paren)\n        if paren == ')' and len(paren_list) != 0:\n            results.append(''.join(paren_list))\n            paren_": 6.46273229868738e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses = paren_string.split(\")\")\n    return parentheses": 6.855243270024384e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    paren_string = paren_string.replace(' ', '')\n    depth = 0\n    if paren_string[0] == '(':\n        depth += 1\n    else:\n        result.append(paren_string[0])\n\n    for i in range(1, len(paren_string)):\n        if paren_string[i] == '(':\n            depth += 1": 1.2330412064523484e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"()\":\n        return ['()']\n\n    # Build the list of tuples representing the location of the current opening parenthesis\n    open_parenthesis_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_parenthesis_stack.append((i, 1))\n        elif paren_string[i": 1.799950868119321e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # 1. Move all the brackets to the left in the input string (replace all of them with '(')\n    # 2. Move all the brackets to the right in the input string (replace all of them with ')')\n    # 3. Once you are done, you can split the string into separate groups\n    return ['()', '(())', '(()())']": 5.657904015168577e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parenthesis_list = []\n    current_parenthesis = []\n    is_not_opening = True\n    for paren in paren_string:\n        if paren == '(':\n            current_parenthesis.append(paren)\n            is_not_opening = False\n            continue\n        if is_not_opening:\n            continue\n        if paren == ')':\n            if len(current_": 1.3452490596067389e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Create a list of the opening brackets\n    open_brackets = ['(', '[', '{']\n    # Create a list of the closing brackets\n    close_brackets = [')', ']', '}']\n\n    # Initialize the output list\n    paren_list = []\n\n    # Loop over the input string\n    for index, char in enumerate(paren_string):\n\n        # If": 3.689225587713665e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    results = []\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n        elif c == ')':\n            if paren_stack:\n                results.append(''.join(paren_stack))\n                paren_stack.pop()\n            else:\n                raise ValueError('unbalanced parentheses')\n    return": 1.5242974778921864e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    temp_str = ''\n    for char in paren_string:\n        if char == '(':\n            paren_groups.append(temp_str)\n            temp_str = ''\n        elif char == ')':\n            paren_groups.append(temp_str)\n            temp_str = ''\n        else:\n            temp_str += char\n    paren_groups.append(": 2.156850614485259e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    string = \"\"\n    for char in paren_string:\n        if char == \")\":\n            string += char\n        elif char == \"(\":\n            string += char\n        else:\n            continue\n    return string": 1.2381047442042929e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    group_start = -1\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(' and paren_string[i - 1] != ' ':\n            group_start = i\n        elif paren_string[i] == ')' and paren_string[i - 1] != ' ':\n            paren_groups.": 1.0229442900652968e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    assert isinstance(paren_string, str)\n\n    paren_string_list = []\n    sub_string_list = []\n\n    for char in paren_string:\n        if char == '(':\n            sub_string_list.append(char)\n        elif char == ')':\n            if len(sub_string_list) > 0:\n                paren_string_list.append(''.join(": 5.972383581330992e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = \"\"\n    paren_groups = []\n    for char in paren_string:\n        if char == \"(\" or char == \")\":\n            if paren_group != \"\":\n                paren_groups.append(paren_group)\n                paren_group = \"\"\n        paren_group += char\n    paren_groups.append(paren_group)\n    return paren_groups": 1.6463400777342481e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    return result": 0.00026385743072801347, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parens_list = []\n\n    open_paren_index = 0\n    paren_type = \"open\"\n    paren_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            paren_count += 1\n            if paren_type == \"open\":\n                open_paren_index = paren_string.find(char)\n                paren_type =": 2.958825896251179e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n\n    open_par = paren_string.find('(')\n    close_par = paren_string.find(')')\n\n    if open_par == -1 and close_par == -1:\n        return [paren_string]\n    elif close_par == -1:\n        return [paren_string[:open_par]] + separate_paren_": 3.774575840248343e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    paren_string = paren_string.replace('()', '')\n    while paren_string.count('(') != paren_string.count(')'):\n        if paren_string[0] == '(':\n            if paren_string[1] == ')':\n                paren_string = paren_string[1:]\n            elif pare": 9.342929882759939e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces = []\n    result = []\n\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            open_braces.append(index)\n        elif char == ')':\n            if len(open_braces) != 0:\n                open_braces.pop()\n            else:\n                # note: this is only evaluating the last group, therefore we need to reverse": 7.099276965162562e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_strings = []\n    paren_string_split = paren_string.split('(')\n    # print(paren_string_split)\n    for i in range(len(paren_string_split)):\n        if paren_string_split[i] == '':\n            paren_group_strings.append('')\n        else:\n            paren_group_strings.append(paren": 1.7267389333394353e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result_list = []\n    curr_group = \"\"\n    for idx, char in enumerate(paren_string):\n        if char == \"(\":\n            curr_group += char\n        elif char == \")\":\n            result_list.append(curr_group)\n            curr_group = \"\"\n        elif char.isspace():\n            continue\n        else:\n            curr_group += char\n\n    return": 1.4771675051289364e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # regex solution\n    # import re\n    # parens_list = re.findall('\\(\\)|\\(\\)', paren_string)\n    # print(parens_list)\n    # return parens_list\n\n    # list comprehension solution\n    paren_groups = []\n    paren_temp = []\n\n    for char in paren_string:\n        if char == '(':\n            paren": 2.0679712681112881e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # start the stack with a group\n    paren_stack = []\n    paren_stack.append('')\n\n    # go through the entire string,\n    # if it is an open parenthesis, add it to the current string on the stack\n    # if it is a closing parenthesis, remove the current string on the stack and\n    # add the current string to the list of groups.\n    for c in paren_string:": 1.6447778064323541e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # List to hold all the groups\n    groups: list = []\n    # List to hold the current group\n    current_group: list = []\n    # Boolean to keep track of if we are in a group\n    is_in_group: bool = False\n    for char in paren_string:\n        # If the character is an open brace, then we are inside a group.\n        if char == \"(\":\n            is_in_": 1.1155056324656409e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = list()\n    for paren in paren_string.split():\n        if paren not in parens:\n            parens.append(paren)\n\n    return parens": 1.9360047378968945e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_paren_string = paren_string.replace(' ', '')\n    paren_list = new_paren_string.split(')')\n    temp_list = []\n    for element in paren_list:\n        temp_list.append(element.replace('(', ''))\n    return temp_list": 1.987021045597167e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    if paren_string == '()':\n        return [paren_string]\n    elif paren_string == '()(':\n        return ['()']\n    elif paren_string == ')':\n        return ['()']\n    else:\n        return [paren_string]": 7.734882501207238e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            paren_stack.pop()\n        elif char == \" \":\n            if not paren_stack:\n                parens.append(\"\")\n            elif len(paren_stack) == 1:\n                parens": 1.960157241058115e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n    left_parens = []\n    right_parens = []\n    for char in paren_string:\n        if char == '(':\n            left_parens.append(char)\n        elif char == ')':\n            right_parens.append(char)\n            if left_parens:\n                left_parens.pop()\n            else:\n                group_list.append(char": 1.380079182352603e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")  # remove any spaces\n    paren_list = list(paren_string)  # convert to list\n    paren_index = [i for i, l in enumerate(paren_list) if l == \"(\"]  # get the indexes for each open parenthesis\n    open_paren_index = [i for i, l in enumerate(paren_": 7.025849545342458e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Start with two empty lists: to hold the opening and closing parentheses\n    opening_paren_list = []\n    closing_paren_list = []\n    paren_list = []\n    # Loop through the string and insert parentheses if needed\n    for i in paren_string:\n        # If the character is an opening parenthesis, insert it into the list\n        if i == '(':\n            opening_p": 2.338262829706373e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append(\"\")\n        if len(stack) > 0:\n            result[-1] += char\n        else:\n            result": 9.047094407050433e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    depth = 0\n    current_string = ''\n    for c in paren_string:\n        if c == '(':\n            depth += 1\n        if c == ')' and depth > 0:\n            depth -= 1\n        if depth == 0:\n            groups.append(current_string)\n            current_string = ''\n        current_string += c\n    return groups": 1.0938685465563756e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_list = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(' and paren_string[i+1] == ')':\n            parens_list.append(paren_string[i-1:i+2])\n    return parens_list": 6.574367273748129e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    opening = \"(\"\n    closing = \")\"\n    paren_list = []\n    temp = []\n    for char in paren_string:\n        if char == opening:\n            temp.append(char)\n        elif char == closing:\n            if len(temp) > 0:\n                temp.pop()\n            else:\n                paren_list.append(temp)\n                temp = []\n    if len(temp) >": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            open_index = stack.pop()\n            paren_groups.append(paren_string[open_index:i+1])\n    return paren": 4.926077363612875e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Step 1: Create an empty list to store the individual strings\n    output = []\n    # Step 2: Create a pointer to traverse the string\n    pointer = 0\n    # Step 3: Create an empty string to store the current group\n    current_group = \"\"\n    # Step 4: Loop through each character in the input string\n    while pointer < len(paren_string):\n        # Step 5: If the": 3.201644050176902e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return ['()' if i % 2 == 1 else '()' for i in range(1, len(paren_string)) if paren_string[i] == '(']": 1.0467292990466358e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n    else:\n        left_paren_count = paren_string.count('(')\n        right_paren_count = paren_string.count(')')\n        open_count = paren_string.count('(')\n        close_count = paren_string.count(')')\n        if left_paren_count == close_count:\n            if": 4.910373279381661e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # initialize empty list to be returned\n    separate_paren_groups = []\n\n    # initialize count for parentheses to be separated\n    count = 0\n\n    # initialize a variable to track whether the string has a pair of open and closed parentheses\n    # that has not been separated yet\n    open_or_closed = False\n\n    # loop through the string\n    for char in paren_string:\n        # check if the": 2.078863501916745e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    result = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            stack.pop()\n            if len(stack) == 0:\n                result.append(paren_string[": 2.0537469281921417e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n    return paren_string.split('(')": 1.0189165103434207e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_par_list = []\n    final_string_list = []\n    new_string = ''\n    paren_list = []\n\n    if paren_string.count('(') == paren_string.count(')'):\n        return paren_string.split(')')\n    for char in paren_string:\n        if char == '(':\n            open_par_list.append(char)\n        elif": 9.854097473043908e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # use a stack (FILO) to separate the groups. Each open parenthesis should be on top of the stack\n    # and popped off when closed.\n    #\n    # the end condition is when the stack is empty\n    #\n    # time complexity: O(n) where n is the number of characters in the input string\n    # space complexity: O(n) where n is the number of characters in the input string\n    #": 1.0429352242055781e-39, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_split = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        if char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                paren_split.append(char)\n    if len(paren_stack) >": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            close = paren_string.find(\")\", i)\n            group = paren_string[i + 1:close]\n            result.append(group)\n            i = close + 1\n        else:\n            i += 1\n\n    return result": 3.715953769715835e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    current_group = \"\"\n    for i in range(len(paren_string)):\n        current_char = paren_string[i]\n        if current_char == '(':\n            stack.append(current_char)\n        elif current_char == ')':\n            stack.pop()\n            if len(stack) == 0:\n                result.append(current_group)": 7.383622878373165e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ans = []\n    open_brackets = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_brackets.append(i)\n            i += 1\n        elif paren_string[i] == ')':\n            if len(open_brackets) > 0:\n                last_open_bracket = open_brackets": 8.394100742271008e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: add code here\n    pass": 2.6348804302001208e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = list()\n    final_list = list()\n    for i in paren_string:\n        if i == '(':\n            paren_list.append(i)\n        if i == ')':\n            final_list.append(paren_list.pop())\n    return final_list": 7.22399681730319e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result_strings = []\n    group = []\n    brackets = {'{': '}', '(': ')', '[': ']'}\n    for char in paren_string:\n        if char in brackets.values() or char == ' ':\n            group.append(char)\n        else:\n            if len(group) > 0:\n                result_strings.append(''.join(group))\n                group = []": 2.414765761701991e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code goes here\n    return []": 0.00010244471735234882, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    opening_paren = []\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            opening_paren.append(i)\n\n        if char == \")\":\n            if len(opening_paren) == 0:\n                return paren_stack\n            else:\n                parens.append(paren_string": 2.385910290196241e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def check_correct_nesting(paren_string):\n        num_open_parentheses = 0\n        num_closed_parentheses = 0\n        for char in paren_string:\n            if char == '(':\n                num_open_parentheses += 1\n            elif char == ')':\n                num_closed_parentheses += 1\n            if num_closed_parentheses > num_open_parent": 2.3686604808114953e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            paren_list.append(char)\n        elif char == ')':\n            paren_groups.append(paren_list)\n            paren_list = []\n    return paren_groups": 6.377292513628337e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = paren_string.split(')')\n    paren_list = [x for x in paren_list if x != '']\n    paren_list = [x.replace(' ', '') for x in paren_list]\n    return paren_list": 4.2419529628550833e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = []\n    current_group = []\n    in_group = False\n    for index in range(0, len(paren_string)):\n        if paren_string[index] == '(':\n            in_group = True\n            current_group.append(paren_string[index])\n        elif paren_string[index] == ')' and in_group:\n            in_group = False": 2.287463902269163e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # If input string has no parens, return an empty list\n    if not paren_string.count(\"(\") and not paren_string.count(\")\"):\n        return []\n    # If parens are balanced, return the list with one item\n    if paren_string.count(\"(\") == paren_string.count(\")\"):\n        return [paren_string]\n    # Otherwise, loop through the string and return the": 2.922637801912652e-27, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_group = ''\n    groups = []\n    for paren in paren_string:\n        if paren == '(':\n            if current_group:\n                groups.append(current_group)\n            current_group = ''\n        elif paren == ')':\n            if current_group:\n                groups.append(current_group)\n            current_group = ''\n        else:\n            current_group += paren": 2.5485485688342756e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n\n    paren_stack = []\n    current_group = ''\n    result = []\n    open_parans = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n            open_parans += 1\n        elif paren == ')':\n            paren": 5.205976177628609e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if len(paren_string) == 0:\n        return []\n    elif paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    else:\n        first_open_bracket_index = paren_string.find('(')\n        first_close_bracket_index = paren_string.find(')')\n        first_sub": 1.0911570231092788e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your solution here\n    raise NotImplementedError(\"Separate paren groups is not implemented yet\")": 4.039665585649381e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement me\n    pass": 4.108172354121667e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '()':\n        return [paren_string]\n    else:\n        result = []\n        parens_stack = []\n        for char in paren_string:\n            if char == '(':\n                parens_stack.append(char)\n            elif char == ')':\n                if parens_stack:\n                    result.append(parens_stack.pop())\n                else:": 1.5689558372809863e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_group_string = ''\n    for char in paren_string:\n        if char == '(':\n            if paren_group_string != '':\n                paren_groups.append(paren_group_string)\n            paren_group_string = ''\n        elif char == ')':\n            if paren_group_string != '':\n                paren_": 6.573718382469592e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []\n\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        elif paren == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return []\n\n    if len(stack) > 0:\n        return []\n\n    paren_groups = []\n    paren_group = \"\"": 4.1660936075683284e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Handle special case where there is no nested parentheses\n    if paren_string.count('(') == 0 and paren_string.count(')') == 0:\n        return [paren_string]\n\n    # Split the input string into a list of all parentheses groups\n    groups = paren_string.split('(')\n\n    # Initialize empty list to store groups as strings\n    groups_as_": 1.547697832108814e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = ''\n    paren_groups = []\n\n    for paren in paren_string:\n        if paren != '(' and paren != ')':\n            paren_group += paren\n        elif paren == ')' and paren_group != '':\n            paren_groups.append(paren_group)\n            paren_group = ''\n        elif paren == ')'": 5.037270031104781e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_paren = ''\n\n    for paren in paren_string:\n        if paren == '(':\n            if current_paren:\n                paren_groups.append(current_paren)\n            current_paren = ''\n        elif paren == ')':\n            paren_groups.append(current_paren)\n            current_paren = ''\n        else": 3.163455744772933e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: implement this function\n\n    return []": 5.427957151448711e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    out_list = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_stack.append(i)\n        elif i == \")\":\n            if paren_stack and paren_stack[-1] == \"(\":\n                paren_stack.pop()\n            else:\n                out_list.append(i)\n        else:\n            out_": 5.7822132188084156e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    current_paren = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(current_paren)\n            current_paren = \"\"\n        elif char == \")\":\n            if len(paren_stack) > 0:\n                current_paren = current_paren + paren_stack.": 3.698550933372782e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code here\n\n    pass": 2.5308287509973883e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pairs = []\n    parens_open = 0\n    result = ''\n    parens_closed = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens_open += 1\n        elif paren_string[i] == ')':\n            parens_closed += 1\n        if parens_open == parens_closed:\n            if": 8.842688706848937e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(paren_string[i])\n        elif paren_string[i] == ')' and len(stack) > 0 and stack[-1] == '(':\n            stack.pop()\n        i += 1\n    paren_groups = []\n    while len": 2.1462687342961177e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    paren_stack.append(paren_string[0])\n    for i in paren_string[1:]:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')':\n            if len(paren_stack) == 1:\n                paren_stack.pop()\n            else:\n                paren_": 2.902612804379463e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    output = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            output.append(''.join(stack))\n            stack.pop()\n    return output": 9.051751055360939e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    parens = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(paren_string[i])\n        elif paren_string[i] == ')' and len(parens) == 0:\n            result.append('()')\n        elif paren_string[i] == ')':": 4.26056780289284e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = [paren_string]\n    while '()' in parens[0]:\n        parens[0] = parens[0].replace('()', '')\n\n    parens[0] = parens[0].split()\n    return parens[0]": 3.582270274560228e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write me.": 9.916696322541143e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    count = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            count += 1\n        elif paren_string[i] == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[0:i + 1])\n                paren_string = paren_string": 2.251723156023565e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ret = []\n    if paren_string == \"\":\n        return []\n    elif paren_string == \"()\":\n        return [\"()\"]\n    else:\n        temp = paren_string.replace(\"()\", \"\")\n        return [\"()\".join(temp.split(\"()\"))] + separate_paren_groups(\"()\".join(temp.split(\"()\")).split())": 4.448226380371199e-22, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [''.join(paren_string.split(paren)) for paren in\n            '()' * 2 if '(' * 2 in paren_string]": 4.567337982286315e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    stack = []  # We use a stack to help us separate the groups of parens\n    curr_group = []  # We use this list to store the current group of parens\n    paren_stack = []  # We use this list to keep track of the previous open parens\n\n    for c in paren_string:\n\n        if c == '(':\n            stack.append(c)  # Add the open paren": 3.7543373262472417e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # (()()\n    #   ^\n    #    +--> ignore the first (\n\n    # (()()()\n    #   ^\n    #    +--> ignore the first (\n\n    # (()()()()\n    #  ^\n    #    +--> ignore the first (\n    pass": 2.547711496180229e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_list = []\n    open_braces = ['(', '[', '{']\n    closed_braces = [')', ']', '}']\n\n    for char in paren_string:\n        if char in open_braces:\n            paren_stack.append(char)\n        if char in closed_braces:\n            last_open_paren = paren": 2.8535874109358044e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not paren_string:\n        return []\n\n    # get all paren groups\n    paren_groups = []\n    open_paren_index = 0\n    paren_end_index = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_index = i\n        elif char == ')':\n            paren_end_index = i": 2.315889091332831e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # create a list of the paren strings that we want to return\n    result_list = []\n\n    # we need to identify where the parentheses begin\n    # the first group begins with a left paren\n    # so we'll keep track of where the left paren is\n    # and keep adding to the paren_string until we find a right paren\n    left_paren_index = 0\n    right_paren": 6.302572557281269e-47, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return list(filter(lambda s: s != '()', paren_string.split('()')))": 3.270934104319625e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    # This is a silly example. I will use a list and iterate over it. \n    paren_list = []\n    last_paren = ''\n    for i, p in enumerate(paren_string):\n        if p == '(' and paren_string[i+1] == ')':\n            paren_list.append(paren_string[last_paren:i+1": 4.210992286312679e-34, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"\".join(paren_string.split(paren)) for paren in \"()\"]": 8.26261458705345e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # **************** Write your code below this line ****************\n    stack = []\n    group = \"\"\n    output = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n                if not stack:\n                    output.append(group)\n                    group": 7.523719791394854e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n\n    def find_next_opening_paren(start_index):\n        \"\"\" This function finds the index of the first ( found in paren_string after the index provided in start_index.\n        It does this by iterating through the string from start_index and checking if it is a parenthesis. If it is,\n        it returns the index of the next '(' and terminates": 6.355999312934353e-44, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces = 0\n    close_braces = 0\n    result = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_braces += 1\n            continue\n\n        if paren_string[i] == ')':\n            close_braces += 1\n            continue\n\n        if open_braces == 0 and close_": 3.127913763585213e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [x for x in paren_string.split() if x not in ['(', ')']]": 4.7366552286573675e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parentheses_stack = []\n    paren_group = \"\"\n    for paren in paren_string:\n        if paren in '()':\n            paren_group += paren\n            if len(paren_group) == 2 and paren_group[0] == paren_group[1]:\n                parentheses_stack.append(paren_group)\n                paren_group = \"\"\n        elif pare": 4.089921777666395e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = [paren_string[i:j] for i, j in pair_indexes(paren_string)]\n    paren_groups = [paren_group for paren_group in paren_groups if len(paren_group) > 0]\n    return paren_groups": 1.169051299579169e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    p = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            if paren_string[i+1] != '(':\n                p.append(paren_string[i])\n            i+=2\n        else:\n            i+=1\n    return p": 4.3525788375079284e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Return the appropriate return value\n    return []": 1.760784178740355e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[i+1:j] for i, j in enumerate(paren_string[1:]) if paren_string[i] == \"(\" and paren_string[j] == \")\"]": 2.4568831902084714e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    string_length = len(paren_string)\n    i = 0\n    while i < string_length:\n        paren_group = \"\"\n        if paren_string[i] == \"(\":\n            close_paren_counter = 0\n            while paren_string[i] != \")\":\n                if paren_string[i] == \"(\":\n                    close_paren": 8.600964349595986e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    open_paren_list = []\n    for char in paren_string:\n        if char == '(':\n            open_paren_list.append(char)\n        if char == ')':\n            if len(open_paren_list) == 0:\n                paren_list.append(')')\n            else:\n                paren_list.append(')')\n                open": 3.153889459448828e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Put your code here\n    pass\n\n\nseparate_paren_groups('( ) (( )) (( )( ))')": 7.775089943626679e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_stack = []\n    open_paren_position = []\n    curr_position = 0\n    paren_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_paren_stack.append(paren_string[i])\n            open_paren_position.append(i)\n        elif": 7.146490722373535e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_braces_list = [x for x in paren_string if x == '(']\n    paren_list = list(paren_string)\n    i = 0\n    while i < len(paren_list):\n        if paren_list[i] == '(':\n            j = i + 1\n            while j < len(paren_list) and paren_list[j] != ')':": 1.7115831118990378e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    if paren_string[0] != '(' or paren_string[-1] != ')':\n        return [paren_string]\n    if paren_string[0] == '(' and paren_string[-1] == ')':\n        return [paren_string]\n    else:\n        left_paren = paren_string.find": 1.353167865949456e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here.\n    paren_string = paren_string.replace(' ', '')\n    if paren_string == '':\n        return []\n    elif paren_string.count('(') == paren_string.count(')'):\n        return [paren_string]\n    else:\n        count = 0\n        for i in paren_string:\n            if i == '(':\n                count += 1": 2.142282929309956e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    # Break string into array of character groups\n    paren_groups = paren_string.split()\n\n    for group in paren_groups:\n        # Check if group is nested\n        if group[0] == group[-1]:\n            result.append(group)\n            # Iterate over nested parens until there are no more nested parens.\n            while '()' in group:\n                group = group.": 9.040544424043455e-39, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def find_next_paren(paren_string: str) -> int:\n        count = 0\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                count += 1\n            elif paren_string[i] == ')':\n                count -= 1\n            if count == 0:\n                return i\n\n    paren_groups = []": 3.323728805171693e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    paren_stack = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n            if len(paren_stack) == 0:\n                paren_stack.append(i)\n        elif i == ')':\n            if len(stack) != 0 and stack[-1] == '(':\n                stack.pop()": 1.2137494310619637e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    sep_paren_str = \"\"\n    paren_list = list(paren_string)\n    while \"(\" in paren_list:\n        open_paren = paren_list.index(\"(\")\n        close_paren = open_paren + paren_list[open_paren:].index(\")\")\n        if paren_list[open_paren + 1] == \"(\":\n            paren": 9.489426271586503e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append('')\n            else:\n                stack.append(')')\n                result.append(')')\n        elif i": 3.930491374299979e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def is_matching_parens(parens: str) -> bool:\n        if parens[0] == '(':\n            if parens[-1] == ')':\n                return True\n        return False\n\n    def inner_separate_parens(\n        string: str, paren_string: str, paren_list: List[str]\n    ) -> List[str]:\n        for i in": 8.225055833053205e-29, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # create empty list to hold our result\n    result = []\n    # create empty stack to track open brackets and parentheses\n    stack = []\n\n    # loop through each character in the input\n    for c in paren_string:\n        # if the character is an open bracket, add it to the stack\n        if c == '(':\n            stack.append(c)\n        # if the character is a close bracket,": 4.385744112855391e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    paren_string = paren_string.replace(' ', '')\n    opening_paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            opening_paren_count += 1\n        elif paren_string[i] == ')':\n            opening_paren_count -= 1\n        if opening_": 2.071493865648618e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                paren_stack.append(paren)\n            elif paren_stack[-1] == '(':\n                paren_": 6.586799445919335e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"\".join(paren_string.split(\"(\")[0].split(\")\"))]": 4.977841876867231e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group_list = []\n    # Your code here\n    # The first open parenthesis is removed from the input string\n    # The last close parenthesis is removed from the input string\n    # The rest are added to the list\n    return paren_group_list": 2.849920406225486e-26, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_list.append('')\n            i += 1\n        elif paren_string[i] == ')':\n            if i + 1 < len(paren_string):": 3.98848098643298e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            group_string = \"\"\n            open_bracket = i\n            while paren_string[i] != ')':\n                group_string += paren_string[i]\n                i += 1\n            group_string += ')'\n            groups_list.append": 6.781793185509349e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n                if len(paren_stack) == 0:\n                    paren_groups.append('')\n        elif": 3.471621250263106e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = [paren_string[0]]\n    depth = 0\n\n    for paren in paren_string[1:]:\n        if paren == '(':\n            depth += 1\n        elif paren == ')':\n            depth -= 1\n        if depth == 0:\n            paren_groups.append(paren_string[depth+1:])\n\n    return paren_groups": 4.9192616954751114e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    stack = []\n    paren_string = paren_string.replace(' ', '')\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            start_index = stack.pop()\n            paren_list.append(p": 1.8454639749156604e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    temp_str = ''\n    for char in paren_string:\n        if char == '(':\n            if temp_str:\n                res.append(temp_str)\n                temp_str = ''\n            res.append('(')\n        elif char == ')':\n            res.append(')')\n            if temp_str:\n                res.append(temp_str)\n                temp_str =": 2.0478588798318502e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # delete pass once your function is complete": 8.444239696985177e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    stack.append('')\n    for x in paren_string:\n        if x == '(':\n            stack.append('')\n        elif x == ')':\n            stack.pop()\n        elif x == ' ':\n            continue\n        else:\n            stack[-1] += x\n    return [x for x in stack if x != '']": 1.1316452944629524e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # handle the edge case of empty string\n    if paren_string == '':\n        return []\n\n    # start tracking the current state\n    paren_stack = []  # a stack of parentheses\n    paren_string_stack = []  # a stack of parentheses strings\n    current_state = 'empty'  # what the current state is\n    current_paren_string = ''  # the current group of parent": 6.8581898222542265e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    current_index = 0\n    index_list = []\n    list_of_paren_groups = []\n    for index, item in enumerate(paren_string):\n        if item == '(':\n            index_list.append(index)\n        elif item == ')':\n            index_list.pop()\n        else:\n            continue\n        if len(index_list) == 0:\n            list_of_p": 5.6609509123919014e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    # Your code here\n    return paren_groups": 2.4863747170077195e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # EMPTY OUTPUT LIST FOR MULTIPLE GROUPSETS\n    return_list = []\n\n    # SAVE THE INPUT STRING\n    input_string = paren_string\n\n    # LOOPS RUNNING TILL EMPTY STRING OR END OF INPUT STRING\n    while input_string != '':\n        # LOOPS RUNNING TILL EMPTY STRING OR END OF": 7.506764740225609e-39, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        paren = paren_string[i]\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack) == 0:\n                paren_stack.append(paren)\n            else": 6.667966156253909e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your code here\n    return []": 3.2102795613289476e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # YOUR CODE HERE\n\n    return []": 2.8562843249127546e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # NOTE: I use a stack to store the open braces in my inner while loop, so that my inner loop's condition\n    # checks each open brace. I then check if the current stack is empty when I pop them off. If it is, I\n    # add a closing parenthesis and continue. If it isn't, I continue as normal. This is to handle the\n    # case where I have nested parentheses.\n    stack =": 3.6292082274901468e-65, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    for i in paren_string:\n        if i != \" \" and i != \"(\" and i != \")\":\n            result.append(i)\n        if i == \"(\":\n            result.append(\"(\")\n        if i == \")\":\n            result.append(\")\")\n    return result": 3.67464858438618e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write code here to return a list of strings\n    pass": 1.7067515152284925e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            paren_group = ''\n            start_index = index\n            while paren_string[index] != ')':\n                paren_group += paren_string[index]\n                index += 1\n            paren_group += ')'\n            result.append(p": 3.6013095862771575e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # todo:\n    # 1. Implement this function to separate the parentheses groups from the input string.\n    # 2. Return the list of groups as a list of strings.\n    # 3. You will need to use a stack data structure and recursion to implement this function.\n\n    raise NotImplementedError": 6.13076146837597e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # First create a list of all the pairs of indices corresponding to each pair of parentheses. \n    # Then iterate over that list, taking the first and last elements of each pair, then incrementing the index\n    # to get the next pair, and adding each pair to a new list. \n    # This will create a list of all pairs. \n    # A tuple is used for the indices as they are immutable and we don't want": 4.115406971984895e-62, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # 1. use list comprehension and a for loop to loop through the parentheses\n    # 2. if a bracket is not an opening bracket, keep on going\n    # 3. if a bracket is not an closing bracket, keep on going\n    # 4. if a bracket is an opening bracket, call a function and save the result\n    # 5. if a bracket is an closing bracket, return": 2.2524601843393957e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(current_group)\n            current_group = ''\n        elif char == ')':\n            current_group = ''.join(paren_stack.pop() + current_group)\n        else:\n            current_group += char\n\n    return paren": 3.6413809750350634e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Separate the parens first by adding a space in between each group of parentheses and\n    # then separating the inner groups.\n    paren_string_with_space = ''.join(paren_string.split())\n    paren_string_list = paren_string_with_space.split(')(')\n\n    # Now, we need to filter out any empty strings\n    paren_list = [x": 5.910330779795874e-44, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.count('(') != paren_string.count(')'):\n        raise ValueError('Parentheses must be balanced.')\n    elif len(paren_string) == 0:\n        return []\n    elif paren_string.count('(') == 0 and paren_string.count(')') == 0:\n        return [paren_string]\n    else:\n        # Find the first '": 2.0694509501350183e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parenthesis_stack = []\n    current_group_start_index = 0\n    for i in range(len(paren_string)):\n        current_char = paren_string[i]\n        if current_char == '(':\n            parenthesis_stack.append(current_group_start_index)\n        elif current_char == ')':\n            parenthesis_stack.pop()\n            if len(parenthesis": 8.862343715948307e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [substring.strip() for substring in paren_string.split(')(')]": 5.67858951875717e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_indexes = []\n    balanced_parentheses = []\n    group_open_counter = 0\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_paren_indexes.append(i)\n            group_open_counter += 1\n        elif paren_string[i] == ')':\n            group_": 7.693876004913075e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []\n    paren_groups = []\n    paren_current = []\n\n    # ignore spaces\n    paren_string = paren_string.replace(' ', '')\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0:": 3.354469072404454e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here.\n    # ----------------------------------------------\n    #\n    # YOUR CODE GOES HERE.\n    #\n    # ----------------------------------------------\n    return []": 2.2481269761134827e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    arr = [0, 0]\n    for i in paren_string:\n        if i == \"(\":\n            if arr[0] == 1:\n                res[-1] += \"(\"\n            else:\n                res.append(\"(\")\n        if i == \")\":\n            if arr[0] == 0:\n                res[-1] += \")\"\n            else:\n                res.append(\")": 5.933096548206781e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # list_of_strings = []\n    # for i in paren_string:\n    #     if i == '(':\n    #         list_of_strings.append('')\n    #     elif i == ')':\n    #         list_of_strings.append('')\n    #     elif i == ' ':\n    #         list_of_strings.append('')\n    #     else:\n    #         list_": 1.0127378695312797e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # 1. Create a list to store the separated strings.\n    result = []\n\n    # 2. Create a stack to keep track of the open parentheses.\n    stack = []\n\n    # 3. Iterate over the string.\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            # 3a. Append the index to the stack\n            stack": 1.5795862342557738e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Return list\n    return []": 3.166824840656196e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_list = paren_string.split(')')\n\n    return paren_list": 4.890325265634892e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_string = paren_string.replace(' ', '')\n    separated_parens = []\n\n    # Check to see if paren_string is empty\n    if len(paren_string) == 0:\n        return separated_parens\n\n    # Check to see if paren_string contains only parentheses\n    if paren_string.count('(') == 0:": 1.207866291075319e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    pass  # Your code here": 5.296336291420575e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Remove pass and fill in this function\n    raise NotImplementedError()": 1.1518565329260382e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Check if parens are balanced\n    paren_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n            if not paren_stack:\n                return []\n            paren_stack.pop()\n    # print(f'Paren Stack: {paren_stack}')": 1.1077775830742518e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    else:\n        if len(paren_string) == 1:\n            return [paren_string]\n        else:\n            if paren_string.startswith('(') and paren_string.endswith(')'):\n                return [paren_string]\n            else:\n                first_close_idx = paren_string.index(')')": 4.264435792815545e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    ############################################################################\n    # Implement the function below to separate the parenthesis groups in the    #\n    # paren_string and return the list of those groups.                         #\n    ############################################################################\n    parens_list = []\n    paren_stack = []\n    temp_list = []\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append": 9.08745829420866e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    output = []\n    if paren_string:\n        curr_group = ''\n        parens_count = 0\n        for char in paren_string:\n            if char == '(':\n                parens_count += 1\n            elif char == ')':\n                parens_count -= 1\n            if parens_count == 0 and char == ')':\n                curr_group += char\n                output.append(": 2.350089026728681e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[0 + paren_string.index(pair):\n                      paren_string.index(pair) + len(pair)]\n        for pair in paren_string.split('(?=( ))')\n    ]": 2.6926793935996538e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_list = []\n    for i, character in enumerate(paren_string):\n        if character == '(':\n            open_paren_list.append(i)\n        elif character == ')':\n            if not open_paren_list:\n                raise ValueError('')\n            open_paren_list.pop()\n    if open_paren_list:\n        raise ValueError('')": 3.797441548961857e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    cur_level = []\n    current_level = 0\n    for c in paren_string:\n        if c == '(':\n            current_level += 1\n        elif c == ')':\n            current_level -= 1\n        if current_level == 0:\n            parens.append(cur_level)\n            cur_level = []\n        else:\n            cur_level.append(c": 5.3441728393049565e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO - write your solution here\n    pass": 3.4095129525936385e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split string into list of parentheses\n    paren_list = paren_string.split()\n\n    # track opened parens\n    opened_parens = 0\n\n    # track groups of nested parentheses\n    group_list = []\n\n    # loop through each parenthese\n    for paren in paren_list:\n\n        # track nested parentheses\n        nested_parens = 0\n\n        #": 1.5878234815174388e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Start with an empty result list.\n    separated_groups = []\n    # start with empty string.\n    current_group = ''\n    # for each character in the input string...\n    for char in paren_string:\n        # if the character is open paren, push current_group into separated_groups and start a new current_group.\n        if char == '(':\n            if current_group:\n                separated_groups.": 7.811819954053235e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return_list = []\n    remaining_string = paren_string\n\n    while remaining_string:\n        # Find the first '('\n        if remaining_string[0] == '(':\n            return_list.append(remaining_string)\n            remaining_string = remaining_string[1:]\n        # Find the first ')'\n        elif remaining_string[-1] == ')':\n            # Find the last ')'": 2.1587985854970947e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Add your code here\n    paren_stack = []\n    paren_list = []\n    paren_stack.append(\"\")\n    for i in paren_string:\n        if i == \"(\":\n            paren_stack.append(\"\")\n        elif i == \")\":\n            paren_list.append(\"\".join(paren_stack))\n            paren_stack.pop()\n        else:\n            pare": 8.367970267927218e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Define a function to extract and return parentheses\n\n    def extract_paren_group(paren_string: str, index: int = 0) -> str:\n        # If we haven't found the closing parenthesis yet\n        if paren_string[index] != ')':\n            # Recursively call extract_paren_group until we find the closing parenthesis\n            return extract_paren_group(": 8.970648577482503e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_groups = []\n    temp_list = []\n    count = 0\n    for ch in paren_string:\n        if ch == '(':\n            count += 1\n        elif ch == ')':\n            count -= 1\n        if count == 0 and temp_list:\n            paren_groups.append(\"\".join(temp_list))\n            temp_list = []\n        else:\n            temp_list": 4.42163355492748e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    group_list = []\n    # Split input string into groups. ( )\n    groups = paren_string.split(\")(\")\n\n    # Reverse the list of groups so that the outer groups are the first elements in the list\n    groups.reverse()\n\n    # Loop through the reversed list of groups and for each group check if the group contains valid\n    # parentheses. If it does then add it to": 2.4599647494527898e-45, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_counter = 0\n    paren_string = paren_string.replace(' ', '')\n    for i in paren_string:\n        if i == '(':\n            paren_counter += 1\n        elif i == ')':\n            paren_counter -= 1\n        elif i == '(' and paren_counter > 0:\n            paren_list.append(p": 2.8531296439867313e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    paren_groups.append(": 4.066136968629224e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    paren_group = []\n\n    # iterate over the string\n    for char in paren_string:\n        if char == '(':\n            paren_group.append(char)\n        elif char == ')':\n            if not paren_group:\n                continue\n            paren_group.pop()\n            if not paren_group:\n                paren_groups.append('": 6.927974837731034e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # ['()', '(())', '(()())']\n    #  012345678901234567890123456789012345\n    # ['', '(())', '(()())']\n    result = []\n    # ['', '(())', '(()())']\n    #  01234567890": 6.852483083547607e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    # Split the input string at every parenthesis, leaving only the parentheses themselves\n    # Use a list comprehension to extract the parentheses\n    # Use a generator expression to create a parentheses_gen object\n    # Use a list comprehension to create a list of the list returned by calling the split_parentheses method\n    # On the list returned by the split_parentheses method, use a generator": 1.0969809552210572e-50, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_list = []\n    paren_string_list = paren_string.split()\n    for i in range(0, len(paren_string_list)):\n        if paren_string_list[i] == \"(\":\n            paren_list.append(paren_string_list[i])\n        elif paren_string_list[i] == \")\":\n            paren_list.append": 1.8908493619578698e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    #split string on braces and store in list\n    groups = paren_string.split('(')\n    \n    #create empty list\n    groups_list = []\n    \n    #loop through groups list and for each group, call the function below\n    for i in groups:\n        groups_list.append(separate_paren_group(i))\n    \n    #return the list\n    return groups_list": 1.6988770142595637e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # If there are no parentheses in the string, return an empty list\n    if paren_string.strip() == '':\n        return []\n    # Create an empty list to store the result\n    result = []\n    # Iterate through the string character by character\n    for char in paren_string:\n        # If the character is a left parenthesis, push it to the result\n        if char == '(':\n            result.": 1.502870887417876e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    final_paren_groups = []\n\n    # Add all parens\n    paren_string += ')'\n\n    # Add final paren\n    paren_string += ')'\n\n    # Find where the parens begin and end\n    i = 0\n    while i < len(paren_string) - 1:\n        if paren_string[i] == '(':\n            start_paren_index = i": 3.282806604874866e-33, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    start_idx = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            start_idx = i\n        elif paren_string[i] == ')' and i - start_idx > 0:\n            paren_groups.append(paren_string[start_idx:i])\n            start_idx = i": 1.5827068615879366e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    new_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            j = i + 1\n            while paren_string[j] != ')':\n                j += 1\n            new_list.append(paren_string[i + 1:j])\n            i = j + 1\n        else:\n            i += 1": 5.019330296611883e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Split each string at its first occurence of '('\n    paren_groups = paren_string.split(\"(\", 1)\n\n    # Split each string at its first occurence of ')'\n    paren_groups = [paren_group.split(\")\", 1)[0] for paren_group in paren_groups]\n\n    return paren_groups": 3.3301266772636394e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code below\n    # Note: it may be helpful to use recursion\n    parens = list(paren_string.strip())\n    res = []\n    def helper(i):\n        if parens[i] == '(':\n            group = ''\n            depth = 0\n            while i < len(parens):\n                if parens[i] == '(':\n                    depth += 1\n                elif parens[": 1.7981499710954868e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    #\n    # Write your code here\n    #\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_stack = []\n    group_stack = []\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if not paren_stack:\n                group_stack.append(char)": 2.4211515526092766e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append('(')\n            else:\n                stack.append(char)\n        else:\n            continue\n    if stack:\n        result.append(''.join": 4.853695969510139e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            current_group = \"\"\n        elif char == ')':\n            if len(paren_stack) == 0:\n                return \"Invalid Paren Group: \" + paren_string\n            elif paren_stack[-1] == '(':": 5.617657554822258e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n    if paren_string == ')':\n        return ['()']\n    if paren_string == '(':\n        return ['()']\n    result_list = []\n    for i in paren_string:\n        if i == '(':\n            result_list.append('')\n        elif i == ')':\n            if len(result_list) !=": 0.0, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n\n    if ')' not in paren_string:\n        return [paren_string]\n\n    else:\n        for char in paren_string:\n            if char == '(':\n                paren_list.append(char)\n            elif char == ')':\n                if len(paren_list) > 0": 1.8438194210618238e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_list = []\n    paren_stack = []\n    paren_stack.append('(')\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append('(')\n        elif paren == ')':\n            if len(paren_stack) > 1:\n                paren_stack.pop()\n            else:\n                paren_stack.append": 1.5877658496426893e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    result = []\n    pos = 0\n    paren_string = paren_string.replace(' ', '')\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            pos += 1\n        elif paren_string[i] == ')':\n            pos -= 1\n        elif pos == 0": 2.9024452856234014e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # YOUR CODE HERE\n    paren_strings = []\n    temp_string = []\n    paren_stack = []\n\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                temp_string.append(char)": 2.891947025713657e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups: List[str] = []\n    open_braces: List[int] = []\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_braces.append(i)\n        elif paren_string[i] == ')':\n            open_braces.pop()\n        elif not open_braces:": 2.3205834322385003e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(' ', '')\n    string_to_list = list(paren_string)\n    open_braces = []\n\n    for char in string_to_list:\n        if char == '(':\n            open_braces.append(char)\n        elif char == ')':\n            open_braces.pop()\n            if not open": 3.3538072957951545e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    open_bracket_list = []\n    open_bracket_count = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_bracket_count += 1\n        elif char == ')':\n            open_bracket_count -= 1\n            if open_bracket_count == 0:\n                result.append(paren_string[": 4.567069835483262e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    for i in paren_string:\n        if i == '(':\n            paren_list.append(i)\n        elif i == ')' and len(paren_list) > 0:\n            paren_list.pop()\n        elif i == ')' and len(paren_list) == 0:\n            paren_list.append(i)\n    return paren_list": 1.7635111949759096e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    # iterate over the string\n    i = 0\n    start = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            #if opening parenthesis, start the current group\n            start = i\n        elif paren_string[i] == ')':\n            #close the current group\n            res.append(paren_string[start:i": 4.478067952298381e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n    is_open_group = False\n    group = ''\n    for c in paren_string:\n        if c == '(':\n            is_open_group = True\n        elif c == ')':\n            is_open_group = False\n        if is_open_group:\n            group += c\n        else:\n            if len(group) > 0:\n                group_list.append(": 4.4141510676982356e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = paren_string.split(' ')\n    final_list = []\n\n    # go through the input list and create the final list\n    for parens in paren_groups:\n        paren_list = []\n\n        # split the group into separate parts\n        paren_parts = parens.split('(')\n\n        for part in paren_parts:\n            # if there are more brackets in": 2.1010390108026603e-39, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write code for this function.\n\n    pass": 2.4988983476091836e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    sub_string = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            continue\n        if char == ')':\n            if len(stack) != 0:\n                sub_string += stack.pop()\n                stack.pop()\n                continue\n            sub_string += char\n            stack.pop()\n            continue\n        sub_string +=": 3.823357828829615e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = ''.join(paren_string.split())\n    paren_string = paren_string.replace('()', '( )')\n    paren_string = paren_string.replace('( )', '()')\n    paren_string = paren_string.replace('()()', '( )')\n\n    paren_string = paren_string.split('( )')\n    paren": 3.0856275595996866e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\n        paren_string[i:j]\n        for i, c in enumerate(paren_string)\n        if c == \"(\"\n        for j, d in enumerate(paren_string[i:])\n        if d == \")\"\n    ]": 5.025081063804934e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_stack = []  # The stack of parentheses to be processed.\n    separator = []  # This will contain all the resulting groups.\n    start_index = 0  # Start index to look for new paren pairs.\n    end_index = 0  # End index to look for new paren pairs.\n\n    # Iterate through the input string and look for paren pairs.\n    while end_index < len(": 1.54805526378586e-40, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_parentheses = []\n    close_parentheses = []\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            open_parentheses.append(char)\n        elif char == ')':\n            close_parentheses.append(char)\n    open_parentheses.pop()\n    close_parentheses.pop()\n    open_parent": 6.005195002535746e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    sub_paren_list = []\n    for paren in paren_string:\n        if paren == '(':\n            sub_paren_list.append(paren)\n        elif paren == ')':\n            if sub_paren_list:\n                paren_list.append(str(sub_paren_list))\n                sub_paren_list = []": 7.846855297359727e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    current = ''\n    for i in paren_string:\n        if i == '(':\n            current += i\n            continue\n        elif i == ')':\n            if len(current) == 0:\n                continue\n            parens.append(current)\n            current = ''\n            continue\n        elif len(current) != 0:\n            current += i\n            continue\n    return parens": 1.934341026215573e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n\n    left_paren = 0\n    right_paren = 0\n    for idx, paren in enumerate(paren_string):\n        if paren == '(':\n            left_paren += 1\n        if paren == ')':\n            right_paren += 1\n\n        if left_paren == right_paren:\n            if paren == '(':\n                left_paren": 6.758730145245533e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return paren_string\n    else:\n        paren_string = list(paren_string)\n        group_start = 0\n        for i in range(len(paren_string)):\n            if paren_string[i] == \"(\":\n                group_start = i\n                break\n        if paren_string[group_start] != \"(\":\n            return": 7.570537096177614e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) < 2:\n        return paren_string\n    else:\n        paren_list = []\n        paren_string = paren_string.replace(\"()\", \"\")\n        if paren_string.count(\"(\") > paren_string.count(\")\"):\n            paren_list = [paren_string]\n            return paren_list\n        else:\n            paren_": 1.1533151011414616e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n\n    # TODO - Your code goes here\n\n    return groups": 6.033488880401091e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_paren_count = 0\n    open_paren_index = 0\n    paren_group = []\n    paren_list = []\n    for i in range(0, len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_count += 1\n        elif paren_string[i] == ')' and open_paren_count > 0:": 4.661586848630706e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n    else:\n        left_paren_index = paren_string.find('(')\n        right_paren_index = paren_string.find(')')\n        if left_paren_index == 0 and right_paren_index == len(paren_string) - 1:\n            return [paren_string]\n        elif left_paren_": 1.8689490618472751e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string.startswith(\"(\") and paren_string.endswith(\")\"):\n        if paren_string.count(\"(\") == paren_string.count(\")\"):\n            return [paren_string]\n        else:\n            return [\"()\" if paren_string.count(\"(\") == paren_string.count(\")\") else \"( )\",\n                    \"(\" + paren_string[": 3.177608244183061e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        if char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                groups.append(')')\n        if char == ' ':\n            if paren_stack:\n                groups.append(')": 2.4944215631868e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = paren_string.replace(\" \", \"\")\n    pairs = []\n    stack = []\n    for idx in range(len(parens)):\n        if parens[idx] == \"(\":\n            stack.append(parens[idx])\n        elif parens[idx] == \")\":\n            stack.pop()\n        if len(stack) == 0:\n            pairs.append(parens[0:idx+": 1.8933676113092155e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # print(paren_string)\n    return_list = []\n    if paren_string == \"\":\n        return return_list\n\n    while paren_string != \"\":\n        paren_list = []\n        if paren_string[0] == '(':\n            paren_list.append(paren_string[0])\n            paren_string = paren_string[1:]\n        else:": 4.883000089052161e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def _get_remaining_strs(paren_string: str, str_ind: int = 0):\n        \"\"\" Recursive function to get the remaining strings from the input string. \"\"\"\n        if paren_string[str_ind] != '(':\n            # If we have reached a parenthesis, stop the recursion.\n            return [paren_string[str_ind:]]\n        else:\n            # Otherwise,": 7.022696205941713e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    string = ''.join(paren_string.split())\n    prev = ''\n    for char in string:\n        if char == '(':\n            if prev:\n                result.append(prev)\n                prev = ''\n            else:\n                result.append('(')\n        elif char == ')':\n            if prev:\n                result.append(prev)\n                prev = ''\n            else:": 4.567849837130579e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')' and paren_stack:\n            parens.append(paren_stack.pop())\n    return parens": 3.911364943335138e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    left_parens = paren_string.split(\"(\")[1:]\n    right_parens = paren_string.split(\")\")[1:-1]\n    return [f\"({lp})\" for lp in left_parens] + [f\"({rp})\" for rp in right_parens]": 3.194333492202379e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ans = []\n    left = 0\n    right = 0\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            left += 1\n        elif paren_string[i] == ')':\n            right += 1\n        if left == right:\n            ans.append(paren_string[0:i + 1])\n            paren_string": 9.665681827478285e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # if paren_string.startswith('(') or paren_string.startswith(')') or paren_string.startswith(' '):\n    #     return 'Invalid paren string.'\n    new_list = []\n    paren_group = ''\n    for char in paren_string:\n        if char == '(':\n            new_list.append(paren_group)\n            paren_": 3.0124494423513726e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Todo\n    return list(paren_string)": 2.327283592764262e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parentheses_stack = []\n    separated_strings = []\n    parentheses_stack.append('()')\n\n    while parentheses_stack:\n        current_parenthese = parentheses_stack.pop()\n        if current_parenthese == '()':\n            separated_strings.append(current_parenthese)\n\n        else:\n            for i in range(1, len(current_parenthe": 4.702362558339511e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    opening_braces = []\n    for char in paren_string:\n        if char == '(':\n            opening_braces.append(char)\n        elif char == ')':\n            if len(opening_braces) > 0:\n                opening_braces.pop()\n            else:\n                result.append(char)\n        elif char == ' ':\n            pass\n        else:": 1.3426513626418471e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # TODO: Write code to separate paren_string into a list of separate strings\n    # Hint: You can use the build-in method \"split()\" to split a string based on a\n    # delimiter.\n    # For example, split('abc', '') would split the string into a list of strings\n    # where each string contains only one character.\n\n    # YOUR CODE HERE\n    list_separator = list(p": 2.0124217113122149e-47, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    current_substring = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n        if char == ')' and len(paren_stack) > 0:\n            current_substring += char\n            paren_stack.pop()\n        if char == '(' and len(paren_stack) == 0:\n            pare": 5.388359294806407e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_buffer = \"\"\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_buffer)\n            paren_buffer = \"\"\n        elif char == ')':\n            if paren_buffer:\n                paren_stack.append(paren_buffer)\n            paren_stack.append(char)\n            paren": 2.0710375109083205e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                groups.append(''.join(paren_stack))\n                paren_stack = []\n            else:\n                # We have nested parentheses, discard this ')'": 5.758380642582187e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack: List[str] = []\n    separators: List[str] = ['(', ')']\n    ans: List[str] = []\n\n    for i in paren_string:\n        if i not in separators:\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                continue\n            elif stack[-1] == \"(\":\n                stack.pop": 8.586914836544653e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def _get_group(paren_string: str, open_paren: str, close_paren: str) -> str:\n        \"\"\" Given a string of parentheses, finds a group of strings enclosed within the given open and close\n        parentheses.\n        \"\"\"\n        start = paren_string.find(open_paren)\n        if start == -1:\n            return \"\"\n        start += len(": 4.319782900059042e-30, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parens = []\n    curr_group = ''\n    paren_group = ''\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            curr_group = curr_group + paren_string[i]\n            if curr_group not in parens:\n                parens.append(curr_group)\n        elif paren": 6.700142547135648e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    cur_group = ''\n\n    for idx, paren in enumerate(paren_string):\n        if paren == '(':\n            cur_group += '('\n\n        elif paren == ')' and len(cur_group) > 0:\n            if cur_group[-1] == '(':\n                paren_list.append(cur_group[:-1])\n                cur_": 8.392945480617358e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def split_paren(paren_string):\n        # slice the string from the right until the first open parenthesis.\n        # then pop that item off the stack,\n        # save the right side of the pair and return the string\n        # to be used in recursion\n        if paren_string:\n            left_paren_index = paren_string.rfind('(')\n            right_paren_index = paren": 2.5467464736243236e-50, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_stack.append(\"(\")\n        elif paren_string[i] == \")\":\n            if len(paren_stack) > 0 and paren_stack[-1] == \"(\":\n                paren_stack.pop": 6.288777851345897e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    out_list = []\n\n    # First build up the stack by adding the first opening parentheses.\n    for char in paren_string:\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            paren_stack.pop()\n        elif char == \" \":\n            continue\n        else:\n            raise ValueError(": 2.984920406735463e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_stack = []\n    for i in paren_string:\n        if i == '(':\n            paren_stack.append(i)\n        elif i == ')' and paren_stack:\n            paren_stack.pop()\n        elif i == '(' and not paren_stack:\n            result.append('')\n        else:\n            result[-1] += i\n    return result": 2.0121333961548606e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    if paren_string == '()':\n        return result.append(paren_string)\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            counter = 1\n            for j in range(i + 1, len(paren_string)):\n                if paren_string[j] == '(':\n                    counter += 1": 5.796098042961018e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # # SOLUTION\n    # if not paren_string:\n    #     return []\n    #\n    # stack = []\n    # paren_groups = []\n    # for i in range(len(paren_string)):\n    #     if paren_string[i] == '(':\n    #         stack.append(i)\n    #     elif paren_string[i] == ')':": 9.203160886533073e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    current = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current:\n                parens.append(current)\n                current = \"\"\n            current += char\n        elif char == \")\":\n            if current:\n                parens.append(current)\n                current = \"\"\n            current += char\n        else:\n            if current:\n                current += char\n    if": 3.9982737755386673e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    paren_groups = []\n    paren_in_group = False\n    paren_start = 0\n    for idx, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_stack.append(paren)\n            paren_in_group = True\n            continue\n        if paren == ')':\n            if not paren_stack": 2.913533241738987e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    count = 0\n    open_paren_count = 0\n    open_paren_index = 0\n    curr_result = ''\n    paren_stack = []\n    paren_list = []\n\n    for i in paren_string:\n        if i == '(':\n            if open_paren_count != 0:\n                curr_result += '('\n            open_paren_count += 1": 1.6806057448518057e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code here\n    # Hint: This method will be useful for later\n    return []": 1.5482614340530095e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    for i in paren_string.split():\n        if i not in groups:\n            groups.append(i)\n    return groups": 2.148311804948781e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # split string into a list of single-character groups\n    paren_groups = [group for group in paren_string.split()]\n\n    # store an empty list for the separated strings\n    separated_groups = []\n\n    # while there are paren groups left in the original string:\n    while paren_groups:\n        # check the first character in each group to see if it is a closing paren:\n        # if so": 3.8277487262860615e-41, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    to_check = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            to_check.append(i)\n        elif char == ')':\n            to_check.pop()\n        elif i == len(paren_string) - 1 and len(to_check) == 0:\n            groups.append(paren_string[i-1:": 1.1946910530383913e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # BEGIN SOLUTION\n    ans = []\n    stack = []\n\n    for x in paren_string:\n        if x == \"(\":\n            stack.append(x)\n        else:\n            if len(stack) > 0:\n                ans.append(\"\".join(stack))\n                stack.pop()\n            else:\n                ans.append(x)\n    return ans": 5.090502043974714e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    results = []\n    current_result = ''\n    skip = False\n    for letter in paren_string:\n        if letter == '(':\n            skip = True\n        elif letter == ')' and current_result != '':\n            results.append(current_result)\n            current_result = ''\n        elif letter == ')' and current_result == '':\n            skip = False\n        elif not skip:\n            current": 1.792668037329178e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            current_group = \"\"\n            for j in range(i, len(paren_string)):\n                if paren_string[j] == '(':\n                    current_group += paren_string[i:j+1]\n                elif paren_string[j] == '": 8.979701096558298e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    parenthesis_stack = []\n    new_string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            parenthesis_stack.append(new_string)\n            new_string = \"\"\n        elif char == \")\":\n            result.append(parenthesis_stack.pop())\n        else:\n            new_string += char\n    return result": 1.058175071455489e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_string = []\n    count = 0\n    for i in paren_string:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n        elif i == \" \":\n            if count != 0:\n                list_string.append(\"(\")\n            if count == 0:\n                list_string.append(\")\")\n\n    return list_string": 2.315405584601001e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    # Lets store everything that is not a parenthesis in a list\n    out_string = []\n    paren_count = 0\n    for char in paren_string:\n        if char == '(':\n            paren_count += 1\n        elif char == ')':\n            paren_count -= 1\n        else:\n            # This character is not a parent": 2.4160637506269583e-28, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    paren_list = list(paren_string)\n    paren_list = [c for c in paren_list if c != \" \"]\n\n    # remove outermost parentheses if they exist\n    if paren_list[0] == \"(\" and paren_list[-1] == \")\":\n        paren_list = paren_list[1:-1]\n\n    #": 4.430643984180746e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_brackets = \"(\"\n    close_brackets = \")\"\n    paren_groups = []\n    current_substring = \"\"\n    for char in paren_string:\n        if char == open_brackets:\n            if current_substring != \"\":\n                paren_groups.append(current_substring)\n                current_substring = \"\"\n        elif char == close_brackets:\n            if current": 2.051224532569626e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == \"\":\n        return []\n\n    paren_stack = []\n    paren_list = []\n\n    for paren in paren_string:\n        if paren == \"(\":\n            paren_stack.append(paren)\n\n        elif paren == \")\":\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n\n            else:": 9.322807926859177e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    list_string = []\n    counter = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            counter += 1\n        elif char == \")\":\n            counter -= 1\n        elif counter == 0 and char == \" \":\n            list_string.append(\"\")\n        elif char == \" \" and counter == 0:\n            list_string.append(\" \")\n        elif counter == 0:\n            list": 2.1677579129058456e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    group_list = []\n\n    # Create a list of all the nested groups\n    for group in paren_string.split(')('):\n        # if group is not empty, we have a group\n        if group:\n            # Create an empty group list to append nested groups to.\n            group_list.append(group)\n\n    return group_list": 2.2605227632814107e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    # paren_stack = []\n    start_idx = 0\n    for idx, paren in enumerate(paren_string):\n        if paren == '(':\n            if start_idx == idx:\n                start_idx += 1\n            else:\n                paren_groups.append(paren_string[start_idx:idx])\n                start_idx = idx\n        elif paren": 2.878325397208637e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # initialize an empty stack\n    stack = []\n\n    # loop through each character in the input string\n    for i, char in enumerate(paren_string):\n\n        # if the character is an opening parenthesis, append it to the stack\n        if char == '(':\n            stack.append(i)\n\n        # if the character is a closing parenthesis, remove the corresponding opening parenthesis from the stack\n        elif char ==": 7.1447276638825e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    parens = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n        if len(stack) == 0 and char == ' ':\n            if len(parens) > 0:\n                parens.append('')\n        elif len(stack)": 1.2188704793551356e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    return ['a']": 1.2360359851855547e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    open_paren = \"(\"\n    closed_paren = \")\"\n    return_list = []\n\n    for paren in paren_string:\n        if paren == open_paren:\n            paren_stack.append(paren)\n        elif paren == closed_paren:\n            if paren_stack:\n                paren_stack.pop()\n\n    if pare": 2.2465913032924188e-13, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    temp = \"\"\n    count = 0\n    for char in paren_string:\n        if count == 0:\n            temp += char\n        elif count == 1:\n            if char == \"(\":\n                temp += char\n            elif char == \")\":\n                paren_list.append(temp)\n                temp = \"\"\n                count = 0\n            else:\n                temp += char\n        else:": 2.9330120714166107e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.strip()\n    print(paren_string)\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            start_index = index\n            end_index = index + 1\n            while True:\n                if paren_string[end_index] == ')':": 1.5173331447004028e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    paren_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(' and paren_string[i+1] == ')':\n            paren_list.append(paren_string[i+1:])\n            i += 2\n        elif paren_string[": 1.7733041055871346e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    result = []\n    curr_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(curr_group)\n            curr_group = ''\n        elif char == ')':\n            curr_group += char\n            if stack:\n                result.append(stack.pop())\n        elif char != ' ':\n            curr_group +=": 4.2107640979598496e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # split the string into a list of substring/s\n    substring_list = paren_string.split()\n    # list to hold the separate strings\n    separate_substring_list = []\n    # loop through the list of substrings and separate into separate strings\n    for substring in substring_list:\n        # if the string has a left parenthesis then append to the list\n        if substring[0] == '('": 8.60256087731003e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_groups = []\n\n    # Split the string into individual groups\n    current_group = \"\"\n    for c in paren_string:\n        if c == \"(\":\n            if current_group != \"\":\n                paren_groups.append(current_group)\n            current_group = \"\"\n        elif c == \")\":\n            if current_group != \"\":\n                paren_groups.append(": 3.0906299876418375e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Check that the string is well-formed and not empty\n    if paren_string.strip() == '':\n        raise ValueError('Input string should not be empty.')\n    # It is not balanced, so return empty string\n    elif '(' not in paren_string or ')' not in paren_string:\n        return [paren_string]\n    # If string is balanced, proceed to separate the nested groups\n    else": 1.4191354600141234e-38, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Fill this function out\n    # Don't edit the code below\n    return separate_paren_groups_helper(paren_string, 0)": 7.487209515132972e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [\"\".join(paren_string.split(c)) for c in paren_string if c in \"()\"]": 1.7458813865843262e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # initialize variables to hold lists of parentheses\n    balanced_paren_list = []\n    group_list = []\n\n    # iterate over string and check for open and closing paren\n    for char in paren_string:\n        # if open paren, add it to the group_list\n        if char == '(':\n            group_list.append(char)\n        # if closing paren, if it is the last": 1.0332652626486002e-32, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Split the string into a list of nested parentheses\n    paren_list = paren_string.split(')(')\n\n    # Store the result in a list\n    list_of_results = []\n\n    # Loop through the list\n    for paren in paren_list:\n\n        # Strip any leading or trailing spaces\n        paren = paren.strip()\n\n        # If the paren": 8.342865053797354e-25, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    ret_list = []\n    ret_string = ''\n    if paren_string.count('(') == paren_string.count(')') and len(paren_string) > 0:\n        if paren_string.count('(') == paren_string.count(')'):\n            if paren_string.count('(') > 0 and paren_string.count(')') > 0:\n                if paren": 4.132811381247949e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # WRITE YOUR SOLUTION HERE\n\n    pass": 6.992465489695914e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Make a list of all the 'paren strings' you find\n    # We start by counting the parens in the string\n    num_paren = paren_string.count('(')\n    # Now we'll use this list to put each group in its own list\n    paren_list = []\n    # What will be the index of the paren you're currently looking at?\n    paren_ind = 0\n    #": 1.0068226671002099e-53, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    paren_dict = {}\n    result = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_dict['('] = paren_dict.get('(', 0) + 1\n        else:\n            paren_dict['('] = paren_dict.get('(', 0) - 1\n\n    if paren_dict['('] != 0": 1.2114850068860006e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 0:\n        return []\n    elif paren_string.find('(') < 0:\n        return [paren_string]\n    else:\n        temp = paren_string.split('(')\n        temp1 = [item for item in temp if len(item) != 0]\n        temp2 = [item.replace(')', '') for item in temp1]\n        temp": 3.329835847269338e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    curr_group = ''\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        elif char == ' ' and depth == 0:\n            groups.append(curr_group)\n            curr_group = ''\n        else:\n            curr_group += char\n    groups": 2.618723325185139e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    if not paren_string:\n        return [paren_string]\n\n    if paren_string[0] != '(':\n        return [paren_string]\n\n    if paren_string[-1] != ')':\n        return [paren_string]\n\n    paren_string_without_first_and_last = paren_string[1:-1]\n\n    return [paren": 1.2604447866698356e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_count = 0\n    start_index = 0\n    end_index = 0\n    paren_group = []\n    paren_groups = []\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n            if open_count == 1:\n                start_index = index\n        elif char == ')':\n            open_count -= 1": 6.783475209976953e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    p_index = 0\n    while p_index < len(paren_string):\n        if paren_string[p_index] == '(':\n            open_paren = paren_string[p_index]\n            end_paren = paren_string[p_index]\n\n            open_paren_index = p_index\n            close_paren_index = -1": 2.443873326477132e-19, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string == '':\n        return []\n    else:\n        open_paren_index = paren_string.find('(')\n        open_paren_pos = paren_string.find('(')\n        open_paren_count = 1\n        closed_paren_index = 0\n        closed_paren_count = 0\n\n        if open_paren_index == -1:\n            return": 2.3304395581666733e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    paren_group = []\n    for paren_char in paren_string:\n        if paren_char == \"(\":\n            stack.append(paren_char)\n        elif paren_char == \")\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                paren_group.append(paren_char)\n    return paren_group": 2.7379181111107773e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO\n    # You can either use a recursive function with a stack or loop. \n    # Recursive function with a stack is more complex but it's easier to understand\n    # Loop is easier and more straight forward but less efficient\n    return []": 2.1261320301765112e-37, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Your code goes here\n    return []": 2.1637833981349938e-05, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    sep = []\n    counter = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            counter += 1\n        elif paren_string[i] == ')':\n            counter -= 1\n        if counter == 0:\n            sep.append(paren_string[0:i+1])\n            paren_string = paren_string[i": 4.621723629097043e-10, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    group = ''\n\n    for paren in paren_string:\n        if paren != ' ':\n            group += paren\n        elif group:\n            paren_groups.append(group)\n            group = ''\n\n    paren_groups.append(group)\n\n    return paren_groups": 8.368883715497243e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_group = ''\n    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            if paren_group:\n                paren_list.append(paren_group)\n                paren_group = ''\n        elif char == ')':\n            if paren_group:\n                paren_list.append(paren_group)\n            paren_group =": 7.997037942655584e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens = []\n    parens_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            parens_stack.append(paren)\n        elif paren == ')':\n            parens.append(parens_stack.pop())\n    return parens": 4.291344080370531e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = list()\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                break\n            stack.pop()\n            if len(stack) == 0:\n                paren_list.append(\"(\")\n    return paren_list": 1.9767883967159894e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    return [paren_string[i : j] for i, j in zip(range(len(paren_string)), range(1, len(paren_string) + 1))]": 6.519854059955914e-08, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    if paren_string == \"\":\n        return result\n\n    while count < len(paren_string):\n        if paren_string[count] == '(':\n            paren_list.append(paren_string[count])\n            count += 1\n        else:": 3.516547870110921e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if len(paren_string) == 1:\n        return [paren_string]\n\n    # Find all the groups in the input string\n    group_starts = [i for i, letter in enumerate(paren_string) if letter == '(']\n    group_ends = [i for i, letter in enumerate(paren_string) if letter == ')']\n\n    group_starts = [i + 1": 3.6462636417318985e-21, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    group_list = []\n    for i in paren_string:\n        if i == \"(\":\n            group_list.append(i)\n        elif i == \")\":\n            if group_list:\n                paren_list.append(\"\".join(group_list))\n                group_list = []\n            else:\n                paren_list.append(\")\")\n    return paren_": 1.630390070226626e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    groups = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append('(')\n        elif paren == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                raise Exception(\"Didn't end with open paren. Group didn't balance\")\n        elif paren": 1.7067656507863424e-24, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Write your code here\n    return [\"\"]": 3.2310783282253057e-06, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    # Write your code here.\n    return paren_groups": 3.790057028474597e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    parens = []\n    paren_index = 0\n    paren_stack = []\n    while paren_index < len(paren_string):\n        if paren_string[paren_index] == '(':\n            paren_stack.append('(')\n        elif paren_string[paren_index] == ')' and paren_stack:\n            paren_stack.pop()\n        paren": 1.440557351749303e-12, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_groups = []\n    current_paren = ''\n    is_open = False\n    for c in paren_string:\n        if c == '(':\n            current_paren += c\n            is_open = True\n        elif c == ')':\n            current_paren += c\n            if current_paren[0] == '(':\n                current_paren = ')'\n            else:": 3.185136478913299e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = [[]]\n    for paren in paren_string:\n        if paren == '(':\n            groups[-1].append('')\n            groups.append([])\n        elif paren == ')':\n            groups[-1][-1] += paren\n            groups.pop()\n        else:\n            groups[-1][-1] += paren\n    return ['(' + group + ')' for group in groups": 3.274739525691964e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_stack = []\n    result = []\n    p_start = 0\n    paren_string = paren_string.replace(' ', '')\n    for p_end, paren in enumerate(paren_string):\n        if paren == '(':\n            if paren_stack:\n                p_start = paren_stack[-1] + 1\n            paren_stack.append(p_end)": 7.604331896998142e-17, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')\n\n    # Initialize the output list\n    output = []\n\n    # Initialize the stack\n    stack = []\n\n    # Iterate over each character in the string\n    for char in paren_string:\n        # If the character is an open parenthesis, push it to the stack\n        if char == '(':\n            stack.append(char)": 1.9710109144081984e-15, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    #  TODO:\n    #  use regular expressions to create two regexes, one to match balanced parentheses\n    #  and one to match unbalanced parentheses\n    #  then use those regular expressions to split the string into groups of parentheses\n    #  return the list of those groups\n    return []": 5.012535032824016e-35, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    result = []\n    paren_stack = []\n    paren_idx = 0\n\n    while paren_idx < len(paren_string):\n        if paren_string[paren_idx] == '(':\n            paren_stack.append('(')\n        elif paren_string[paren_idx] == ')':\n            if paren_stack:\n                paren_stack.pop()": 8.994643600747795e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_stack.append(i)\n        if paren_string[i] == ')':\n            if len(paren_stack) == 0:\n                result.append(paren_string[paren_stack[-1]:i": 2.1007222363363755e-09, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if paren_string[0] != \"(\" or paren_string[-1] != \")\":\n        raise ValueError(\"Incorrectly formatted input string\")\n\n    current_group = \"\"\n    groups = []\n    for char in paren_string:\n        if char == \"(\":\n            current_group = \"\"\n        elif char == \")\":\n            if current_group:\n                groups.append(current_group)": 1.1938928593603095e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: write me\n\n    pass": 6.701627695924745e-07, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    def split_list(lst: List[str]) -> List[str]:\n        result = []\n        for element in lst:\n            if '(' in element:\n                result.append(element)\n            elif ')' in element:\n                result.append(element)\n            else:\n                result.append(element)\n        return result\n\n    def extract_nested_list(lst: List[str]) -": 4.3171588723718614e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n    # Write your code here\n    paren_list = []\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) != 0:\n                paren": 2.9617843541543624e-16, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Handle edge cases.\n    if paren_string == '':\n        return []\n\n    open_pars = []\n    paren_strs = []\n    start_index = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_pars.append(i)\n        elif paren_string[i] == ')' and len": 1.702323735331633e-20, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # I'm currently not sure if you should make a list to store the parens, or do it all in one go. I\n    # found both implementations to be quite similar to the other.\n    # I'm not sure what kind of solution is best for the problem as there are different test cases.\n    # I've decided to go with the one where I write all the parens into one list and return that.\n\n    # I'": 2.3710744104355193e-75, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    parens_count = 0\n    paren_list = []\n    i = 0\n    for char in paren_string:\n        if char == '(':\n            parens_count += 1\n            if parens_count > 1:\n                paren_list.append('')\n        elif char == ')':\n            parens_count -= 1\n            if parens_count == 0:\n                paren_list.": 1.6615853573503508e-14, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO: Write your solution here\n    # Return a list of groups separated by parentheses.\n    # Use nested while loops and a list to store the groups.\n    # Your code should use list comprehension for this.": 2.9760667599277956e-31, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    open_brackets = []\n    bracket_stack = []\n    sep_string_list = []\n    for char in paren_string:\n        if char == '(':\n            open_brackets.append(char)\n        elif char == ')':\n            if open_brackets:\n                bracket_stack.append(')')\n                open_brackets.pop()\n    if bracket_stack:\n        print": 2.8491868094657107e-18, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_list = []\n    paren_stack = []\n    for i in paren_string:\n        if i == \"(\":\n            paren_stack.append(i)\n        elif i == \")\":\n            paren_stack.pop()\n        else:\n            if len(paren_stack) > 0:\n                paren_list.append(paren_stack.pop())\n            else:\n                pare": 1.9992364021872062e-11, "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    res = []\n    stack = []\n    curr_str = ''\n    for i in paren_string:\n        if i == '(':\n            stack.append(i)\n            curr_str += i\n        elif i == ')' and stack[-1] == '(':\n            stack.pop()\n            curr_str += i\n            if len(stack) > 0:\n                res.append(curr_": 3.105028969485656e-14}